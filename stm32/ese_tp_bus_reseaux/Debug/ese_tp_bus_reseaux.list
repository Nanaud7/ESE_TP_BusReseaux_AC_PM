
ese_tp_bus_reseaux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cc4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08008e58  08008e58  00018e58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800931c  0800931c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800931c  0800931c  0001931c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009324  08009324  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009324  08009324  00019324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009328  08009328  00019328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800932c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  200001f4  08009520  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  08009520  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000175d5  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003373  00000000  00000000  000377f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  0003ab70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e60  00000000  00000000  0003bb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d45  00000000  00000000  0003c998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013aac  00000000  00000000  000656dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eebbe  00000000  00000000  00079189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00167d47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005100  00000000  00000000  00167d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e3c 	.word	0x08008e3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	08008e3c 	.word	0x08008e3c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <BMP280_SetConfig>:
}

/*	@brief	Configuration du capteur
 *	@retval Nouvelle configuration dU le capteur pour vérification
 */
uint8_t BMP280_SetConfig() {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af02      	add	r7, sp, #8
	uint8_t reg = (uint8_t)REG_CTRL_MEAS;
 8000ec6:	23f4      	movs	r3, #244	; 0xf4
 8000ec8:	71bb      	strb	r3, [r7, #6]
	uint8_t ctrl_meas_config = 0b01010111;
 8000eca:	2357      	movs	r3, #87	; 0x57
 8000ecc:	71fb      	strb	r3, [r7, #7]
	uint8_t frame[2] = {reg, ctrl_meas_config};
 8000ece:	79bb      	ldrb	r3, [r7, #6]
 8000ed0:	713b      	strb	r3, [r7, #4]
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	717b      	strb	r3, [r7, #5]
	uint8_t ctrl_meas_read = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	70fb      	strb	r3, [r7, #3]

	if(HAL_OK == HAL_I2C_Master_Transmit(&hi2c3, BMP280_ADDR, frame, I2C_MEMADD_SIZE_16BIT, HAL_MAX_DELAY)){
 8000eda:	1d3a      	adds	r2, r7, #4
 8000edc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	21ee      	movs	r1, #238	; 0xee
 8000ee6:	4810      	ldr	r0, [pc, #64]	; (8000f28 <BMP280_SetConfig+0x68>)
 8000ee8:	f002 f872 	bl	8002fd0 <HAL_I2C_Master_Transmit>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d114      	bne.n	8000f1c <BMP280_SetConfig+0x5c>
		if(HAL_OK == HAL_I2C_Master_Transmit(&hi2c3, BMP280_ADDR, &reg, I2C_MEMADD_SIZE_8BIT, HAL_MAX_DELAY))
 8000ef2:	1dba      	adds	r2, r7, #6
 8000ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	2301      	movs	r3, #1
 8000efc:	21ee      	movs	r1, #238	; 0xee
 8000efe:	480a      	ldr	r0, [pc, #40]	; (8000f28 <BMP280_SetConfig+0x68>)
 8000f00:	f002 f866 	bl	8002fd0 <HAL_I2C_Master_Transmit>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d108      	bne.n	8000f1c <BMP280_SetConfig+0x5c>
			if(HAL_OK == HAL_I2C_Master_Receive(&hi2c3, BMP280_ADDR, &ctrl_meas_read, I2C_MEMADD_SIZE_8BIT, HAL_MAX_DELAY));
 8000f0a:	1cfa      	adds	r2, r7, #3
 8000f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2301      	movs	r3, #1
 8000f14:	21ee      	movs	r1, #238	; 0xee
 8000f16:	4804      	ldr	r0, [pc, #16]	; (8000f28 <BMP280_SetConfig+0x68>)
 8000f18:	f002 f94e 	bl	80031b8 <HAL_I2C_Master_Receive>
	}

	return ctrl_meas_read;
 8000f1c:	78fb      	ldrb	r3, [r7, #3]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2000029c 	.word	0x2000029c

08000f2c <BMP280_GetTemperature>:
}

/*	@brief	Récupération de la température compensée
 *	@retval Température compensée
 */
float BMP280_GetTemperature(){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af02      	add	r7, sp, #8
	// Récupération de la temperature brute dans les registres du BMP280
	uint8_t reg = (uint8_t)REG_TEMP_MSB;
 8000f32:	23fa      	movs	r3, #250	; 0xfa
 8000f34:	72fb      	strb	r3, [r7, #11]
	uint8_t tempArray[3] = {0};
 8000f36:	4b2b      	ldr	r3, [pc, #172]	; (8000fe4 <BMP280_GetTemperature+0xb8>)
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	813b      	strh	r3, [r7, #8]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	72bb      	strb	r3, [r7, #10]
	if(HAL_OK == HAL_I2C_Master_Transmit(&hi2c3, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY)){
 8000f40:	f107 020b 	add.w	r2, r7, #11
 8000f44:	f04f 33ff 	mov.w	r3, #4294967295
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	21ee      	movs	r1, #238	; 0xee
 8000f4e:	4826      	ldr	r0, [pc, #152]	; (8000fe8 <BMP280_GetTemperature+0xbc>)
 8000f50:	f002 f83e 	bl	8002fd0 <HAL_I2C_Master_Transmit>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d109      	bne.n	8000f6e <BMP280_GetTemperature+0x42>
		if(HAL_OK == HAL_I2C_Master_Receive(&hi2c3, BMP280_ADDR, tempArray, 3, HAL_MAX_DELAY));
 8000f5a:	f107 0208 	add.w	r2, r7, #8
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2303      	movs	r3, #3
 8000f66:	21ee      	movs	r1, #238	; 0xee
 8000f68:	481f      	ldr	r0, [pc, #124]	; (8000fe8 <BMP280_GetTemperature+0xbc>)
 8000f6a:	f002 f925 	bl	80031b8 <HAL_I2C_Master_Receive>
	}

	// Mise en ordre des registres
	uint32_t rawTemp = tempArray[0] << 12 | tempArray[1] << 4 | tempArray[2] >> 4;
 8000f6e:	7a3b      	ldrb	r3, [r7, #8]
 8000f70:	031a      	lsls	r2, r3, #12
 8000f72:	7a7b      	ldrb	r3, [r7, #9]
 8000f74:	011b      	lsls	r3, r3, #4
 8000f76:	4313      	orrs	r3, r2
 8000f78:	7aba      	ldrb	r2, [r7, #10]
 8000f7a:	0912      	lsrs	r2, r2, #4
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]

	// Récupération de la calibration dans les registres du BMP280
	reg = (uint8_t)REG_CALIBT1;
 8000f82:	2388      	movs	r3, #136	; 0x88
 8000f84:	72fb      	strb	r3, [r7, #11]
	uint8_t calibArray[6] = {0};
 8000f86:	2300      	movs	r3, #0
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	80bb      	strh	r3, [r7, #4]
	if(HAL_OK == HAL_I2C_Master_Transmit(&hi2c3, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY)){
 8000f8e:	f107 020b 	add.w	r2, r7, #11
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	2301      	movs	r3, #1
 8000f9a:	21ee      	movs	r1, #238	; 0xee
 8000f9c:	4812      	ldr	r0, [pc, #72]	; (8000fe8 <BMP280_GetTemperature+0xbc>)
 8000f9e:	f002 f817 	bl	8002fd0 <HAL_I2C_Master_Transmit>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d108      	bne.n	8000fba <BMP280_GetTemperature+0x8e>
		if(HAL_OK == HAL_I2C_Master_Receive(&hi2c3, BMP280_ADDR, calibArray, 6, HAL_MAX_DELAY));
 8000fa8:	463a      	mov	r2, r7
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2306      	movs	r3, #6
 8000fb2:	21ee      	movs	r1, #238	; 0xee
 8000fb4:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <BMP280_GetTemperature+0xbc>)
 8000fb6:	f002 f8ff 	bl	80031b8 <HAL_I2C_Master_Receive>
	}

	return (float)BMP280_CompensateT(calibArray, rawTemp)/100;
 8000fba:	463b      	mov	r3, r7
 8000fbc:	68f9      	ldr	r1, [r7, #12]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 f816 	bl	8000ff0 <BMP280_CompensateT>
 8000fc4:	ee07 0a90 	vmov	s15, r0
 8000fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fcc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000fec <BMP280_GetTemperature+0xc0>
 8000fd0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fd4:	eef0 7a66 	vmov.f32	s15, s13
}
 8000fd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	08008e58 	.word	0x08008e58
 8000fe8:	2000029c 	.word	0x2000029c
 8000fec:	42c80000 	.word	0x42c80000

08000ff0 <BMP280_CompensateT>:
/*	@brief	Calcul de la température compensée
 * 	@param	Calibration de la mesure de température
 * 	@param	Température brute récupérée
 *	@retval Température compensée
 */
uint32_t BMP280_CompensateT(uint8_t *calib, uint32_t rawTemp) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
	uint32_t dig_T1 = calib[0] | calib[1]<<8;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3301      	adds	r3, #1
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	4313      	orrs	r3, r2
 800100a:	61fb      	str	r3, [r7, #28]
	uint32_t dig_T2 = calib[2] | calib[3]<<8;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3302      	adds	r3, #2
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3303      	adds	r3, #3
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
	uint32_t dig_T3	= calib[4] | calib[5]<<8;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3304      	adds	r3, #4
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3305      	adds	r3, #5
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	021b      	lsls	r3, r3, #8
 8001030:	4313      	orrs	r3, r2
 8001032:	617b      	str	r3, [r7, #20]

	uint32_t var1 = ((((rawTemp >> 3) - (dig_T1 << 1)))
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	08da      	lsrs	r2, r3, #3
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	1ad3      	subs	r3, r2, r3
			* dig_T2) >> 11;
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	fb02 f303 	mul.w	r3, r2, r3
	uint32_t var1 = ((((rawTemp >> 3) - (dig_T1 << 1)))
 8001044:	0adb      	lsrs	r3, r3, #11
 8001046:	613b      	str	r3, [r7, #16]
	uint32_t var2 = (((((rawTemp >> 4) - dig_T1)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	091a      	lsrs	r2, r3, #4
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	1ad3      	subs	r3, r2, r3
			* ((rawTemp >> 4) - dig_T1)) >> 12)
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	0911      	lsrs	r1, r2, #4
 8001054:	69fa      	ldr	r2, [r7, #28]
 8001056:	1a8a      	subs	r2, r1, r2
 8001058:	fb02 f303 	mul.w	r3, r2, r3
 800105c:	0b1b      	lsrs	r3, r3, #12
			* dig_T3) >> 14;
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	fb02 f303 	mul.w	r3, r2, r3
	uint32_t var2 = (((((rawTemp >> 4) - dig_T1)
 8001064:	0b9b      	lsrs	r3, r3, #14
 8001066:	60fb      	str	r3, [r7, #12]

	uint32_t t_fine = var1 + var2;
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4413      	add	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
	return (t_fine * 5 + 128) >> 8;
 8001070:	68ba      	ldr	r2, [r7, #8]
 8001072:	4613      	mov	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	3380      	adds	r3, #128	; 0x80
 800107a:	0a1b      	lsrs	r3, r3, #8
}
 800107c:	4618      	mov	r0, r3
 800107e:	3724      	adds	r7, #36	; 0x24
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <BMP280_GetPressure>:

/*	@brief	Récupération de la pression compensée
 *	@retval Pression compensée
 */
float BMP280_GetPressure(){
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af02      	add	r7, sp, #8
	// Récupération de la pression brute dans les registres du BMP280
	uint8_t reg = (uint8_t)REG_PRESS_MSB;
 800108e:	23f7      	movs	r3, #247	; 0xf7
 8001090:	76fb      	strb	r3, [r7, #27]
	uint8_t pressArray[3] = {0};
 8001092:	4b2b      	ldr	r3, [pc, #172]	; (8001140 <BMP280_GetPressure+0xb8>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	833b      	strh	r3, [r7, #24]
 8001098:	2300      	movs	r3, #0
 800109a:	76bb      	strb	r3, [r7, #26]
	if(HAL_OK == HAL_I2C_Master_Transmit(&hi2c3, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY)){
 800109c:	f107 021b 	add.w	r2, r7, #27
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2301      	movs	r3, #1
 80010a8:	21ee      	movs	r1, #238	; 0xee
 80010aa:	4826      	ldr	r0, [pc, #152]	; (8001144 <BMP280_GetPressure+0xbc>)
 80010ac:	f001 ff90 	bl	8002fd0 <HAL_I2C_Master_Transmit>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d109      	bne.n	80010ca <BMP280_GetPressure+0x42>
		if(HAL_OK == HAL_I2C_Master_Receive(&hi2c3, BMP280_ADDR, pressArray, 3, HAL_MAX_DELAY));
 80010b6:	f107 0218 	add.w	r2, r7, #24
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2303      	movs	r3, #3
 80010c2:	21ee      	movs	r1, #238	; 0xee
 80010c4:	481f      	ldr	r0, [pc, #124]	; (8001144 <BMP280_GetPressure+0xbc>)
 80010c6:	f002 f877 	bl	80031b8 <HAL_I2C_Master_Receive>
	}

	// Mise en ordre des registres
	uint32_t rawPress = pressArray[0] << 12 | pressArray[1] << 4 | pressArray[2] >> 4;
 80010ca:	7e3b      	ldrb	r3, [r7, #24]
 80010cc:	031a      	lsls	r2, r3, #12
 80010ce:	7e7b      	ldrb	r3, [r7, #25]
 80010d0:	011b      	lsls	r3, r3, #4
 80010d2:	4313      	orrs	r3, r2
 80010d4:	7eba      	ldrb	r2, [r7, #26]
 80010d6:	0912      	lsrs	r2, r2, #4
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	4313      	orrs	r3, r2
 80010dc:	61fb      	str	r3, [r7, #28]

	// Récupération de la calibration dans les registres du BMP280
	reg = (uint8_t)REG_CALIBP1;
 80010de:	238e      	movs	r3, #142	; 0x8e
 80010e0:	76fb      	strb	r3, [r7, #27]
	uint8_t calibArray[18] = {0};
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	819a      	strh	r2, [r3, #12]
	if(HAL_OK == HAL_I2C_Master_Transmit(&hi2c3, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY)){
 80010f4:	f107 021b 	add.w	r2, r7, #27
 80010f8:	f04f 33ff 	mov.w	r3, #4294967295
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2301      	movs	r3, #1
 8001100:	21ee      	movs	r1, #238	; 0xee
 8001102:	4810      	ldr	r0, [pc, #64]	; (8001144 <BMP280_GetPressure+0xbc>)
 8001104:	f001 ff64 	bl	8002fd0 <HAL_I2C_Master_Transmit>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d108      	bne.n	8001120 <BMP280_GetPressure+0x98>
		if(HAL_OK == HAL_I2C_Master_Receive(&hi2c3, BMP280_ADDR, calibArray, 18, HAL_MAX_DELAY));
 800110e:	1d3a      	adds	r2, r7, #4
 8001110:	f04f 33ff 	mov.w	r3, #4294967295
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2312      	movs	r3, #18
 8001118:	21ee      	movs	r1, #238	; 0xee
 800111a:	480a      	ldr	r0, [pc, #40]	; (8001144 <BMP280_GetPressure+0xbc>)
 800111c:	f002 f84c 	bl	80031b8 <HAL_I2C_Master_Receive>
	}

	return BMP280_CompensateP(calibArray, rawPress)/256;
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	69f9      	ldr	r1, [r7, #28]
 8001124:	4618      	mov	r0, r3
 8001126:	f000 f80f 	bl	8001148 <BMP280_CompensateP>
 800112a:	4603      	mov	r3, r0
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	ee07 3a90 	vmov	s15, r3
 8001132:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8001136:	eeb0 0a67 	vmov.f32	s0, s15
 800113a:	3720      	adds	r7, #32
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	08008e58 	.word	0x08008e58
 8001144:	2000029c 	.word	0x2000029c

08001148 <BMP280_CompensateP>:
/*	@brief	Calcul de la pression compensée
 * 	@param	Calibration de la mesure de pression
 * 	@param	Pression brute récupérée
 *	@retval Pression compensée
 */
uint32_t BMP280_CompensateP(uint8_t *calib, uint32_t rawPress) {
 8001148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800114c:	b0a6      	sub	sp, #152	; 0x98
 800114e:	af00      	add	r7, sp, #0
 8001150:	6578      	str	r0, [r7, #84]	; 0x54
 8001152:	6539      	str	r1, [r7, #80]	; 0x50
	uint32_t dig_P1 = calib[0] | calib[1]<<8;
 8001154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800115c:	3301      	adds	r3, #1
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	021b      	lsls	r3, r3, #8
 8001162:	4313      	orrs	r3, r2
 8001164:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	uint32_t dig_P2 = calib[2] | calib[3]<<8;
 8001168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800116a:	3302      	adds	r3, #2
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001172:	3303      	adds	r3, #3
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	4313      	orrs	r3, r2
 800117a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	uint32_t dig_P3	= calib[4] | calib[5]<<8;
 800117e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001180:	3304      	adds	r3, #4
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001188:	3305      	adds	r3, #5
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	4313      	orrs	r3, r2
 8001190:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	uint32_t dig_P4	= calib[6] | calib[7]<<8;
 8001194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001196:	3306      	adds	r3, #6
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800119e:	3307      	adds	r3, #7
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	4313      	orrs	r3, r2
 80011a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	uint32_t dig_P5	= calib[8] | calib[9]<<8;
 80011aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011ac:	3308      	adds	r3, #8
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011b4:	3309      	adds	r3, #9
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	021b      	lsls	r3, r3, #8
 80011ba:	4313      	orrs	r3, r2
 80011bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint32_t dig_P6	= calib[10] | calib[11]<<8;
 80011c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011c2:	330a      	adds	r3, #10
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011ca:	330b      	adds	r3, #11
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	4313      	orrs	r3, r2
 80011d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	uint32_t dig_P7	= calib[12] | calib[13]<<8;
 80011d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011d8:	330c      	adds	r3, #12
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011e0:	330d      	adds	r3, #13
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	4313      	orrs	r3, r2
 80011e8:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t dig_P8	= calib[14] | calib[15]<<8;
 80011ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011ec:	330e      	adds	r3, #14
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011f4:	330f      	adds	r3, #15
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	021b      	lsls	r3, r3, #8
 80011fa:	4313      	orrs	r3, r2
 80011fc:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t dig_P9	= calib[16] | calib[17]<<8;
 80011fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001200:	3310      	adds	r3, #16
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001208:	3311      	adds	r3, #17
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	021b      	lsls	r3, r3, #8
 800120e:	4313      	orrs	r3, r2
 8001210:	677b      	str	r3, [r7, #116]	; 0x74

	uint32_t t_fine = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	673b      	str	r3, [r7, #112]	; 0x70
	uint64_t var1, var2, p;

	var1 = ((uint64_t)t_fine) - 128000;
 8001216:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001218:	461a      	mov	r2, r3
 800121a:	f04f 0300 	mov.w	r3, #0
 800121e:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 8001222:	f143 35ff 	adc.w	r5, r3, #4294967295
 8001226:	e9c7 451a 	strd	r4, r5, [r7, #104]	; 0x68
	var2 = var1 * var1 * (uint64_t)dig_P6;
 800122a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800122c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800122e:	fb03 f102 	mul.w	r1, r3, r2
 8001232:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001234:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001236:	fb03 f302 	mul.w	r3, r3, r2
 800123a:	18ca      	adds	r2, r1, r3
 800123c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800123e:	fba3 4503 	umull	r4, r5, r3, r3
 8001242:	1953      	adds	r3, r2, r5
 8001244:	461d      	mov	r5, r3
 8001246:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800124a:	461a      	mov	r2, r3
 800124c:	f04f 0300 	mov.w	r3, #0
 8001250:	fb02 f005 	mul.w	r0, r2, r5
 8001254:	fb04 f103 	mul.w	r1, r4, r3
 8001258:	4401      	add	r1, r0
 800125a:	fba4 2302 	umull	r2, r3, r4, r2
 800125e:	4419      	add	r1, r3
 8001260:	460b      	mov	r3, r1
 8001262:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8001266:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	var2 = var2 + ((var1*(uint64_t)dig_P5)<<17);
 800126a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800126e:	461a      	mov	r2, r3
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001276:	fb03 f001 	mul.w	r0, r3, r1
 800127a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800127c:	fb02 f101 	mul.w	r1, r2, r1
 8001280:	4408      	add	r0, r1
 8001282:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001284:	fba1 2302 	umull	r2, r3, r1, r2
 8001288:	18c1      	adds	r1, r0, r3
 800128a:	460b      	mov	r3, r1
 800128c:	f04f 0000 	mov.w	r0, #0
 8001290:	f04f 0100 	mov.w	r1, #0
 8001294:	0459      	lsls	r1, r3, #17
 8001296:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 800129a:	0450      	lsls	r0, r2, #17
 800129c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80012a0:	eb12 0800 	adds.w	r8, r2, r0
 80012a4:	eb43 0901 	adc.w	r9, r3, r1
 80012a8:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60
	var2 = var2 + (((uint64_t)dig_P4)<<35);
 80012ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80012b0:	461a      	mov	r2, r3
 80012b2:	f04f 0300 	mov.w	r3, #0
 80012b6:	f04f 0000 	mov.w	r0, #0
 80012ba:	f04f 0100 	mov.w	r1, #0
 80012be:	00d1      	lsls	r1, r2, #3
 80012c0:	2000      	movs	r0, #0
 80012c2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80012c6:	1814      	adds	r4, r2, r0
 80012c8:	61bc      	str	r4, [r7, #24]
 80012ca:	414b      	adcs	r3, r1
 80012cc:	61fb      	str	r3, [r7, #28]
 80012ce:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80012d2:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	var1 = ((var1 * var1 * (uint64_t)dig_P3)>>8) + ((var1 * (uint64_t)dig_P2)<<12);
 80012d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80012d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012da:	fb03 f102 	mul.w	r1, r3, r2
 80012de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80012e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012e2:	fb03 f302 	mul.w	r3, r3, r2
 80012e6:	18ca      	adds	r2, r1, r3
 80012e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012ea:	fba3 4503 	umull	r4, r5, r3, r3
 80012ee:	1953      	adds	r3, r2, r5
 80012f0:	461d      	mov	r5, r3
 80012f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012f6:	461a      	mov	r2, r3
 80012f8:	f04f 0300 	mov.w	r3, #0
 80012fc:	fb02 f005 	mul.w	r0, r2, r5
 8001300:	fb04 f103 	mul.w	r1, r4, r3
 8001304:	4401      	add	r1, r0
 8001306:	fba4 2302 	umull	r2, r3, r4, r2
 800130a:	4419      	add	r1, r3
 800130c:	460b      	mov	r3, r1
 800130e:	f04f 0800 	mov.w	r8, #0
 8001312:	f04f 0900 	mov.w	r9, #0
 8001316:	ea4f 2812 	mov.w	r8, r2, lsr #8
 800131a:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 800131e:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8001322:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001326:	461a      	mov	r2, r3
 8001328:	f04f 0300 	mov.w	r3, #0
 800132c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800132e:	fb03 f001 	mul.w	r0, r3, r1
 8001332:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001334:	fb02 f101 	mul.w	r1, r2, r1
 8001338:	1844      	adds	r4, r0, r1
 800133a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800133c:	fba1 0102 	umull	r0, r1, r1, r2
 8001340:	1863      	adds	r3, r4, r1
 8001342:	4619      	mov	r1, r3
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	f04f 0300 	mov.w	r3, #0
 800134c:	030b      	lsls	r3, r1, #12
 800134e:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 8001352:	0302      	lsls	r2, r0, #12
 8001354:	eb18 0102 	adds.w	r1, r8, r2
 8001358:	6139      	str	r1, [r7, #16]
 800135a:	eb49 0303 	adc.w	r3, r9, r3
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001364:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	var1 = (((((uint64_t)1)<<47)+var1))*((uint64_t)dig_P1)>>33;
 8001368:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800136c:	1c11      	adds	r1, r2, #0
 800136e:	64b9      	str	r1, [r7, #72]	; 0x48
 8001370:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8001374:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001376:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800137a:	461a      	mov	r2, r3
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001384:	4629      	mov	r1, r5
 8001386:	fb02 f001 	mul.w	r0, r2, r1
 800138a:	4621      	mov	r1, r4
 800138c:	fb01 f103 	mul.w	r1, r1, r3
 8001390:	4401      	add	r1, r0
 8001392:	4620      	mov	r0, r4
 8001394:	fba0 2302 	umull	r2, r3, r0, r2
 8001398:	4419      	add	r1, r3
 800139a:	460b      	mov	r3, r1
 800139c:	f04f 0000 	mov.w	r0, #0
 80013a0:	f04f 0100 	mov.w	r1, #0
 80013a4:	0858      	lsrs	r0, r3, #1
 80013a6:	2100      	movs	r1, #0
 80013a8:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
	if(var1 == 0) {
 80013ac:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80013b0:	4313      	orrs	r3, r2
 80013b2:	d101      	bne.n	80013b8 <BMP280_CompensateP+0x270>
		return 0;	// avoid exception caused by division by zero
 80013b4:	2300      	movs	r3, #0
 80013b6:	e0db      	b.n	8001570 <BMP280_CompensateP+0x428>
	}
	p = 1048576-rawPress;
 80013b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013ba:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80013be:	461a      	mov	r2, r3
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	p = (((p<<31)-var2)*3125)/var1;
 80013c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013ca:	085b      	lsrs	r3, r3, #1
 80013cc:	647b      	str	r3, [r7, #68]	; 0x44
 80013ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013d0:	07db      	lsls	r3, r3, #31
 80013d2:	643b      	str	r3, [r7, #64]	; 0x40
 80013d4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80013d8:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80013dc:	4621      	mov	r1, r4
 80013de:	ebb1 0a02 	subs.w	sl, r1, r2
 80013e2:	4629      	mov	r1, r5
 80013e4:	eb61 0b03 	sbc.w	fp, r1, r3
 80013e8:	4652      	mov	r2, sl
 80013ea:	465b      	mov	r3, fp
 80013ec:	1891      	adds	r1, r2, r2
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	415b      	adcs	r3, r3
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013f8:	eb12 020a 	adds.w	r2, r2, sl
 80013fc:	eb43 030b 	adc.w	r3, r3, fp
 8001400:	f04f 0000 	mov.w	r0, #0
 8001404:	f04f 0100 	mov.w	r1, #0
 8001408:	0199      	lsls	r1, r3, #6
 800140a:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800140e:	0190      	lsls	r0, r2, #6
 8001410:	1812      	adds	r2, r2, r0
 8001412:	eb41 0303 	adc.w	r3, r1, r3
 8001416:	f04f 0000 	mov.w	r0, #0
 800141a:	f04f 0100 	mov.w	r1, #0
 800141e:	0099      	lsls	r1, r3, #2
 8001420:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001424:	0090      	lsls	r0, r2, #2
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	eb12 020a 	adds.w	r2, r2, sl
 800142e:	eb43 030b 	adc.w	r3, r3, fp
 8001432:	f04f 0000 	mov.w	r0, #0
 8001436:	f04f 0100 	mov.w	r1, #0
 800143a:	0099      	lsls	r1, r3, #2
 800143c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001440:	0090      	lsls	r0, r2, #2
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	eb12 010a 	adds.w	r1, r2, sl
 800144a:	63b9      	str	r1, [r7, #56]	; 0x38
 800144c:	eb43 030b 	adc.w	r3, r3, fp
 8001450:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001452:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001456:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800145a:	f7ff fbb5 	bl	8000bc8 <__aeabi_uldivmod>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	var1 = (((uint64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001468:	4618      	mov	r0, r3
 800146a:	f04f 0100 	mov.w	r1, #0
 800146e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	0b62      	lsrs	r2, r4, #13
 800147c:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001480:	0b6b      	lsrs	r3, r5, #13
 8001482:	fb02 f501 	mul.w	r5, r2, r1
 8001486:	fb00 f403 	mul.w	r4, r0, r3
 800148a:	442c      	add	r4, r5
 800148c:	fba0 0102 	umull	r0, r1, r0, r2
 8001490:	1863      	adds	r3, r4, r1
 8001492:	4619      	mov	r1, r3
 8001494:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	f04f 0300 	mov.w	r3, #0
 80014a0:	0b62      	lsrs	r2, r4, #13
 80014a2:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 80014a6:	0b6b      	lsrs	r3, r5, #13
 80014a8:	fb02 f501 	mul.w	r5, r2, r1
 80014ac:	fb00 f403 	mul.w	r4, r0, r3
 80014b0:	442c      	add	r4, r5
 80014b2:	fba0 0102 	umull	r0, r1, r0, r2
 80014b6:	1863      	adds	r3, r4, r1
 80014b8:	4619      	mov	r1, r3
 80014ba:	f04f 0200 	mov.w	r2, #0
 80014be:	f04f 0300 	mov.w	r3, #0
 80014c2:	0e42      	lsrs	r2, r0, #25
 80014c4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80014c8:	0e4b      	lsrs	r3, r1, #25
 80014ca:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	var2 = (((uint64_t)dig_P8) * p) >> 19;
 80014ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80014d0:	461a      	mov	r2, r3
 80014d2:	f04f 0300 	mov.w	r3, #0
 80014d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80014d8:	fb03 f001 	mul.w	r0, r3, r1
 80014dc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80014de:	fb02 f101 	mul.w	r1, r2, r1
 80014e2:	1844      	adds	r4, r0, r1
 80014e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80014e6:	fba1 0102 	umull	r0, r1, r1, r2
 80014ea:	1863      	adds	r3, r4, r1
 80014ec:	4619      	mov	r1, r3
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	f04f 0300 	mov.w	r3, #0
 80014f6:	0cc2      	lsrs	r2, r0, #19
 80014f8:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80014fc:	0ccb      	lsrs	r3, r1, #19
 80014fe:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	p = ((p + var1 + var2) >> 8) + (((uint64_t)dig_P7)<<4);
 8001502:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001506:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800150a:	1884      	adds	r4, r0, r2
 800150c:	633c      	str	r4, [r7, #48]	; 0x30
 800150e:	eb41 0303 	adc.w	r3, r1, r3
 8001512:	637b      	str	r3, [r7, #52]	; 0x34
 8001514:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001518:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800151c:	4621      	mov	r1, r4
 800151e:	1889      	adds	r1, r1, r2
 8001520:	62b9      	str	r1, [r7, #40]	; 0x28
 8001522:	4629      	mov	r1, r5
 8001524:	eb43 0101 	adc.w	r1, r3, r1
 8001528:	62f9      	str	r1, [r7, #44]	; 0x2c
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	f04f 0300 	mov.w	r3, #0
 8001532:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001536:	4621      	mov	r1, r4
 8001538:	0a0a      	lsrs	r2, r1, #8
 800153a:	4629      	mov	r1, r5
 800153c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001540:	4629      	mov	r1, r5
 8001542:	0a0b      	lsrs	r3, r1, #8
 8001544:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001546:	4608      	mov	r0, r1
 8001548:	f04f 0100 	mov.w	r1, #0
 800154c:	0f04      	lsrs	r4, r0, #28
 800154e:	627c      	str	r4, [r7, #36]	; 0x24
 8001550:	0101      	lsls	r1, r0, #4
 8001552:	6239      	str	r1, [r7, #32]
 8001554:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001558:	4621      	mov	r1, r4
 800155a:	1851      	adds	r1, r2, r1
 800155c:	6039      	str	r1, [r7, #0]
 800155e:	4629      	mov	r1, r5
 8001560:	eb43 0101 	adc.w	r1, r3, r1
 8001564:	6079      	str	r1, [r7, #4]
 8001566:	e9d7 3400 	ldrd	r3, r4, [r7]
 800156a:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	return (uint32_t)p;
 800156e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 8001570:	4618      	mov	r0, r3
 8001572:	3798      	adds	r7, #152	; 0x98
 8001574:	46bd      	mov	sp, r7
 8001576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800157c <Shell_Init>:
/*	@brief	Initialisation de notre shell
 * 	@param	Shell_Struct Structure contenant les paramètres de notre shell à initialiser
 * 	@param	UART_Handle UART utilisé par le shell
 *	@retval 0
 */
uint8_t Shell_Init(Shell_Struct* Shell, UART_HandleTypeDef* huart){
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
	Shell->huart = huart;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	601a      	str	r2, [r3, #0]

	// Démarrage de l'interruption sur l'UART
	HAL_UART_Receive_IT(Shell->huart, (uint8_t*)&charReceived, 1);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2201      	movs	r2, #1
 8001592:	4908      	ldr	r1, [pc, #32]	; (80015b4 <Shell_Init+0x38>)
 8001594:	4618      	mov	r0, r3
 8001596:	f003 fd6b 	bl	8005070 <HAL_UART_Receive_IT>

	// Transmission du prompt de notre shell
	HAL_UART_Transmit(Shell->huart, (uint8_t*)shellPrompt, sizeof(shellPrompt), HAL_MAX_DELAY);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6818      	ldr	r0, [r3, #0]
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
 80015a2:	2213      	movs	r2, #19
 80015a4:	4904      	ldr	r1, [pc, #16]	; (80015b8 <Shell_Init+0x3c>)
 80015a6:	f003 fccf 	bl	8004f48 <HAL_UART_Transmit>

	return 0;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000210 	.word	0x20000210
 80015b8:	08008ec8 	.word	0x08008ec8

080015bc <Shell_CharReceived>:
/*	@brief	Traitement du dernier caractère reçu
 * 	@param	Shell_Struct Structure contenant les paramètres de notre shell
 * 	@param	charReceived Caractère à traiter
 *	@retval 0
 */
uint8_t Shell_CharReceived(Shell_Struct* Shell, char charReceived){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	70fb      	strb	r3, [r7, #3]
	// Vérification fin de chaîne
	if(charReceived !='\r' && indexSh<32){
 80015c8:	78fb      	ldrb	r3, [r7, #3]
 80015ca:	2b0d      	cmp	r3, #13
 80015cc:	d018      	beq.n	8001600 <Shell_CharReceived+0x44>
 80015ce:	4b19      	ldr	r3, [pc, #100]	; (8001634 <Shell_CharReceived+0x78>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b1f      	cmp	r3, #31
 80015d4:	d814      	bhi.n	8001600 <Shell_CharReceived+0x44>
		// Transmission du caractère reçu
		HAL_UART_Transmit(Shell->huart, (uint8_t*)&charReceived, 1, HAL_MAX_DELAY);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6818      	ldr	r0, [r3, #0]
 80015da:	1cf9      	adds	r1, r7, #3
 80015dc:	f04f 33ff 	mov.w	r3, #4294967295
 80015e0:	2201      	movs	r2, #1
 80015e2:	f003 fcb1 	bl	8004f48 <HAL_UART_Transmit>
		// Ajout du caractère dans la chaîne
		charArray[indexSh] = charReceived;
 80015e6:	4b13      	ldr	r3, [pc, #76]	; (8001634 <Shell_CharReceived+0x78>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	78f9      	ldrb	r1, [r7, #3]
 80015ee:	4b12      	ldr	r3, [pc, #72]	; (8001638 <Shell_CharReceived+0x7c>)
 80015f0:	5499      	strb	r1, [r3, r2]
		indexSh++;
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <Shell_CharReceived+0x78>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	3301      	adds	r3, #1
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <Shell_CharReceived+0x78>)
 80015fc:	701a      	strb	r2, [r3, #0]
 80015fe:	e013      	b.n	8001628 <Shell_CharReceived+0x6c>
	}
	else{
		// Recherche et exécution de la commabde reçue
		Shell_FetchExecute(Shell, charArray);
 8001600:	490d      	ldr	r1, [pc, #52]	; (8001638 <Shell_CharReceived+0x7c>)
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 f81c 	bl	8001640 <Shell_FetchExecute>
		// Réinitialisation de la chaîne de caractères
		memset(charArray, 0, sizeof (charArray));
 8001608:	2220      	movs	r2, #32
 800160a:	2100      	movs	r1, #0
 800160c:	480a      	ldr	r0, [pc, #40]	; (8001638 <Shell_CharReceived+0x7c>)
 800160e:	f004 fd79 	bl	8006104 <memset>
		indexSh=0;
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <Shell_CharReceived+0x78>)
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
		// Transmission du prompt de notre shell
		HAL_UART_Transmit(Shell->huart, (uint8_t*)shellPrompt, sizeof(shellPrompt), HAL_MAX_DELAY);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6818      	ldr	r0, [r3, #0]
 800161c:	f04f 33ff 	mov.w	r3, #4294967295
 8001620:	2213      	movs	r2, #19
 8001622:	4906      	ldr	r1, [pc, #24]	; (800163c <Shell_CharReceived+0x80>)
 8001624:	f003 fc90 	bl	8004f48 <HAL_UART_Transmit>
	}

	return 0;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000234 	.word	0x20000234
 8001638:	20000214 	.word	0x20000214
 800163c:	08008ec8 	.word	0x08008ec8

08001640 <Shell_FetchExecute>:
/*	@brief	Recherche et exécution de la commande
 * 	@param	Shell_Struct Structure de configuration du shell
 * 	@param	cmd Chaîne de caractères contenant la commande de l'utilisateur
 *	@retval 0
 */
uint8_t Shell_FetchExecute(Shell_Struct* Shell, char* cmd){
 8001640:	b580      	push	{r7, lr}
 8001642:	b08c      	sub	sp, #48	; 0x30
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]

	// Recherche de la commande parmi celles configurées
	uint8_t cmdSelected = -1;
 800164a:	23ff      	movs	r3, #255	; 0xff
 800164c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for (uint8_t j = 0; ShellCmd[j]; j++){
 8001650:	2300      	movs	r3, #0
 8001652:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001656:	e014      	b.n	8001682 <Shell_FetchExecute+0x42>
		if(!strcmp(cmd, ShellCmd[j])) cmdSelected = j;
 8001658:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800165c:	4a58      	ldr	r2, [pc, #352]	; (80017c0 <Shell_FetchExecute+0x180>)
 800165e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001662:	4619      	mov	r1, r3
 8001664:	6838      	ldr	r0, [r7, #0]
 8001666:	f7fe fdb3 	bl	80001d0 <strcmp>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d103      	bne.n	8001678 <Shell_FetchExecute+0x38>
 8001670:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001674:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for (uint8_t j = 0; ShellCmd[j]; j++){
 8001678:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800167c:	3301      	adds	r3, #1
 800167e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001682:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001686:	4a4e      	ldr	r2, [pc, #312]	; (80017c0 <Shell_FetchExecute+0x180>)
 8001688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1e3      	bne.n	8001658 <Shell_FetchExecute+0x18>
	}

	char buffer[32] = ""; // Buffer utilisé par toutes les commandes ci-dessous
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
 80016a4:	615a      	str	r2, [r3, #20]
 80016a6:	619a      	str	r2, [r3, #24]
	switch(cmdSelected){
 80016a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d879      	bhi.n	80017a4 <Shell_FetchExecute+0x164>
 80016b0:	a201      	add	r2, pc, #4	; (adr r2, 80016b8 <Shell_FetchExecute+0x78>)
 80016b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b6:	bf00      	nop
 80016b8:	080016cd 	.word	0x080016cd
 80016bc:	080016fd 	.word	0x080016fd
 80016c0:	0800172d 	.word	0x0800172d
 80016c4:	0800174d 	.word	0x0800174d
 80016c8:	08001779 	.word	0x08001779
	case 0:
		// GET_T
		sprintf(buffer, "\r\nT=+%.2f_C\r\n",(float)BMP280_GetTemperature());
 80016cc:	f7ff fc2e 	bl	8000f2c <BMP280_GetTemperature>
 80016d0:	ee10 3a10 	vmov	r3, s0
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe ff47 	bl	8000568 <__aeabi_f2d>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	f107 000c 	add.w	r0, r7, #12
 80016e2:	4938      	ldr	r1, [pc, #224]	; (80017c4 <Shell_FetchExecute+0x184>)
 80016e4:	f005 f980 	bl	80069e8 <siprintf>
		HAL_UART_Transmit(Shell->huart,(uint8_t*)buffer, sizeof(buffer), HAL_MAX_DELAY);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6818      	ldr	r0, [r3, #0]
 80016ec:	f107 010c 	add.w	r1, r7, #12
 80016f0:	f04f 33ff 	mov.w	r3, #4294967295
 80016f4:	2220      	movs	r2, #32
 80016f6:	f003 fc27 	bl	8004f48 <HAL_UART_Transmit>
		break;
 80016fa:	e05c      	b.n	80017b6 <Shell_FetchExecute+0x176>

	case 1:
		// GET_P
		sprintf(buffer, "\r\nP=%ldPa\r\n",(uint32_t)BMP280_GetPressure());
 80016fc:	f7ff fcc4 	bl	8001088 <BMP280_GetPressure>
 8001700:	eef0 7a40 	vmov.f32	s15, s0
 8001704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	ee17 2a90 	vmov	r2, s15
 8001710:	492d      	ldr	r1, [pc, #180]	; (80017c8 <Shell_FetchExecute+0x188>)
 8001712:	4618      	mov	r0, r3
 8001714:	f005 f968 	bl	80069e8 <siprintf>
		HAL_UART_Transmit(Shell->huart,(uint8_t*)buffer, sizeof(buffer), HAL_MAX_DELAY);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6818      	ldr	r0, [r3, #0]
 800171c:	f107 010c 	add.w	r1, r7, #12
 8001720:	f04f 33ff 	mov.w	r3, #4294967295
 8001724:	2220      	movs	r2, #32
 8001726:	f003 fc0f 	bl	8004f48 <HAL_UART_Transmit>
		break;
 800172a:	e044      	b.n	80017b6 <Shell_FetchExecute+0x176>

	case 2:
		// SET_K
		sprintf(buffer, "\r\nSET_K=OK\r\n"); // Work in progress
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	4926      	ldr	r1, [pc, #152]	; (80017cc <Shell_FetchExecute+0x18c>)
 8001732:	4618      	mov	r0, r3
 8001734:	f005 f958 	bl	80069e8 <siprintf>
		HAL_UART_Transmit(Shell->huart,(uint8_t*)buffer, sizeof(buffer), HAL_MAX_DELAY);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6818      	ldr	r0, [r3, #0]
 800173c:	f107 010c 	add.w	r1, r7, #12
 8001740:	f04f 33ff 	mov.w	r3, #4294967295
 8001744:	2220      	movs	r2, #32
 8001746:	f003 fbff 	bl	8004f48 <HAL_UART_Transmit>
		break;
 800174a:	e034      	b.n	80017b6 <Shell_FetchExecute+0x176>

	case 3:
		// GET_K
		sprintf(buffer, "\r\nK=%.5f\r\n",Stepper.K);
 800174c:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <Shell_FetchExecute+0x190>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe ff09 	bl	8000568 <__aeabi_f2d>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	f107 000c 	add.w	r0, r7, #12
 800175e:	491d      	ldr	r1, [pc, #116]	; (80017d4 <Shell_FetchExecute+0x194>)
 8001760:	f005 f942 	bl	80069e8 <siprintf>
		HAL_UART_Transmit(Shell->huart,(uint8_t*)buffer, sizeof(buffer), HAL_MAX_DELAY);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6818      	ldr	r0, [r3, #0]
 8001768:	f107 010c 	add.w	r1, r7, #12
 800176c:	f04f 33ff 	mov.w	r3, #4294967295
 8001770:	2220      	movs	r2, #32
 8001772:	f003 fbe9 	bl	8004f48 <HAL_UART_Transmit>
		break;
 8001776:	e01e      	b.n	80017b6 <Shell_FetchExecute+0x176>

	case 4:
		// GET_A
		sprintf(buffer, "\r\nA=%.4f\r\n",Stepper.K);
 8001778:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <Shell_FetchExecute+0x190>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe fef3 	bl	8000568 <__aeabi_f2d>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	f107 000c 	add.w	r0, r7, #12
 800178a:	4913      	ldr	r1, [pc, #76]	; (80017d8 <Shell_FetchExecute+0x198>)
 800178c:	f005 f92c 	bl	80069e8 <siprintf>
		HAL_UART_Transmit(Shell->huart,(uint8_t*)buffer, sizeof(buffer), HAL_MAX_DELAY);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6818      	ldr	r0, [r3, #0]
 8001794:	f107 010c 	add.w	r1, r7, #12
 8001798:	f04f 33ff 	mov.w	r3, #4294967295
 800179c:	2220      	movs	r2, #32
 800179e:	f003 fbd3 	bl	8004f48 <HAL_UART_Transmit>
		break;
 80017a2:	e008      	b.n	80017b6 <Shell_FetchExecute+0x176>

	default:
		HAL_UART_Transmit(Shell->huart,(uint8_t*)cmdNotRecognized, sizeof(cmdNotRecognized), HAL_MAX_DELAY);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6818      	ldr	r0, [r3, #0]
 80017a8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ac:	2218      	movs	r2, #24
 80017ae:	490b      	ldr	r1, [pc, #44]	; (80017dc <Shell_FetchExecute+0x19c>)
 80017b0:	f003 fbca 	bl	8004f48 <HAL_UART_Transmit>
		break;
 80017b4:	bf00      	nop
	}

	return 0;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3730      	adds	r7, #48	; 0x30
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000000 	.word	0x20000000
 80017c4:	08008e84 	.word	0x08008e84
 80017c8:	08008e94 	.word	0x08008e94
 80017cc:	08008ea0 	.word	0x08008ea0
 80017d0:	20000268 	.word	0x20000268
 80017d4:	08008eb0 	.word	0x08008eb0
 80017d8:	08008ebc 	.word	0x08008ebc
 80017dc:	08008edc 	.word	0x08008edc

080017e0 <Stepper_Init>:

/*	@brief	Initialisation de la structure
 *  @param	Stepper_Struct Structure de configuration du stepper à initialiser
 *	@retval	0
 */
uint8_t Stepper_Init(Stepper_Struct* Stepper, CAN_HandleTypeDef* hcan) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
	Stepper->hcan = hcan;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	601a      	str	r2, [r3, #0]
	Stepper->K = 100;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a0a      	ldr	r2, [pc, #40]	; (800181c <Stepper_Init+0x3c>)
 80017f4:	605a      	str	r2, [r3, #4]
	Stepper->A = 0;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]

	// Activation du contrôleur CAN
	if(HAL_OK != HAL_CAN_Start(Stepper->hcan)){
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f000 fee3 	bl	80025ce <HAL_CAN_Start>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d000      	beq.n	8001810 <Stepper_Init+0x30>
		while(1);
 800180e:	e7fe      	b.n	800180e <Stepper_Init+0x2e>
	}
	return 0;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	42c80000 	.word	0x42c80000

08001820 <Stepper_SetAngle>:
 *  @param	Structure Stepper_Struct
 *  @param	angle Angle à réaliser
 *  @param	sign Sens de rotation
 *	@retval 0
 */
uint8_t Stepper_SetAngle(Stepper_Struct* Stepper, uint8_t angle, uint8_t sign) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	; 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	70fb      	strb	r3, [r7, #3]
 800182c:	4613      	mov	r3, r2
 800182e:	70bb      	strb	r3, [r7, #2]
	// Initialisation de la structure du header
	CAN_TxHeaderTypeDef CanHeader;
	CanHeader.StdId = 0x61;						// Angle (0x61)
 8001830:	2361      	movs	r3, #97	; 0x61
 8001832:	613b      	str	r3, [r7, #16]
	CanHeader.ExtId = 0;						// Pas utilisé ici
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
	CanHeader.IDE = CAN_ID_STD;					// Trame standard
 8001838:	2300      	movs	r3, #0
 800183a:	61bb      	str	r3, [r7, #24]
	CanHeader.RTR = CAN_RTR_DATA;				// Trame contenant des données
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
	CanHeader.DLC = 2;							// Trame contenant 2 octets
 8001840:	2302      	movs	r3, #2
 8001842:	623b      	str	r3, [r7, #32]
	CanHeader.TransmitGlobalTime = DISABLE;		// Pas de mesure du temps de réponse
 8001844:	2300      	movs	r3, #0
 8001846:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	// Données à transmettre
	uint8_t trameCAN[2] = {angle,sign};
 800184a:	78fb      	ldrb	r3, [r7, #3]
 800184c:	733b      	strb	r3, [r7, #12]
 800184e:	78bb      	ldrb	r3, [r7, #2]
 8001850:	737b      	strb	r3, [r7, #13]

	// Envoi de le trame
	if(HAL_OK != HAL_CAN_AddTxMessage(&hcan1, &CanHeader, trameCAN, TxMailbox)){
 8001852:	f107 020c 	add.w	r2, r7, #12
 8001856:	f107 0110 	add.w	r1, r7, #16
 800185a:	4b07      	ldr	r3, [pc, #28]	; (8001878 <Stepper_SetAngle+0x58>)
 800185c:	4807      	ldr	r0, [pc, #28]	; (800187c <Stepper_SetAngle+0x5c>)
 800185e:	f000 fefa 	bl	8002656 <HAL_CAN_AddTxMessage>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <Stepper_SetAngle+0x4c>
		return 1;
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <Stepper_SetAngle+0x4e>
	}

	return 0;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3728      	adds	r7, #40	; 0x28
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000248 	.word	0x20000248
 800187c:	20000274 	.word	0x20000274

08001880 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001884:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <MX_CAN1_Init+0x64>)
 8001886:	4a18      	ldr	r2, [pc, #96]	; (80018e8 <MX_CAN1_Init+0x68>)
 8001888:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 32;
 800188a:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <MX_CAN1_Init+0x64>)
 800188c:	2220      	movs	r2, #32
 800188e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001890:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <MX_CAN1_Init+0x64>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001896:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <MX_CAN1_Init+0x64>)
 8001898:	2200      	movs	r2, #0
 800189a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <MX_CAN1_Init+0x64>)
 800189e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018a2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80018a4:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <MX_CAN1_Init+0x64>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <MX_CAN1_Init+0x64>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <MX_CAN1_Init+0x64>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <MX_CAN1_Init+0x64>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <MX_CAN1_Init+0x64>)
 80018be:	2200      	movs	r2, #0
 80018c0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80018c2:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <MX_CAN1_Init+0x64>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <MX_CAN1_Init+0x64>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <MX_CAN1_Init+0x64>)
 80018d0:	f000 fd82 	bl	80023d8 <HAL_CAN_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80018da:	f000 fa2f 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000274 	.word	0x20000274
 80018e8:	40006400 	.word	0x40006400

080018ec <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a17      	ldr	r2, [pc, #92]	; (8001968 <HAL_CAN_MspInit+0x7c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d128      	bne.n	8001960 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800190e:	4b17      	ldr	r3, [pc, #92]	; (800196c <HAL_CAN_MspInit+0x80>)
 8001910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001912:	4a16      	ldr	r2, [pc, #88]	; (800196c <HAL_CAN_MspInit+0x80>)
 8001914:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001918:	6593      	str	r3, [r2, #88]	; 0x58
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <HAL_CAN_MspInit+0x80>)
 800191c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <HAL_CAN_MspInit+0x80>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	4a10      	ldr	r2, [pc, #64]	; (800196c <HAL_CAN_MspInit+0x80>)
 800192c:	f043 0302 	orr.w	r3, r3, #2
 8001930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <HAL_CAN_MspInit+0x80>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800193e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001944:	2302      	movs	r3, #2
 8001946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194c:	2303      	movs	r3, #3
 800194e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001950:	2309      	movs	r3, #9
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	4619      	mov	r1, r3
 800195a:	4805      	ldr	r0, [pc, #20]	; (8001970 <HAL_CAN_MspInit+0x84>)
 800195c:	f001 f8e6 	bl	8002b2c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001960:	bf00      	nop
 8001962:	3728      	adds	r7, #40	; 0x28
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40006400 	.word	0x40006400
 800196c:	40021000 	.word	0x40021000
 8001970:	48000400 	.word	0x48000400

08001974 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	; 0x28
 8001978:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	60da      	str	r2, [r3, #12]
 8001988:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800198a:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <MX_GPIO_Init+0xc4>)
 800198c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198e:	4a2a      	ldr	r2, [pc, #168]	; (8001a38 <MX_GPIO_Init+0xc4>)
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001996:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <MX_GPIO_Init+0xc4>)
 8001998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019a2:	4b25      	ldr	r3, [pc, #148]	; (8001a38 <MX_GPIO_Init+0xc4>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a6:	4a24      	ldr	r2, [pc, #144]	; (8001a38 <MX_GPIO_Init+0xc4>)
 80019a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ae:	4b22      	ldr	r3, [pc, #136]	; (8001a38 <MX_GPIO_Init+0xc4>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ba:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <MX_GPIO_Init+0xc4>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019be:	4a1e      	ldr	r2, [pc, #120]	; (8001a38 <MX_GPIO_Init+0xc4>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c6:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <MX_GPIO_Init+0xc4>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d2:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <MX_GPIO_Init+0xc4>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d6:	4a18      	ldr	r2, [pc, #96]	; (8001a38 <MX_GPIO_Init+0xc4>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019de:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <MX_GPIO_Init+0xc4>)
 80019e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2120      	movs	r1, #32
 80019ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f2:	f001 fa45 	bl	8002e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <MX_GPIO_Init+0xc8>)
 80019fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	4619      	mov	r1, r3
 8001a0a:	480d      	ldr	r0, [pc, #52]	; (8001a40 <MX_GPIO_Init+0xcc>)
 8001a0c:	f001 f88e 	bl	8002b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a10:	2320      	movs	r3, #32
 8001a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a14:	2301      	movs	r3, #1
 8001a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4619      	mov	r1, r3
 8001a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a2a:	f001 f87f 	bl	8002b2c <HAL_GPIO_Init>

}
 8001a2e:	bf00      	nop
 8001a30:	3728      	adds	r7, #40	; 0x28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	10210000 	.word	0x10210000
 8001a40:	48000800 	.word	0x48000800

08001a44 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a48:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <MX_I2C3_Init+0x74>)
 8001a4a:	4a1c      	ldr	r2, [pc, #112]	; (8001abc <MX_I2C3_Init+0x78>)
 8001a4c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <MX_I2C3_Init+0x74>)
 8001a50:	4a1b      	ldr	r2, [pc, #108]	; (8001ac0 <MX_I2C3_Init+0x7c>)
 8001a52:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001a54:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <MX_I2C3_Init+0x74>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a5a:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <MX_I2C3_Init+0x74>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a60:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <MX_I2C3_Init+0x74>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001a66:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <MX_I2C3_Init+0x74>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <MX_I2C3_Init+0x74>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <MX_I2C3_Init+0x74>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <MX_I2C3_Init+0x74>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a7e:	480e      	ldr	r0, [pc, #56]	; (8001ab8 <MX_I2C3_Init+0x74>)
 8001a80:	f001 fa16 	bl	8002eb0 <HAL_I2C_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001a8a:	f000 f957 	bl	8001d3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4809      	ldr	r0, [pc, #36]	; (8001ab8 <MX_I2C3_Init+0x74>)
 8001a92:	f001 fe67 	bl	8003764 <HAL_I2CEx_ConfigAnalogFilter>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001a9c:	f000 f94e 	bl	8001d3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_I2C3_Init+0x74>)
 8001aa4:	f001 fea9 	bl	80037fa <HAL_I2CEx_ConfigDigitalFilter>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001aae:	f000 f945 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	2000029c 	.word	0x2000029c
 8001abc:	40005c00 	.word	0x40005c00
 8001ac0:	10909cec 	.word	0x10909cec

08001ac4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b0ac      	sub	sp, #176	; 0xb0
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	2288      	movs	r2, #136	; 0x88
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f004 fb0d 	bl	8006104 <memset>
  if(i2cHandle->Instance==I2C3)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a21      	ldr	r2, [pc, #132]	; (8001b74 <HAL_I2C_MspInit+0xb0>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d13b      	bne.n	8001b6c <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001af8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001afa:	2300      	movs	r3, #0
 8001afc:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	4618      	mov	r0, r3
 8001b04:	f002 fd16 	bl	8004534 <HAL_RCCEx_PeriphCLKConfig>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001b0e:	f000 f915 	bl	8001d3c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b12:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_I2C_MspInit+0xb4>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b16:	4a18      	ldr	r2, [pc, #96]	; (8001b78 <HAL_I2C_MspInit+0xb4>)
 8001b18:	f043 0304 	orr.w	r3, r3, #4
 8001b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1e:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <HAL_I2C_MspInit+0xb4>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b30:	2312      	movs	r3, #18
 8001b32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b42:	2304      	movs	r3, #4
 8001b44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	480b      	ldr	r0, [pc, #44]	; (8001b7c <HAL_I2C_MspInit+0xb8>)
 8001b50:	f000 ffec 	bl	8002b2c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b54:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <HAL_I2C_MspInit+0xb4>)
 8001b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b58:	4a07      	ldr	r2, [pc, #28]	; (8001b78 <HAL_I2C_MspInit+0xb4>)
 8001b5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <HAL_I2C_MspInit+0xb4>)
 8001b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	37b0      	adds	r7, #176	; 0xb0
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40005c00 	.word	0x40005c00
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	48000800 	.word	0x48000800

08001b80 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001b86:	f000 fb87 	bl	8002298 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001b8a:	f000 f849 	bl	8001c20 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001b8e:	f7ff fef1 	bl	8001974 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001b92:	f000 fa45 	bl	8002020 <MX_USART2_UART_Init>
	MX_CAN1_Init();
 8001b96:	f7ff fe73 	bl	8001880 <MX_CAN1_Init>
	MX_I2C3_Init();
 8001b9a:	f7ff ff53 	bl	8001a44 <MX_I2C3_Init>
	MX_USART3_UART_Init();
 8001b9e:	f000 fa6f 	bl	8002080 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	// Initialisations de nos bibliothèques
	Shell_Init(&Shell, &huart3);
 8001ba2:	491b      	ldr	r1, [pc, #108]	; (8001c10 <main+0x90>)
 8001ba4:	481b      	ldr	r0, [pc, #108]	; (8001c14 <main+0x94>)
 8001ba6:	f7ff fce9 	bl	800157c <Shell_Init>
	Stepper_Init(&Stepper, &hcan1);
 8001baa:	491b      	ldr	r1, [pc, #108]	; (8001c18 <main+0x98>)
 8001bac:	481b      	ldr	r0, [pc, #108]	; (8001c1c <main+0x9c>)
 8001bae:	f7ff fe17 	bl	80017e0 <Stepper_Init>
	// Identification du BMP280
	//uint8_t bmp280_id = BMP280_GetID();
	//printf("BMP280\tID\t= 0x%x\r\n",bmp280_id);

	// Configuration du BMP280
	uint8_t bmp280_config = BMP280_SetConfig();
 8001bb2:	f7ff f985 	bl	8000ec0 <BMP280_SetConfig>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	74fb      	strb	r3, [r7, #19]

	// Récupération de l'étalonnage, de la température et de la pression
	//uint8_t bmp280_calib[26] = {0};
	//BMP280_GetCalibration(bmp280_calib);

	uint8_t angle = 0, sign = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	74bb      	strb	r3, [r7, #18]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	747b      	strb	r3, [r7, #17]
	float previousTemp = 0;
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
		sign = (sign+1)%2;
		Stepper_SetAngle(&Stepper, 90, sign);
		 */

		// Pilotage du moteur en fonction de la température
		float temp = BMP280_GetTemperature();
 8001bc8:	f7ff f9b0 	bl	8000f2c <BMP280_GetTemperature>
 8001bcc:	ed87 0a03 	vstr	s0, [r7, #12]
		angle = (temp - previousTemp) * Stepper.K; 	// Multiplication par le coefficient K
 8001bd0:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bd4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <main+0x9c>)
 8001bde:	edd3 7a01 	vldr	s15, [r3, #4]
 8001be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001be6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bea:	edc7 7a01 	vstr	s15, [r7, #4]
 8001bee:	793b      	ldrb	r3, [r7, #4]
 8001bf0:	74bb      	strb	r3, [r7, #18]
		previousTemp = temp;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	617b      	str	r3, [r7, #20]

		if(angle >= 0) 	sign = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	747b      	strb	r3, [r7, #17]
		else{
			sign = 1;
			angle*=-1;
		}
		Stepper_SetAngle(&Stepper, angle, sign);
 8001bfa:	7c7a      	ldrb	r2, [r7, #17]
 8001bfc:	7cbb      	ldrb	r3, [r7, #18]
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4806      	ldr	r0, [pc, #24]	; (8001c1c <main+0x9c>)
 8001c02:	f7ff fe0d 	bl	8001820 <Stepper_SetAngle>

		HAL_Delay(1000);
 8001c06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c0a:	f000 fbc1 	bl	8002390 <HAL_Delay>
	{
 8001c0e:	e7db      	b.n	8001bc8 <main+0x48>
 8001c10:	200002e8 	.word	0x200002e8
 8001c14:	20000244 	.word	0x20000244
 8001c18:	20000274 	.word	0x20000274
 8001c1c:	20000268 	.word	0x20000268

08001c20 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b096      	sub	sp, #88	; 0x58
 8001c24:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c26:	f107 0314 	add.w	r3, r7, #20
 8001c2a:	2244      	movs	r2, #68	; 0x44
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f004 fa68 	bl	8006104 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c34:	463b      	mov	r3, r7
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	60da      	str	r2, [r3, #12]
 8001c40:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c42:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c46:	f001 fe33 	bl	80038b0 <HAL_PWREx_ControlVoltageScaling>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8001c50:	f000 f874 	bl	8001d3c <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c54:	2302      	movs	r3, #2
 8001c56:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c5c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c5e:	2310      	movs	r3, #16
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c62:	2302      	movs	r3, #2
 8001c64:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c66:	2302      	movs	r3, #2
 8001c68:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8001c6e:	230a      	movs	r3, #10
 8001c70:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001c72:	2307      	movs	r3, #7
 8001c74:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c76:	2302      	movs	r3, #2
 8001c78:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c7e:	f107 0314 	add.w	r3, r7, #20
 8001c82:	4618      	mov	r0, r3
 8001c84:	f001 fe6a 	bl	800395c <HAL_RCC_OscConfig>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <SystemClock_Config+0x72>
	{
		Error_Handler();
 8001c8e:	f000 f855 	bl	8001d3c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c92:	230f      	movs	r3, #15
 8001c94:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c96:	2303      	movs	r3, #3
 8001c98:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ca6:	463b      	mov	r3, r7
 8001ca8:	2104      	movs	r1, #4
 8001caa:	4618      	mov	r0, r3
 8001cac:	f002 fa3c 	bl	8004128 <HAL_RCC_ClockConfig>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8001cb6:	f000 f841 	bl	8001d3c <Error_Handler>
	}
}
 8001cba:	bf00      	nop
 8001cbc:	3758      	adds	r7, #88	; 0x58
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART2){
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <HAL_UART_RxCpltCallback+0x60>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d10a      	bne.n	8001cec <HAL_UART_RxCpltCallback+0x28>
		Shell_CharReceived(&Shell, charReceived);
 8001cd6:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <HAL_UART_RxCpltCallback+0x64>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4813      	ldr	r0, [pc, #76]	; (8001d2c <HAL_UART_RxCpltCallback+0x68>)
 8001cde:	f7ff fc6d 	bl	80015bc <Shell_CharReceived>
		HAL_UART_Receive_IT(&huart2, (uint8_t*)&charReceived, 1);
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4910      	ldr	r1, [pc, #64]	; (8001d28 <HAL_UART_RxCpltCallback+0x64>)
 8001ce6:	4812      	ldr	r0, [pc, #72]	; (8001d30 <HAL_UART_RxCpltCallback+0x6c>)
 8001ce8:	f003 f9c2 	bl	8005070 <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART3){
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a10      	ldr	r2, [pc, #64]	; (8001d34 <HAL_UART_RxCpltCallback+0x70>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d111      	bne.n	8001d1a <HAL_UART_RxCpltCallback+0x56>
		Shell_CharReceived(&Shell, charReceived);
 8001cf6:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <HAL_UART_RxCpltCallback+0x64>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	480b      	ldr	r0, [pc, #44]	; (8001d2c <HAL_UART_RxCpltCallback+0x68>)
 8001cfe:	f7ff fc5d 	bl	80015bc <Shell_CharReceived>
		HAL_UART_Receive_IT(&huart3, (uint8_t*)&charReceived, 1);
 8001d02:	2201      	movs	r2, #1
 8001d04:	4908      	ldr	r1, [pc, #32]	; (8001d28 <HAL_UART_RxCpltCallback+0x64>)
 8001d06:	480c      	ldr	r0, [pc, #48]	; (8001d38 <HAL_UART_RxCpltCallback+0x74>)
 8001d08:	f003 f9b2 	bl	8005070 <HAL_UART_Receive_IT>

		// Visualisation de la trame provenant de la Raspberry
		HAL_UART_Transmit(&huart2, (uint8_t*)&charReceived, 1, HAL_MAX_DELAY);
 8001d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d10:	2201      	movs	r2, #1
 8001d12:	4905      	ldr	r1, [pc, #20]	; (8001d28 <HAL_UART_RxCpltCallback+0x64>)
 8001d14:	4806      	ldr	r0, [pc, #24]	; (8001d30 <HAL_UART_RxCpltCallback+0x6c>)
 8001d16:	f003 f917 	bl	8004f48 <HAL_UART_Transmit>
	}
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40004400 	.word	0x40004400
 8001d28:	20000210 	.word	0x20000210
 8001d2c:	20000244 	.word	0x20000244
 8001d30:	2000036c 	.word	0x2000036c
 8001d34:	40004800 	.word	0x40004800
 8001d38:	200002e8 	.word	0x200002e8

08001d3c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d40:	b672      	cpsid	i
}
 8001d42:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001d44:	e7fe      	b.n	8001d44 <Error_Handler+0x8>
	...

08001d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <HAL_MspInit+0x44>)
 8001d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d52:	4a0e      	ldr	r2, [pc, #56]	; (8001d8c <HAL_MspInit+0x44>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6613      	str	r3, [r2, #96]	; 0x60
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <HAL_MspInit+0x44>)
 8001d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <HAL_MspInit+0x44>)
 8001d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6a:	4a08      	ldr	r2, [pc, #32]	; (8001d8c <HAL_MspInit+0x44>)
 8001d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d70:	6593      	str	r3, [r2, #88]	; 0x58
 8001d72:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <HAL_MspInit+0x44>)
 8001d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40021000 	.word	0x40021000

08001d90 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001d98:	1d39      	adds	r1, r7, #4
 8001d9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d9e:	2201      	movs	r2, #1
 8001da0:	4803      	ldr	r0, [pc, #12]	; (8001db0 <__io_putchar+0x20>)
 8001da2:	f003 f8d1 	bl	8004f48 <HAL_UART_Transmit>

  return ch;
 8001da6:	687b      	ldr	r3, [r7, #4]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	2000036c 	.word	0x2000036c

08001db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001db8:	e7fe      	b.n	8001db8 <NMI_Handler+0x4>

08001dba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dbe:	e7fe      	b.n	8001dbe <HardFault_Handler+0x4>

08001dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <MemManage_Handler+0x4>

08001dc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dca:	e7fe      	b.n	8001dca <BusFault_Handler+0x4>

08001dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <UsageFault_Handler+0x4>

08001dd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e00:	f000 faa6 	bl	8002350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e0c:	4802      	ldr	r0, [pc, #8]	; (8001e18 <USART2_IRQHandler+0x10>)
 8001e0e:	f003 f973 	bl	80050f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	2000036c 	.word	0x2000036c

08001e1c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <USART3_IRQHandler+0x10>)
 8001e22:	f003 f969 	bl	80050f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200002e8 	.word	0x200002e8

08001e30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
	return 1;
 8001e34:	2301      	movs	r3, #1
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <_kill>:

int _kill(int pid, int sig)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e4a:	f004 f931 	bl	80060b0 <__errno>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2216      	movs	r2, #22
 8001e52:	601a      	str	r2, [r3, #0]
	return -1;
 8001e54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <_exit>:

void _exit (int status)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e68:	f04f 31ff 	mov.w	r1, #4294967295
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff ffe7 	bl	8001e40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e72:	e7fe      	b.n	8001e72 <_exit+0x12>

08001e74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	e00a      	b.n	8001e9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e86:	f3af 8000 	nop.w
 8001e8a:	4601      	mov	r1, r0
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	60ba      	str	r2, [r7, #8]
 8001e92:	b2ca      	uxtb	r2, r1
 8001e94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	dbf0      	blt.n	8001e86 <_read+0x12>
	}

return len;
 8001ea4:	687b      	ldr	r3, [r7, #4]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b086      	sub	sp, #24
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	60f8      	str	r0, [r7, #12]
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
 8001ebe:	e009      	b.n	8001ed4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	60ba      	str	r2, [r7, #8]
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff61 	bl	8001d90 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	697a      	ldr	r2, [r7, #20]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	dbf1      	blt.n	8001ec0 <_write+0x12>
	}
	return len;
 8001edc:	687b      	ldr	r3, [r7, #4]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <_close>:

int _close(int file)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
	return -1;
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f0e:	605a      	str	r2, [r3, #4]
	return 0;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <_isatty>:

int _isatty(int file)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
	return 1;
 8001f26:	2301      	movs	r3, #1
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
	return 0;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
	...

08001f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f58:	4a14      	ldr	r2, [pc, #80]	; (8001fac <_sbrk+0x5c>)
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <_sbrk+0x60>)
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f64:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <_sbrk+0x64>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d102      	bne.n	8001f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f6c:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <_sbrk+0x64>)
 8001f6e:	4a12      	ldr	r2, [pc, #72]	; (8001fb8 <_sbrk+0x68>)
 8001f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f72:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <_sbrk+0x64>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d207      	bcs.n	8001f90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f80:	f004 f896 	bl	80060b0 <__errno>
 8001f84:	4603      	mov	r3, r0
 8001f86:	220c      	movs	r2, #12
 8001f88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8e:	e009      	b.n	8001fa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f90:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <_sbrk+0x64>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f96:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <_sbrk+0x64>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	4a05      	ldr	r2, [pc, #20]	; (8001fb4 <_sbrk+0x64>)
 8001fa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20018000 	.word	0x20018000
 8001fb0:	00000400 	.word	0x00000400
 8001fb4:	20000238 	.word	0x20000238
 8001fb8:	20000408 	.word	0x20000408

08001fbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fc0:	4b15      	ldr	r3, [pc, #84]	; (8002018 <SystemInit+0x5c>)
 8001fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc6:	4a14      	ldr	r2, [pc, #80]	; (8002018 <SystemInit+0x5c>)
 8001fc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001fd0:	4b12      	ldr	r3, [pc, #72]	; (800201c <SystemInit+0x60>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a11      	ldr	r2, [pc, #68]	; (800201c <SystemInit+0x60>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	; (800201c <SystemInit+0x60>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <SystemInit+0x60>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a0d      	ldr	r2, [pc, #52]	; (800201c <SystemInit+0x60>)
 8001fe8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001fec:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001ff0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	; (800201c <SystemInit+0x60>)
 8001ff4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ff8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <SystemInit+0x60>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a07      	ldr	r2, [pc, #28]	; (800201c <SystemInit+0x60>)
 8002000:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002004:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002006:	4b05      	ldr	r3, [pc, #20]	; (800201c <SystemInit+0x60>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000ed00 	.word	0xe000ed00
 800201c:	40021000 	.word	0x40021000

08002020 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002024:	4b14      	ldr	r3, [pc, #80]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002026:	4a15      	ldr	r2, [pc, #84]	; (800207c <MX_USART2_UART_Init+0x5c>)
 8002028:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800202a:	4b13      	ldr	r3, [pc, #76]	; (8002078 <MX_USART2_UART_Init+0x58>)
 800202c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002030:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002032:	4b11      	ldr	r3, [pc, #68]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <MX_USART2_UART_Init+0x58>)
 800203a:	2200      	movs	r2, #0
 800203c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800203e:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002040:	2200      	movs	r2, #0
 8002042:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002046:	220c      	movs	r2, #12
 8002048:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <MX_USART2_UART_Init+0x58>)
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002052:	2200      	movs	r2, #0
 8002054:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002056:	4b08      	ldr	r3, [pc, #32]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002058:	2200      	movs	r2, #0
 800205a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <MX_USART2_UART_Init+0x58>)
 800205e:	2200      	movs	r2, #0
 8002060:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002062:	4805      	ldr	r0, [pc, #20]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002064:	f002 ff22 	bl	8004eac <HAL_UART_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800206e:	f7ff fe65 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	2000036c 	.word	0x2000036c
 800207c:	40004400 	.word	0x40004400

08002080 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002084:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 8002086:	4a15      	ldr	r2, [pc, #84]	; (80020dc <MX_USART3_UART_Init+0x5c>)
 8002088:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800208a:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 800208c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002090:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002098:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 800209a:	2200      	movs	r2, #0
 800209c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020a6:	220c      	movs	r2, #12
 80020a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020aa:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b0:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020b6:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020be:	2200      	movs	r2, #0
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020c2:	4805      	ldr	r0, [pc, #20]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020c4:	f002 fef2 	bl	8004eac <HAL_UART_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80020ce:	f7ff fe35 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	200002e8 	.word	0x200002e8
 80020dc:	40004800 	.word	0x40004800

080020e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b0ae      	sub	sp, #184	; 0xb8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020f8:	f107 031c 	add.w	r3, r7, #28
 80020fc:	2288      	movs	r2, #136	; 0x88
 80020fe:	2100      	movs	r1, #0
 8002100:	4618      	mov	r0, r3
 8002102:	f003 ffff 	bl	8006104 <memset>
  if(uartHandle->Instance==USART2)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a4a      	ldr	r2, [pc, #296]	; (8002234 <HAL_UART_MspInit+0x154>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d144      	bne.n	800219a <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002110:	2302      	movs	r3, #2
 8002112:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002114:	2300      	movs	r3, #0
 8002116:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002118:	f107 031c 	add.w	r3, r7, #28
 800211c:	4618      	mov	r0, r3
 800211e:	f002 fa09 	bl	8004534 <HAL_RCCEx_PeriphCLKConfig>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002128:	f7ff fe08 	bl	8001d3c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800212c:	4b42      	ldr	r3, [pc, #264]	; (8002238 <HAL_UART_MspInit+0x158>)
 800212e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002130:	4a41      	ldr	r2, [pc, #260]	; (8002238 <HAL_UART_MspInit+0x158>)
 8002132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002136:	6593      	str	r3, [r2, #88]	; 0x58
 8002138:	4b3f      	ldr	r3, [pc, #252]	; (8002238 <HAL_UART_MspInit+0x158>)
 800213a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002140:	61bb      	str	r3, [r7, #24]
 8002142:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002144:	4b3c      	ldr	r3, [pc, #240]	; (8002238 <HAL_UART_MspInit+0x158>)
 8002146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002148:	4a3b      	ldr	r2, [pc, #236]	; (8002238 <HAL_UART_MspInit+0x158>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002150:	4b39      	ldr	r3, [pc, #228]	; (8002238 <HAL_UART_MspInit+0x158>)
 8002152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800215c:	230c      	movs	r3, #12
 800215e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2302      	movs	r3, #2
 8002164:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216e:	2303      	movs	r3, #3
 8002170:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002174:	2307      	movs	r3, #7
 8002176:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800217e:	4619      	mov	r1, r3
 8002180:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002184:	f000 fcd2 	bl	8002b2c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002188:	2200      	movs	r2, #0
 800218a:	2100      	movs	r1, #0
 800218c:	2026      	movs	r0, #38	; 0x26
 800218e:	f000 fc18 	bl	80029c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002192:	2026      	movs	r0, #38	; 0x26
 8002194:	f000 fc31 	bl	80029fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002198:	e048      	b.n	800222c <HAL_UART_MspInit+0x14c>
  else if(uartHandle->Instance==USART3)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a27      	ldr	r2, [pc, #156]	; (800223c <HAL_UART_MspInit+0x15c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d143      	bne.n	800222c <HAL_UART_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80021a4:	2304      	movs	r3, #4
 80021a6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80021a8:	2300      	movs	r3, #0
 80021aa:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021ac:	f107 031c 	add.w	r3, r7, #28
 80021b0:	4618      	mov	r0, r3
 80021b2:	f002 f9bf 	bl	8004534 <HAL_RCCEx_PeriphCLKConfig>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80021bc:	f7ff fdbe 	bl	8001d3c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80021c0:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <HAL_UART_MspInit+0x158>)
 80021c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c4:	4a1c      	ldr	r2, [pc, #112]	; (8002238 <HAL_UART_MspInit+0x158>)
 80021c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ca:	6593      	str	r3, [r2, #88]	; 0x58
 80021cc:	4b1a      	ldr	r3, [pc, #104]	; (8002238 <HAL_UART_MspInit+0x158>)
 80021ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d8:	4b17      	ldr	r3, [pc, #92]	; (8002238 <HAL_UART_MspInit+0x158>)
 80021da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021dc:	4a16      	ldr	r2, [pc, #88]	; (8002238 <HAL_UART_MspInit+0x158>)
 80021de:	f043 0304 	orr.w	r3, r3, #4
 80021e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021e4:	4b14      	ldr	r3, [pc, #80]	; (8002238 <HAL_UART_MspInit+0x158>)
 80021e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002204:	2303      	movs	r3, #3
 8002206:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800220a:	2307      	movs	r3, #7
 800220c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002210:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002214:	4619      	mov	r1, r3
 8002216:	480a      	ldr	r0, [pc, #40]	; (8002240 <HAL_UART_MspInit+0x160>)
 8002218:	f000 fc88 	bl	8002b2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800221c:	2200      	movs	r2, #0
 800221e:	2100      	movs	r1, #0
 8002220:	2027      	movs	r0, #39	; 0x27
 8002222:	f000 fbce 	bl	80029c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002226:	2027      	movs	r0, #39	; 0x27
 8002228:	f000 fbe7 	bl	80029fa <HAL_NVIC_EnableIRQ>
}
 800222c:	bf00      	nop
 800222e:	37b8      	adds	r7, #184	; 0xb8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40004400 	.word	0x40004400
 8002238:	40021000 	.word	0x40021000
 800223c:	40004800 	.word	0x40004800
 8002240:	48000800 	.word	0x48000800

08002244 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002244:	f8df d034 	ldr.w	sp, [pc, #52]	; 800227c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002248:	f7ff feb8 	bl	8001fbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800224c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800224e:	e003      	b.n	8002258 <LoopCopyDataInit>

08002250 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002252:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002254:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002256:	3104      	adds	r1, #4

08002258 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002258:	480a      	ldr	r0, [pc, #40]	; (8002284 <LoopForever+0xa>)
	ldr	r3, =_edata
 800225a:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <LoopForever+0xe>)
	adds	r2, r0, r1
 800225c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800225e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002260:	d3f6      	bcc.n	8002250 <CopyDataInit>
	ldr	r2, =_sbss
 8002262:	4a0a      	ldr	r2, [pc, #40]	; (800228c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002264:	e002      	b.n	800226c <LoopFillZerobss>

08002266 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002266:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002268:	f842 3b04 	str.w	r3, [r2], #4

0800226c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800226c:	4b08      	ldr	r3, [pc, #32]	; (8002290 <LoopForever+0x16>)
	cmp	r2, r3
 800226e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002270:	d3f9      	bcc.n	8002266 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002272:	f003 ff23 	bl	80060bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002276:	f7ff fc83 	bl	8001b80 <main>

0800227a <LoopForever>:

LoopForever:
    b LoopForever
 800227a:	e7fe      	b.n	800227a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800227c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002280:	0800932c 	.word	0x0800932c
	ldr	r0, =_sdata
 8002284:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002288:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 800228c:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 8002290:	20000404 	.word	0x20000404

08002294 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002294:	e7fe      	b.n	8002294 <ADC1_2_IRQHandler>
	...

08002298 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a2:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <HAL_Init+0x3c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a0b      	ldr	r2, [pc, #44]	; (80022d4 <HAL_Init+0x3c>)
 80022a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ae:	2003      	movs	r0, #3
 80022b0:	f000 fb7c 	bl	80029ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022b4:	2000      	movs	r0, #0
 80022b6:	f000 f80f 	bl	80022d8 <HAL_InitTick>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d002      	beq.n	80022c6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	71fb      	strb	r3, [r7, #7]
 80022c4:	e001      	b.n	80022ca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022c6:	f7ff fd3f 	bl	8001d48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022ca:	79fb      	ldrb	r3, [r7, #7]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40022000 	.word	0x40022000

080022d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022e0:	2300      	movs	r3, #0
 80022e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80022e4:	4b17      	ldr	r3, [pc, #92]	; (8002344 <HAL_InitTick+0x6c>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d023      	beq.n	8002334 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80022ec:	4b16      	ldr	r3, [pc, #88]	; (8002348 <HAL_InitTick+0x70>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4b14      	ldr	r3, [pc, #80]	; (8002344 <HAL_InitTick+0x6c>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	4619      	mov	r1, r3
 80022f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80022fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002302:	4618      	mov	r0, r3
 8002304:	f000 fb87 	bl	8002a16 <HAL_SYSTICK_Config>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10f      	bne.n	800232e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b0f      	cmp	r3, #15
 8002312:	d809      	bhi.n	8002328 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002314:	2200      	movs	r2, #0
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	f04f 30ff 	mov.w	r0, #4294967295
 800231c:	f000 fb51 	bl	80029c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002320:	4a0a      	ldr	r2, [pc, #40]	; (800234c <HAL_InitTick+0x74>)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	e007      	b.n	8002338 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	73fb      	strb	r3, [r7, #15]
 800232c:	e004      	b.n	8002338 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	73fb      	strb	r3, [r7, #15]
 8002332:	e001      	b.n	8002338 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002338:	7bfb      	ldrb	r3, [r7, #15]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000020 	.word	0x20000020
 8002348:	20000018 	.word	0x20000018
 800234c:	2000001c 	.word	0x2000001c

08002350 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <HAL_IncTick+0x20>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	461a      	mov	r2, r3
 800235a:	4b06      	ldr	r3, [pc, #24]	; (8002374 <HAL_IncTick+0x24>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4413      	add	r3, r2
 8002360:	4a04      	ldr	r2, [pc, #16]	; (8002374 <HAL_IncTick+0x24>)
 8002362:	6013      	str	r3, [r2, #0]
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	20000020 	.word	0x20000020
 8002374:	200003f0 	.word	0x200003f0

08002378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return uwTick;
 800237c:	4b03      	ldr	r3, [pc, #12]	; (800238c <HAL_GetTick+0x14>)
 800237e:	681b      	ldr	r3, [r3, #0]
}
 8002380:	4618      	mov	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	200003f0 	.word	0x200003f0

08002390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002398:	f7ff ffee 	bl	8002378 <HAL_GetTick>
 800239c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a8:	d005      	beq.n	80023b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80023aa:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <HAL_Delay+0x44>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4413      	add	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023b6:	bf00      	nop
 80023b8:	f7ff ffde 	bl	8002378 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d8f7      	bhi.n	80023b8 <HAL_Delay+0x28>
  {
  }
}
 80023c8:	bf00      	nop
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000020 	.word	0x20000020

080023d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e0ed      	b.n	80025c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d102      	bne.n	80023fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff fa78 	bl	80018ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0202 	bic.w	r2, r2, #2
 800240a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800240c:	f7ff ffb4 	bl	8002378 <HAL_GetTick>
 8002410:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002412:	e012      	b.n	800243a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002414:	f7ff ffb0 	bl	8002378 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b0a      	cmp	r3, #10
 8002420:	d90b      	bls.n	800243a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2205      	movs	r2, #5
 8002432:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e0c5      	b.n	80025c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1e5      	bne.n	8002414 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0201 	orr.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002458:	f7ff ff8e 	bl	8002378 <HAL_GetTick>
 800245c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800245e:	e012      	b.n	8002486 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002460:	f7ff ff8a 	bl	8002378 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b0a      	cmp	r3, #10
 800246c:	d90b      	bls.n	8002486 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2205      	movs	r2, #5
 800247e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e09f      	b.n	80025c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0e5      	beq.n	8002460 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	7e1b      	ldrb	r3, [r3, #24]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d108      	bne.n	80024ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	e007      	b.n	80024be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	7e5b      	ldrb	r3, [r3, #25]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d108      	bne.n	80024d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	e007      	b.n	80024e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	7e9b      	ldrb	r3, [r3, #26]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d108      	bne.n	8002502 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0220 	orr.w	r2, r2, #32
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	e007      	b.n	8002512 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0220 	bic.w	r2, r2, #32
 8002510:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	7edb      	ldrb	r3, [r3, #27]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d108      	bne.n	800252c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0210 	bic.w	r2, r2, #16
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	e007      	b.n	800253c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 0210 	orr.w	r2, r2, #16
 800253a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	7f1b      	ldrb	r3, [r3, #28]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d108      	bne.n	8002556 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0208 	orr.w	r2, r2, #8
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	e007      	b.n	8002566 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0208 	bic.w	r2, r2, #8
 8002564:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	7f5b      	ldrb	r3, [r3, #29]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d108      	bne.n	8002580 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f042 0204 	orr.w	r2, r2, #4
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	e007      	b.n	8002590 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0204 	bic.w	r2, r2, #4
 800258e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	431a      	orrs	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	ea42 0103 	orr.w	r1, r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	1e5a      	subs	r2, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b084      	sub	sp, #16
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d12e      	bne.n	8002640 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2202      	movs	r2, #2
 80025e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0201 	bic.w	r2, r2, #1
 80025f8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025fa:	f7ff febd 	bl	8002378 <HAL_GetTick>
 80025fe:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002600:	e012      	b.n	8002628 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002602:	f7ff feb9 	bl	8002378 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b0a      	cmp	r3, #10
 800260e:	d90b      	bls.n	8002628 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2205      	movs	r2, #5
 8002620:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e012      	b.n	800264e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1e5      	bne.n	8002602 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800263c:	2300      	movs	r3, #0
 800263e:	e006      	b.n	800264e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
  }
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002656:	b480      	push	{r7}
 8002658:	b089      	sub	sp, #36	; 0x24
 800265a:	af00      	add	r7, sp, #0
 800265c:	60f8      	str	r0, [r7, #12]
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	607a      	str	r2, [r7, #4]
 8002662:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 3020 	ldrb.w	r3, [r3, #32]
 800266a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002674:	7ffb      	ldrb	r3, [r7, #31]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d003      	beq.n	8002682 <HAL_CAN_AddTxMessage+0x2c>
 800267a:	7ffb      	ldrb	r3, [r7, #31]
 800267c:	2b02      	cmp	r3, #2
 800267e:	f040 80b8 	bne.w	80027f2 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10a      	bne.n	80026a2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002692:	2b00      	cmp	r3, #0
 8002694:	d105      	bne.n	80026a2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 80a0 	beq.w	80027e2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	0e1b      	lsrs	r3, r3, #24
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d907      	bls.n	80026c2 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e09e      	b.n	8002800 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80026c2:	2201      	movs	r2, #1
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	409a      	lsls	r2, r3
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10d      	bne.n	80026f0 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80026de:	68f9      	ldr	r1, [r7, #12]
 80026e0:	6809      	ldr	r1, [r1, #0]
 80026e2:	431a      	orrs	r2, r3
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	3318      	adds	r3, #24
 80026e8:	011b      	lsls	r3, r3, #4
 80026ea:	440b      	add	r3, r1
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	e00f      	b.n	8002710 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026fa:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002700:	68f9      	ldr	r1, [r7, #12]
 8002702:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002704:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	3318      	adds	r3, #24
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	440b      	add	r3, r1
 800270e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6819      	ldr	r1, [r3, #0]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	691a      	ldr	r2, [r3, #16]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	3318      	adds	r3, #24
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	440b      	add	r3, r1
 8002720:	3304      	adds	r3, #4
 8002722:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	7d1b      	ldrb	r3, [r3, #20]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d111      	bne.n	8002750 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	3318      	adds	r3, #24
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	4413      	add	r3, r2
 8002738:	3304      	adds	r3, #4
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	6811      	ldr	r1, [r2, #0]
 8002740:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	3318      	adds	r3, #24
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	440b      	add	r3, r1
 800274c:	3304      	adds	r3, #4
 800274e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3307      	adds	r3, #7
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	061a      	lsls	r2, r3, #24
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3306      	adds	r3, #6
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	041b      	lsls	r3, r3, #16
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3305      	adds	r3, #5
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	021b      	lsls	r3, r3, #8
 800276a:	4313      	orrs	r3, r2
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	3204      	adds	r2, #4
 8002770:	7812      	ldrb	r2, [r2, #0]
 8002772:	4610      	mov	r0, r2
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	6811      	ldr	r1, [r2, #0]
 8002778:	ea43 0200 	orr.w	r2, r3, r0
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	440b      	add	r3, r1
 8002782:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002786:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3303      	adds	r3, #3
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	061a      	lsls	r2, r3, #24
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3302      	adds	r3, #2
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	041b      	lsls	r3, r3, #16
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3301      	adds	r3, #1
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	021b      	lsls	r3, r3, #8
 80027a2:	4313      	orrs	r3, r2
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	7812      	ldrb	r2, [r2, #0]
 80027a8:	4610      	mov	r0, r2
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	6811      	ldr	r1, [r2, #0]
 80027ae:	ea43 0200 	orr.w	r2, r3, r0
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	011b      	lsls	r3, r3, #4
 80027b6:	440b      	add	r3, r1
 80027b8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80027bc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	3318      	adds	r3, #24
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	4413      	add	r3, r2
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	6811      	ldr	r1, [r2, #0]
 80027d0:	f043 0201 	orr.w	r2, r3, #1
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	3318      	adds	r3, #24
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	440b      	add	r3, r1
 80027dc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	e00e      	b.n	8002800 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e006      	b.n	8002800 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
  }
}
 8002800:	4618      	mov	r0, r3
 8002802:	3724      	adds	r7, #36	; 0x24
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800281c:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002828:	4013      	ands	r3, r2
 800282a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002834:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800283c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800283e:	4a04      	ldr	r2, [pc, #16]	; (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	60d3      	str	r3, [r2, #12]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002858:	4b04      	ldr	r3, [pc, #16]	; (800286c <__NVIC_GetPriorityGrouping+0x18>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	0a1b      	lsrs	r3, r3, #8
 800285e:	f003 0307 	and.w	r3, r3, #7
}
 8002862:	4618      	mov	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	2b00      	cmp	r3, #0
 8002880:	db0b      	blt.n	800289a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	f003 021f 	and.w	r2, r3, #31
 8002888:	4907      	ldr	r1, [pc, #28]	; (80028a8 <__NVIC_EnableIRQ+0x38>)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	2001      	movs	r0, #1
 8002892:	fa00 f202 	lsl.w	r2, r0, r2
 8002896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	e000e100 	.word	0xe000e100

080028ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	6039      	str	r1, [r7, #0]
 80028b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	db0a      	blt.n	80028d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	490c      	ldr	r1, [pc, #48]	; (80028f8 <__NVIC_SetPriority+0x4c>)
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	0112      	lsls	r2, r2, #4
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	440b      	add	r3, r1
 80028d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d4:	e00a      	b.n	80028ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	4908      	ldr	r1, [pc, #32]	; (80028fc <__NVIC_SetPriority+0x50>)
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	3b04      	subs	r3, #4
 80028e4:	0112      	lsls	r2, r2, #4
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	440b      	add	r3, r1
 80028ea:	761a      	strb	r2, [r3, #24]
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000e100 	.word	0xe000e100
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002900:	b480      	push	{r7}
 8002902:	b089      	sub	sp, #36	; 0x24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f1c3 0307 	rsb	r3, r3, #7
 800291a:	2b04      	cmp	r3, #4
 800291c:	bf28      	it	cs
 800291e:	2304      	movcs	r3, #4
 8002920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	3304      	adds	r3, #4
 8002926:	2b06      	cmp	r3, #6
 8002928:	d902      	bls.n	8002930 <NVIC_EncodePriority+0x30>
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	3b03      	subs	r3, #3
 800292e:	e000      	b.n	8002932 <NVIC_EncodePriority+0x32>
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002934:	f04f 32ff 	mov.w	r2, #4294967295
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43da      	mvns	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	401a      	ands	r2, r3
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002948:	f04f 31ff 	mov.w	r1, #4294967295
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	fa01 f303 	lsl.w	r3, r1, r3
 8002952:	43d9      	mvns	r1, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002958:	4313      	orrs	r3, r2
         );
}
 800295a:	4618      	mov	r0, r3
 800295c:	3724      	adds	r7, #36	; 0x24
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
	...

08002968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3b01      	subs	r3, #1
 8002974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002978:	d301      	bcc.n	800297e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800297a:	2301      	movs	r3, #1
 800297c:	e00f      	b.n	800299e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800297e:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <SysTick_Config+0x40>)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3b01      	subs	r3, #1
 8002984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002986:	210f      	movs	r1, #15
 8002988:	f04f 30ff 	mov.w	r0, #4294967295
 800298c:	f7ff ff8e 	bl	80028ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002990:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <SysTick_Config+0x40>)
 8002992:	2200      	movs	r2, #0
 8002994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002996:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <SysTick_Config+0x40>)
 8002998:	2207      	movs	r2, #7
 800299a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	e000e010 	.word	0xe000e010

080029ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7ff ff29 	bl	800280c <__NVIC_SetPriorityGrouping>
}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b086      	sub	sp, #24
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	4603      	mov	r3, r0
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	607a      	str	r2, [r7, #4]
 80029ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029d4:	f7ff ff3e 	bl	8002854 <__NVIC_GetPriorityGrouping>
 80029d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	6978      	ldr	r0, [r7, #20]
 80029e0:	f7ff ff8e 	bl	8002900 <NVIC_EncodePriority>
 80029e4:	4602      	mov	r2, r0
 80029e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ea:	4611      	mov	r1, r2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff ff5d 	bl	80028ac <__NVIC_SetPriority>
}
 80029f2:	bf00      	nop
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	4603      	mov	r3, r0
 8002a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ff31 	bl	8002870 <__NVIC_EnableIRQ>
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff ffa2 	bl	8002968 <SysTick_Config>
 8002a24:	4603      	mov	r3, r0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b085      	sub	sp, #20
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d008      	beq.n	8002a58 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2204      	movs	r2, #4
 8002a4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e022      	b.n	8002a9e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 020e 	bic.w	r2, r2, #14
 8002a66:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7c:	f003 021c 	and.w	r2, r3, #28
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	2101      	movs	r1, #1
 8002a86:	fa01 f202 	lsl.w	r2, r1, r2
 8002a8a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b084      	sub	sp, #16
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d005      	beq.n	8002ace <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
 8002acc:	e029      	b.n	8002b22 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 020e 	bic.w	r2, r2, #14
 8002adc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0201 	bic.w	r2, r2, #1
 8002aec:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af2:	f003 021c 	and.w	r2, r3, #28
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	2101      	movs	r1, #1
 8002afc:	fa01 f202 	lsl.w	r2, r1, r2
 8002b00:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	4798      	blx	r3
    }
  }
  return status;
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b3a:	e17f      	b.n	8002e3c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	2101      	movs	r1, #1
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	fa01 f303 	lsl.w	r3, r1, r3
 8002b48:	4013      	ands	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 8171 	beq.w	8002e36 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d00b      	beq.n	8002b74 <HAL_GPIO_Init+0x48>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d007      	beq.n	8002b74 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b68:	2b11      	cmp	r3, #17
 8002b6a:	d003      	beq.n	8002b74 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b12      	cmp	r3, #18
 8002b72:	d130      	bne.n	8002bd6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	2203      	movs	r2, #3
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002baa:	2201      	movs	r2, #1
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	091b      	lsrs	r3, r3, #4
 8002bc0:	f003 0201 	and.w	r2, r3, #1
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f003 0303 	and.w	r3, r3, #3
 8002bde:	2b03      	cmp	r3, #3
 8002be0:	d118      	bne.n	8002c14 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002be8:	2201      	movs	r2, #1
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	08db      	lsrs	r3, r3, #3
 8002bfe:	f003 0201 	and.w	r2, r3, #1
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	2203      	movs	r2, #3
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d003      	beq.n	8002c54 <HAL_GPIO_Init+0x128>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b12      	cmp	r3, #18
 8002c52:	d123      	bne.n	8002c9c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	08da      	lsrs	r2, r3, #3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3208      	adds	r2, #8
 8002c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c60:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	220f      	movs	r2, #15
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	691a      	ldr	r2, [r3, #16]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	08da      	lsrs	r2, r3, #3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	3208      	adds	r2, #8
 8002c96:	6939      	ldr	r1, [r7, #16]
 8002c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 0203 	and.w	r2, r3, #3
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 80ac 	beq.w	8002e36 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cde:	4b5f      	ldr	r3, [pc, #380]	; (8002e5c <HAL_GPIO_Init+0x330>)
 8002ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce2:	4a5e      	ldr	r2, [pc, #376]	; (8002e5c <HAL_GPIO_Init+0x330>)
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	6613      	str	r3, [r2, #96]	; 0x60
 8002cea:	4b5c      	ldr	r3, [pc, #368]	; (8002e5c <HAL_GPIO_Init+0x330>)
 8002cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	60bb      	str	r3, [r7, #8]
 8002cf4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cf6:	4a5a      	ldr	r2, [pc, #360]	; (8002e60 <HAL_GPIO_Init+0x334>)
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	089b      	lsrs	r3, r3, #2
 8002cfc:	3302      	adds	r3, #2
 8002cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d02:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	220f      	movs	r2, #15
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	43db      	mvns	r3, r3
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	4013      	ands	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d20:	d025      	beq.n	8002d6e <HAL_GPIO_Init+0x242>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a4f      	ldr	r2, [pc, #316]	; (8002e64 <HAL_GPIO_Init+0x338>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d01f      	beq.n	8002d6a <HAL_GPIO_Init+0x23e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a4e      	ldr	r2, [pc, #312]	; (8002e68 <HAL_GPIO_Init+0x33c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d019      	beq.n	8002d66 <HAL_GPIO_Init+0x23a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a4d      	ldr	r2, [pc, #308]	; (8002e6c <HAL_GPIO_Init+0x340>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d013      	beq.n	8002d62 <HAL_GPIO_Init+0x236>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a4c      	ldr	r2, [pc, #304]	; (8002e70 <HAL_GPIO_Init+0x344>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d00d      	beq.n	8002d5e <HAL_GPIO_Init+0x232>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a4b      	ldr	r2, [pc, #300]	; (8002e74 <HAL_GPIO_Init+0x348>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d007      	beq.n	8002d5a <HAL_GPIO_Init+0x22e>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a4a      	ldr	r2, [pc, #296]	; (8002e78 <HAL_GPIO_Init+0x34c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d101      	bne.n	8002d56 <HAL_GPIO_Init+0x22a>
 8002d52:	2306      	movs	r3, #6
 8002d54:	e00c      	b.n	8002d70 <HAL_GPIO_Init+0x244>
 8002d56:	2307      	movs	r3, #7
 8002d58:	e00a      	b.n	8002d70 <HAL_GPIO_Init+0x244>
 8002d5a:	2305      	movs	r3, #5
 8002d5c:	e008      	b.n	8002d70 <HAL_GPIO_Init+0x244>
 8002d5e:	2304      	movs	r3, #4
 8002d60:	e006      	b.n	8002d70 <HAL_GPIO_Init+0x244>
 8002d62:	2303      	movs	r3, #3
 8002d64:	e004      	b.n	8002d70 <HAL_GPIO_Init+0x244>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e002      	b.n	8002d70 <HAL_GPIO_Init+0x244>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <HAL_GPIO_Init+0x244>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	f002 0203 	and.w	r2, r2, #3
 8002d76:	0092      	lsls	r2, r2, #2
 8002d78:	4093      	lsls	r3, r2
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d80:	4937      	ldr	r1, [pc, #220]	; (8002e60 <HAL_GPIO_Init+0x334>)
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	089b      	lsrs	r3, r3, #2
 8002d86:	3302      	adds	r3, #2
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d8e:	4b3b      	ldr	r3, [pc, #236]	; (8002e7c <HAL_GPIO_Init+0x350>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	43db      	mvns	r3, r3
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002db2:	4a32      	ldr	r2, [pc, #200]	; (8002e7c <HAL_GPIO_Init+0x350>)
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002db8:	4b30      	ldr	r3, [pc, #192]	; (8002e7c <HAL_GPIO_Init+0x350>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ddc:	4a27      	ldr	r2, [pc, #156]	; (8002e7c <HAL_GPIO_Init+0x350>)
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002de2:	4b26      	ldr	r3, [pc, #152]	; (8002e7c <HAL_GPIO_Init+0x350>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	43db      	mvns	r3, r3
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	4013      	ands	r3, r2
 8002df0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e06:	4a1d      	ldr	r2, [pc, #116]	; (8002e7c <HAL_GPIO_Init+0x350>)
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e0c:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <HAL_GPIO_Init+0x350>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	43db      	mvns	r3, r3
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e30:	4a12      	ldr	r2, [pc, #72]	; (8002e7c <HAL_GPIO_Init+0x350>)
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	fa22 f303 	lsr.w	r3, r2, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f47f ae78 	bne.w	8002b3c <HAL_GPIO_Init+0x10>
  }
}
 8002e4c:	bf00      	nop
 8002e4e:	bf00      	nop
 8002e50:	371c      	adds	r7, #28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40010000 	.word	0x40010000
 8002e64:	48000400 	.word	0x48000400
 8002e68:	48000800 	.word	0x48000800
 8002e6c:	48000c00 	.word	0x48000c00
 8002e70:	48001000 	.word	0x48001000
 8002e74:	48001400 	.word	0x48001400
 8002e78:	48001800 	.word	0x48001800
 8002e7c:	40010400 	.word	0x40010400

08002e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	807b      	strh	r3, [r7, #2]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e90:	787b      	ldrb	r3, [r7, #1]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e96:	887a      	ldrh	r2, [r7, #2]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e9c:	e002      	b.n	8002ea4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e9e:	887a      	ldrh	r2, [r7, #2]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e081      	b.n	8002fc6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fe fdf4 	bl	8001ac4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2224      	movs	r2, #36	; 0x24
 8002ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0201 	bic.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d107      	bne.n	8002f2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f26:	609a      	str	r2, [r3, #8]
 8002f28:	e006      	b.n	8002f38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d104      	bne.n	8002f4a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6812      	ldr	r2, [r2, #0]
 8002f54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691a      	ldr	r2, [r3, #16]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	ea42 0103 	orr.w	r1, r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	021a      	lsls	r2, r3, #8
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69d9      	ldr	r1, [r3, #28]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a1a      	ldr	r2, [r3, #32]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
	...

08002fd0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b088      	sub	sp, #32
 8002fd4:	af02      	add	r7, sp, #8
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	607a      	str	r2, [r7, #4]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	460b      	mov	r3, r1
 8002fde:	817b      	strh	r3, [r7, #10]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b20      	cmp	r3, #32
 8002fee:	f040 80da 	bne.w	80031a6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_I2C_Master_Transmit+0x30>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e0d3      	b.n	80031a8 <HAL_I2C_Master_Transmit+0x1d8>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003008:	f7ff f9b6 	bl	8002378 <HAL_GetTick>
 800300c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	2319      	movs	r3, #25
 8003014:	2201      	movs	r2, #1
 8003016:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 f9e6 	bl	80033ec <I2C_WaitOnFlagUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e0be      	b.n	80031a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2221      	movs	r2, #33	; 0x21
 800302e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2210      	movs	r2, #16
 8003036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	893a      	ldrh	r2, [r7, #8]
 800304a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003056:	b29b      	uxth	r3, r3
 8003058:	2bff      	cmp	r3, #255	; 0xff
 800305a:	d90e      	bls.n	800307a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	22ff      	movs	r2, #255	; 0xff
 8003060:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003066:	b2da      	uxtb	r2, r3
 8003068:	8979      	ldrh	r1, [r7, #10]
 800306a:	4b51      	ldr	r3, [pc, #324]	; (80031b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 fb48 	bl	8003708 <I2C_TransferConfig>
 8003078:	e06c      	b.n	8003154 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307e:	b29a      	uxth	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003088:	b2da      	uxtb	r2, r3
 800308a:	8979      	ldrh	r1, [r7, #10]
 800308c:	4b48      	ldr	r3, [pc, #288]	; (80031b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 fb37 	bl	8003708 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800309a:	e05b      	b.n	8003154 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	6a39      	ldr	r1, [r7, #32]
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 f9e3 	bl	800346c <I2C_WaitOnTXISFlagUntilTimeout>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e07b      	b.n	80031a8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	781a      	ldrb	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d034      	beq.n	8003154 <HAL_I2C_Master_Transmit+0x184>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d130      	bne.n	8003154 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	6a3b      	ldr	r3, [r7, #32]
 80030f8:	2200      	movs	r2, #0
 80030fa:	2180      	movs	r1, #128	; 0x80
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 f975 	bl	80033ec <I2C_WaitOnFlagUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e04d      	b.n	80031a8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003110:	b29b      	uxth	r3, r3
 8003112:	2bff      	cmp	r3, #255	; 0xff
 8003114:	d90e      	bls.n	8003134 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	22ff      	movs	r2, #255	; 0xff
 800311a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003120:	b2da      	uxtb	r2, r3
 8003122:	8979      	ldrh	r1, [r7, #10]
 8003124:	2300      	movs	r3, #0
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 faeb 	bl	8003708 <I2C_TransferConfig>
 8003132:	e00f      	b.n	8003154 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003142:	b2da      	uxtb	r2, r3
 8003144:	8979      	ldrh	r1, [r7, #10]
 8003146:	2300      	movs	r3, #0
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 fada 	bl	8003708 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d19e      	bne.n	800309c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	6a39      	ldr	r1, [r7, #32]
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 f9c2 	bl	80034ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e01a      	b.n	80031a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2220      	movs	r2, #32
 8003178:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6859      	ldr	r1, [r3, #4]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <HAL_I2C_Master_Transmit+0x1e4>)
 8003186:	400b      	ands	r3, r1
 8003188:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2220      	movs	r2, #32
 800318e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031a2:	2300      	movs	r3, #0
 80031a4:	e000      	b.n	80031a8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80031a6:	2302      	movs	r3, #2
  }
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	80002000 	.word	0x80002000
 80031b4:	fe00e800 	.word	0xfe00e800

080031b8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b088      	sub	sp, #32
 80031bc:	af02      	add	r7, sp, #8
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	607a      	str	r2, [r7, #4]
 80031c2:	461a      	mov	r2, r3
 80031c4:	460b      	mov	r3, r1
 80031c6:	817b      	strh	r3, [r7, #10]
 80031c8:	4613      	mov	r3, r2
 80031ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b20      	cmp	r3, #32
 80031d6:	f040 80db 	bne.w	8003390 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_I2C_Master_Receive+0x30>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e0d4      	b.n	8003392 <HAL_I2C_Master_Receive+0x1da>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031f0:	f7ff f8c2 	bl	8002378 <HAL_GetTick>
 80031f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	2319      	movs	r3, #25
 80031fc:	2201      	movs	r2, #1
 80031fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 f8f2 	bl	80033ec <I2C_WaitOnFlagUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e0bf      	b.n	8003392 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2222      	movs	r2, #34	; 0x22
 8003216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2210      	movs	r2, #16
 800321e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	893a      	ldrh	r2, [r7, #8]
 8003232:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323e:	b29b      	uxth	r3, r3
 8003240:	2bff      	cmp	r3, #255	; 0xff
 8003242:	d90e      	bls.n	8003262 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	22ff      	movs	r2, #255	; 0xff
 8003248:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324e:	b2da      	uxtb	r2, r3
 8003250:	8979      	ldrh	r1, [r7, #10]
 8003252:	4b52      	ldr	r3, [pc, #328]	; (800339c <HAL_I2C_Master_Receive+0x1e4>)
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 fa54 	bl	8003708 <I2C_TransferConfig>
 8003260:	e06d      	b.n	800333e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003270:	b2da      	uxtb	r2, r3
 8003272:	8979      	ldrh	r1, [r7, #10]
 8003274:	4b49      	ldr	r3, [pc, #292]	; (800339c <HAL_I2C_Master_Receive+0x1e4>)
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 fa43 	bl	8003708 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003282:	e05c      	b.n	800333e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	6a39      	ldr	r1, [r7, #32]
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 f96b 	bl	8003564 <I2C_WaitOnRXNEFlagUntilTimeout>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e07c      	b.n	8003392 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	1c5a      	adds	r2, r3, #1
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d034      	beq.n	800333e <HAL_I2C_Master_Receive+0x186>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d130      	bne.n	800333e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	2200      	movs	r2, #0
 80032e4:	2180      	movs	r1, #128	; 0x80
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f880 	bl	80033ec <I2C_WaitOnFlagUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e04d      	b.n	8003392 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	2bff      	cmp	r3, #255	; 0xff
 80032fe:	d90e      	bls.n	800331e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	22ff      	movs	r2, #255	; 0xff
 8003304:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330a:	b2da      	uxtb	r2, r3
 800330c:	8979      	ldrh	r1, [r7, #10]
 800330e:	2300      	movs	r3, #0
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f9f6 	bl	8003708 <I2C_TransferConfig>
 800331c:	e00f      	b.n	800333e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332c:	b2da      	uxtb	r2, r3
 800332e:	8979      	ldrh	r1, [r7, #10]
 8003330:	2300      	movs	r3, #0
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 f9e5 	bl	8003708 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003342:	b29b      	uxth	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d19d      	bne.n	8003284 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	6a39      	ldr	r1, [r7, #32]
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 f8cd 	bl	80034ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e01a      	b.n	8003392 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2220      	movs	r2, #32
 8003362:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6859      	ldr	r1, [r3, #4]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <HAL_I2C_Master_Receive+0x1e8>)
 8003370:	400b      	ands	r3, r1
 8003372:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	e000      	b.n	8003392 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003390:	2302      	movs	r3, #2
  }
}
 8003392:	4618      	mov	r0, r3
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	80002400 	.word	0x80002400
 80033a0:	fe00e800 	.word	0xfe00e800

080033a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d103      	bne.n	80033c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2200      	movs	r2, #0
 80033c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d007      	beq.n	80033e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699a      	ldr	r2, [r3, #24]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	619a      	str	r2, [r3, #24]
  }
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	603b      	str	r3, [r7, #0]
 80033f8:	4613      	mov	r3, r2
 80033fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033fc:	e022      	b.n	8003444 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003404:	d01e      	beq.n	8003444 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003406:	f7fe ffb7 	bl	8002378 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d302      	bcc.n	800341c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d113      	bne.n	8003444 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003420:	f043 0220 	orr.w	r2, r3, #32
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e00f      	b.n	8003464 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699a      	ldr	r2, [r3, #24]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	4013      	ands	r3, r2
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	429a      	cmp	r2, r3
 8003452:	bf0c      	ite	eq
 8003454:	2301      	moveq	r3, #1
 8003456:	2300      	movne	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	461a      	mov	r2, r3
 800345c:	79fb      	ldrb	r3, [r7, #7]
 800345e:	429a      	cmp	r2, r3
 8003460:	d0cd      	beq.n	80033fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003478:	e02c      	b.n	80034d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	68b9      	ldr	r1, [r7, #8]
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 f8dc 	bl	800363c <I2C_IsAcknowledgeFailed>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e02a      	b.n	80034e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003494:	d01e      	beq.n	80034d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003496:	f7fe ff6f 	bl	8002378 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d302      	bcc.n	80034ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d113      	bne.n	80034d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b0:	f043 0220 	orr.w	r2, r3, #32
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e007      	b.n	80034e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d1cb      	bne.n	800347a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034f8:	e028      	b.n	800354c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	68b9      	ldr	r1, [r7, #8]
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 f89c 	bl	800363c <I2C_IsAcknowledgeFailed>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e026      	b.n	800355c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350e:	f7fe ff33 	bl	8002378 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	429a      	cmp	r2, r3
 800351c:	d302      	bcc.n	8003524 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d113      	bne.n	800354c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003528:	f043 0220 	orr.w	r2, r3, #32
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e007      	b.n	800355c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	f003 0320 	and.w	r3, r3, #32
 8003556:	2b20      	cmp	r3, #32
 8003558:	d1cf      	bne.n	80034fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003570:	e055      	b.n	800361e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	68b9      	ldr	r1, [r7, #8]
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 f860 	bl	800363c <I2C_IsAcknowledgeFailed>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e053      	b.n	800362e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	2b20      	cmp	r3, #32
 8003592:	d129      	bne.n	80035e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d105      	bne.n	80035ae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	e03f      	b.n	800362e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2220      	movs	r2, #32
 80035b4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6859      	ldr	r1, [r3, #4]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	4b1d      	ldr	r3, [pc, #116]	; (8003638 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80035c2:	400b      	ands	r3, r1
 80035c4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e022      	b.n	800362e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e8:	f7fe fec6 	bl	8002378 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d302      	bcc.n	80035fe <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10f      	bne.n	800361e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003602:	f043 0220 	orr.w	r2, r3, #32
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e007      	b.n	800362e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b04      	cmp	r3, #4
 800362a:	d1a2      	bne.n	8003572 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	fe00e800 	.word	0xfe00e800

0800363c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	f003 0310 	and.w	r3, r3, #16
 8003652:	2b10      	cmp	r3, #16
 8003654:	d151      	bne.n	80036fa <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003656:	e022      	b.n	800369e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365e:	d01e      	beq.n	800369e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003660:	f7fe fe8a 	bl	8002378 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	429a      	cmp	r2, r3
 800366e:	d302      	bcc.n	8003676 <I2C_IsAcknowledgeFailed+0x3a>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d113      	bne.n	800369e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367a:	f043 0220 	orr.w	r2, r3, #32
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2220      	movs	r2, #32
 8003686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e02e      	b.n	80036fc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	f003 0320 	and.w	r3, r3, #32
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	d1d5      	bne.n	8003658 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2210      	movs	r2, #16
 80036b2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2220      	movs	r2, #32
 80036ba:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f7ff fe71 	bl	80033a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6859      	ldr	r1, [r3, #4]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	4b0d      	ldr	r3, [pc, #52]	; (8003704 <I2C_IsAcknowledgeFailed+0xc8>)
 80036ce:	400b      	ands	r3, r1
 80036d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d6:	f043 0204 	orr.w	r2, r3, #4
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	fe00e800 	.word	0xfe00e800

08003708 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	607b      	str	r3, [r7, #4]
 8003712:	460b      	mov	r3, r1
 8003714:	817b      	strh	r3, [r7, #10]
 8003716:	4613      	mov	r3, r2
 8003718:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	0d5b      	lsrs	r3, r3, #21
 8003724:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003728:	4b0d      	ldr	r3, [pc, #52]	; (8003760 <I2C_TransferConfig+0x58>)
 800372a:	430b      	orrs	r3, r1
 800372c:	43db      	mvns	r3, r3
 800372e:	ea02 0103 	and.w	r1, r2, r3
 8003732:	897b      	ldrh	r3, [r7, #10]
 8003734:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003738:	7a7b      	ldrb	r3, [r7, #9]
 800373a:	041b      	lsls	r3, r3, #16
 800373c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	431a      	orrs	r2, r3
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	431a      	orrs	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003752:	bf00      	nop
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	03ff63ff 	.word	0x03ff63ff

08003764 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b20      	cmp	r3, #32
 8003778:	d138      	bne.n	80037ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003784:	2302      	movs	r3, #2
 8003786:	e032      	b.n	80037ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2224      	movs	r2, #36	; 0x24
 8003794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0201 	bic.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6819      	ldr	r1, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0201 	orr.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037e8:	2300      	movs	r3, #0
 80037ea:	e000      	b.n	80037ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037ec:	2302      	movs	r3, #2
  }
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b085      	sub	sp, #20
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b20      	cmp	r3, #32
 800380e:	d139      	bne.n	8003884 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800381a:	2302      	movs	r3, #2
 800381c:	e033      	b.n	8003886 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2224      	movs	r2, #36	; 0x24
 800382a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0201 	bic.w	r2, r2, #1
 800383c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800384c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	021b      	lsls	r3, r3, #8
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	4313      	orrs	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0201 	orr.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	e000      	b.n	8003886 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003884:	2302      	movs	r3, #2
  }
}
 8003886:	4618      	mov	r0, r3
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
	...

08003894 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003898:	4b04      	ldr	r3, [pc, #16]	; (80038ac <HAL_PWREx_GetVoltageRange+0x18>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40007000 	.word	0x40007000

080038b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038be:	d130      	bne.n	8003922 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80038c0:	4b23      	ldr	r3, [pc, #140]	; (8003950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038cc:	d038      	beq.n	8003940 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038ce:	4b20      	ldr	r3, [pc, #128]	; (8003950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038d6:	4a1e      	ldr	r2, [pc, #120]	; (8003950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038de:	4b1d      	ldr	r3, [pc, #116]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2232      	movs	r2, #50	; 0x32
 80038e4:	fb02 f303 	mul.w	r3, r2, r3
 80038e8:	4a1b      	ldr	r2, [pc, #108]	; (8003958 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	0c9b      	lsrs	r3, r3, #18
 80038f0:	3301      	adds	r3, #1
 80038f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038f4:	e002      	b.n	80038fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	3b01      	subs	r3, #1
 80038fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038fc:	4b14      	ldr	r3, [pc, #80]	; (8003950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003908:	d102      	bne.n	8003910 <HAL_PWREx_ControlVoltageScaling+0x60>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f2      	bne.n	80038f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003910:	4b0f      	ldr	r3, [pc, #60]	; (8003950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800391c:	d110      	bne.n	8003940 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e00f      	b.n	8003942 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003922:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800392a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800392e:	d007      	beq.n	8003940 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003930:	4b07      	ldr	r3, [pc, #28]	; (8003950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003938:	4a05      	ldr	r2, [pc, #20]	; (8003950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800393a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800393e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40007000 	.word	0x40007000
 8003954:	20000018 	.word	0x20000018
 8003958:	431bde83 	.word	0x431bde83

0800395c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b088      	sub	sp, #32
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e3d4      	b.n	8004118 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800396e:	4ba1      	ldr	r3, [pc, #644]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 030c 	and.w	r3, r3, #12
 8003976:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003978:	4b9e      	ldr	r3, [pc, #632]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f003 0303 	and.w	r3, r3, #3
 8003980:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0310 	and.w	r3, r3, #16
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 80e4 	beq.w	8003b58 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d007      	beq.n	80039a6 <HAL_RCC_OscConfig+0x4a>
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	2b0c      	cmp	r3, #12
 800399a:	f040 808b 	bne.w	8003ab4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	f040 8087 	bne.w	8003ab4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039a6:	4b93      	ldr	r3, [pc, #588]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d005      	beq.n	80039be <HAL_RCC_OscConfig+0x62>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e3ac      	b.n	8004118 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1a      	ldr	r2, [r3, #32]
 80039c2:	4b8c      	ldr	r3, [pc, #560]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d004      	beq.n	80039d8 <HAL_RCC_OscConfig+0x7c>
 80039ce:	4b89      	ldr	r3, [pc, #548]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039d6:	e005      	b.n	80039e4 <HAL_RCC_OscConfig+0x88>
 80039d8:	4b86      	ldr	r3, [pc, #536]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 80039da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039de:	091b      	lsrs	r3, r3, #4
 80039e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d223      	bcs.n	8003a30 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 fd41 	bl	8004474 <RCC_SetFlashLatencyFromMSIRange>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e38d      	b.n	8004118 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039fc:	4b7d      	ldr	r3, [pc, #500]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a7c      	ldr	r2, [pc, #496]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003a02:	f043 0308 	orr.w	r3, r3, #8
 8003a06:	6013      	str	r3, [r2, #0]
 8003a08:	4b7a      	ldr	r3, [pc, #488]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	4977      	ldr	r1, [pc, #476]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a1a:	4b76      	ldr	r3, [pc, #472]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	021b      	lsls	r3, r3, #8
 8003a28:	4972      	ldr	r1, [pc, #456]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	604b      	str	r3, [r1, #4]
 8003a2e:	e025      	b.n	8003a7c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a30:	4b70      	ldr	r3, [pc, #448]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a6f      	ldr	r2, [pc, #444]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003a36:	f043 0308 	orr.w	r3, r3, #8
 8003a3a:	6013      	str	r3, [r2, #0]
 8003a3c:	4b6d      	ldr	r3, [pc, #436]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	496a      	ldr	r1, [pc, #424]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a4e:	4b69      	ldr	r3, [pc, #420]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	021b      	lsls	r3, r3, #8
 8003a5c:	4965      	ldr	r1, [pc, #404]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d109      	bne.n	8003a7c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 fd01 	bl	8004474 <RCC_SetFlashLatencyFromMSIRange>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e34d      	b.n	8004118 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a7c:	f000 fc36 	bl	80042ec <HAL_RCC_GetSysClockFreq>
 8003a80:	4602      	mov	r2, r0
 8003a82:	4b5c      	ldr	r3, [pc, #368]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	091b      	lsrs	r3, r3, #4
 8003a88:	f003 030f 	and.w	r3, r3, #15
 8003a8c:	495a      	ldr	r1, [pc, #360]	; (8003bf8 <HAL_RCC_OscConfig+0x29c>)
 8003a8e:	5ccb      	ldrb	r3, [r1, r3]
 8003a90:	f003 031f 	and.w	r3, r3, #31
 8003a94:	fa22 f303 	lsr.w	r3, r2, r3
 8003a98:	4a58      	ldr	r2, [pc, #352]	; (8003bfc <HAL_RCC_OscConfig+0x2a0>)
 8003a9a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a9c:	4b58      	ldr	r3, [pc, #352]	; (8003c00 <HAL_RCC_OscConfig+0x2a4>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fe fc19 	bl	80022d8 <HAL_InitTick>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d052      	beq.n	8003b56 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	e331      	b.n	8004118 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d032      	beq.n	8003b22 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003abc:	4b4d      	ldr	r3, [pc, #308]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a4c      	ldr	r2, [pc, #304]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ac8:	f7fe fc56 	bl	8002378 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ad0:	f7fe fc52 	bl	8002378 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e31a      	b.n	8004118 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ae2:	4b44      	ldr	r3, [pc, #272]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003aee:	4b41      	ldr	r3, [pc, #260]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a40      	ldr	r2, [pc, #256]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003af4:	f043 0308 	orr.w	r3, r3, #8
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	4b3e      	ldr	r3, [pc, #248]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	493b      	ldr	r1, [pc, #236]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b0c:	4b39      	ldr	r3, [pc, #228]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	4936      	ldr	r1, [pc, #216]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	604b      	str	r3, [r1, #4]
 8003b20:	e01a      	b.n	8003b58 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b22:	4b34      	ldr	r3, [pc, #208]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a33      	ldr	r2, [pc, #204]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b2e:	f7fe fc23 	bl	8002378 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b36:	f7fe fc1f 	bl	8002378 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e2e7      	b.n	8004118 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b48:	4b2a      	ldr	r3, [pc, #168]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1f0      	bne.n	8003b36 <HAL_RCC_OscConfig+0x1da>
 8003b54:	e000      	b.n	8003b58 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b56:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d074      	beq.n	8003c4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d005      	beq.n	8003b76 <HAL_RCC_OscConfig+0x21a>
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	2b0c      	cmp	r3, #12
 8003b6e:	d10e      	bne.n	8003b8e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	2b03      	cmp	r3, #3
 8003b74:	d10b      	bne.n	8003b8e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b76:	4b1f      	ldr	r3, [pc, #124]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d064      	beq.n	8003c4c <HAL_RCC_OscConfig+0x2f0>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d160      	bne.n	8003c4c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e2c4      	b.n	8004118 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b96:	d106      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x24a>
 8003b98:	4b16      	ldr	r3, [pc, #88]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a15      	ldr	r2, [pc, #84]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba2:	6013      	str	r3, [r2, #0]
 8003ba4:	e01d      	b.n	8003be2 <HAL_RCC_OscConfig+0x286>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bae:	d10c      	bne.n	8003bca <HAL_RCC_OscConfig+0x26e>
 8003bb0:	4b10      	ldr	r3, [pc, #64]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a0f      	ldr	r2, [pc, #60]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003bb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	4b0d      	ldr	r3, [pc, #52]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a0c      	ldr	r2, [pc, #48]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc6:	6013      	str	r3, [r2, #0]
 8003bc8:	e00b      	b.n	8003be2 <HAL_RCC_OscConfig+0x286>
 8003bca:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a09      	ldr	r2, [pc, #36]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	4b07      	ldr	r3, [pc, #28]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a06      	ldr	r2, [pc, #24]	; (8003bf4 <HAL_RCC_OscConfig+0x298>)
 8003bdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003be0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d01c      	beq.n	8003c24 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bea:	f7fe fbc5 	bl	8002378 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bf0:	e011      	b.n	8003c16 <HAL_RCC_OscConfig+0x2ba>
 8003bf2:	bf00      	nop
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	08008ef4 	.word	0x08008ef4
 8003bfc:	20000018 	.word	0x20000018
 8003c00:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c04:	f7fe fbb8 	bl	8002378 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b64      	cmp	r3, #100	; 0x64
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e280      	b.n	8004118 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c16:	4baf      	ldr	r3, [pc, #700]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0f0      	beq.n	8003c04 <HAL_RCC_OscConfig+0x2a8>
 8003c22:	e014      	b.n	8003c4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c24:	f7fe fba8 	bl	8002378 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c2c:	f7fe fba4 	bl	8002378 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b64      	cmp	r3, #100	; 0x64
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e26c      	b.n	8004118 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c3e:	4ba5      	ldr	r3, [pc, #660]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1f0      	bne.n	8003c2c <HAL_RCC_OscConfig+0x2d0>
 8003c4a:	e000      	b.n	8003c4e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d060      	beq.n	8003d1c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d005      	beq.n	8003c6c <HAL_RCC_OscConfig+0x310>
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	2b0c      	cmp	r3, #12
 8003c64:	d119      	bne.n	8003c9a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d116      	bne.n	8003c9a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c6c:	4b99      	ldr	r3, [pc, #612]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d005      	beq.n	8003c84 <HAL_RCC_OscConfig+0x328>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e249      	b.n	8004118 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c84:	4b93      	ldr	r3, [pc, #588]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	061b      	lsls	r3, r3, #24
 8003c92:	4990      	ldr	r1, [pc, #576]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c98:	e040      	b.n	8003d1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d023      	beq.n	8003cea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ca2:	4b8c      	ldr	r3, [pc, #560]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a8b      	ldr	r2, [pc, #556]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cae:	f7fe fb63 	bl	8002378 <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cb6:	f7fe fb5f 	bl	8002378 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e227      	b.n	8004118 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cc8:	4b82      	ldr	r3, [pc, #520]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0f0      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd4:	4b7f      	ldr	r3, [pc, #508]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	061b      	lsls	r3, r3, #24
 8003ce2:	497c      	ldr	r1, [pc, #496]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	604b      	str	r3, [r1, #4]
 8003ce8:	e018      	b.n	8003d1c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cea:	4b7a      	ldr	r3, [pc, #488]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a79      	ldr	r2, [pc, #484]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf6:	f7fe fb3f 	bl	8002378 <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cfe:	f7fe fb3b 	bl	8002378 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e203      	b.n	8004118 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d10:	4b70      	ldr	r3, [pc, #448]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1f0      	bne.n	8003cfe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0308 	and.w	r3, r3, #8
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d03c      	beq.n	8003da2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d01c      	beq.n	8003d6a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d30:	4b68      	ldr	r3, [pc, #416]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d36:	4a67      	ldr	r2, [pc, #412]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003d38:	f043 0301 	orr.w	r3, r3, #1
 8003d3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d40:	f7fe fb1a 	bl	8002378 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d48:	f7fe fb16 	bl	8002378 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e1de      	b.n	8004118 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d5a:	4b5e      	ldr	r3, [pc, #376]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0ef      	beq.n	8003d48 <HAL_RCC_OscConfig+0x3ec>
 8003d68:	e01b      	b.n	8003da2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d6a:	4b5a      	ldr	r3, [pc, #360]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d70:	4a58      	ldr	r2, [pc, #352]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003d72:	f023 0301 	bic.w	r3, r3, #1
 8003d76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7a:	f7fe fafd 	bl	8002378 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d82:	f7fe faf9 	bl	8002378 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e1c1      	b.n	8004118 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d94:	4b4f      	ldr	r3, [pc, #316]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1ef      	bne.n	8003d82 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 80a6 	beq.w	8003efc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003db0:	2300      	movs	r3, #0
 8003db2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003db4:	4b47      	ldr	r3, [pc, #284]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10d      	bne.n	8003ddc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dc0:	4b44      	ldr	r3, [pc, #272]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc4:	4a43      	ldr	r2, [pc, #268]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dca:	6593      	str	r3, [r2, #88]	; 0x58
 8003dcc:	4b41      	ldr	r3, [pc, #260]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd4:	60bb      	str	r3, [r7, #8]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ddc:	4b3e      	ldr	r3, [pc, #248]	; (8003ed8 <HAL_RCC_OscConfig+0x57c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d118      	bne.n	8003e1a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003de8:	4b3b      	ldr	r3, [pc, #236]	; (8003ed8 <HAL_RCC_OscConfig+0x57c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a3a      	ldr	r2, [pc, #232]	; (8003ed8 <HAL_RCC_OscConfig+0x57c>)
 8003dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003df4:	f7fe fac0 	bl	8002378 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dfc:	f7fe fabc 	bl	8002378 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e184      	b.n	8004118 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e0e:	4b32      	ldr	r3, [pc, #200]	; (8003ed8 <HAL_RCC_OscConfig+0x57c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0f0      	beq.n	8003dfc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d108      	bne.n	8003e34 <HAL_RCC_OscConfig+0x4d8>
 8003e22:	4b2c      	ldr	r3, [pc, #176]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e28:	4a2a      	ldr	r2, [pc, #168]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003e2a:	f043 0301 	orr.w	r3, r3, #1
 8003e2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e32:	e024      	b.n	8003e7e <HAL_RCC_OscConfig+0x522>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2b05      	cmp	r3, #5
 8003e3a:	d110      	bne.n	8003e5e <HAL_RCC_OscConfig+0x502>
 8003e3c:	4b25      	ldr	r3, [pc, #148]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e42:	4a24      	ldr	r2, [pc, #144]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003e44:	f043 0304 	orr.w	r3, r3, #4
 8003e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e4c:	4b21      	ldr	r3, [pc, #132]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e52:	4a20      	ldr	r2, [pc, #128]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e5c:	e00f      	b.n	8003e7e <HAL_RCC_OscConfig+0x522>
 8003e5e:	4b1d      	ldr	r3, [pc, #116]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e64:	4a1b      	ldr	r2, [pc, #108]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003e66:	f023 0301 	bic.w	r3, r3, #1
 8003e6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e6e:	4b19      	ldr	r3, [pc, #100]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e74:	4a17      	ldr	r2, [pc, #92]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003e76:	f023 0304 	bic.w	r3, r3, #4
 8003e7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d016      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e86:	f7fe fa77 	bl	8002378 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e8c:	e00a      	b.n	8003ea4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8e:	f7fe fa73 	bl	8002378 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e139      	b.n	8004118 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ea4:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <HAL_RCC_OscConfig+0x578>)
 8003ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0ed      	beq.n	8003e8e <HAL_RCC_OscConfig+0x532>
 8003eb2:	e01a      	b.n	8003eea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb4:	f7fe fa60 	bl	8002378 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003eba:	e00f      	b.n	8003edc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ebc:	f7fe fa5c 	bl	8002378 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d906      	bls.n	8003edc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e122      	b.n	8004118 <HAL_RCC_OscConfig+0x7bc>
 8003ed2:	bf00      	nop
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003edc:	4b90      	ldr	r3, [pc, #576]	; (8004120 <HAL_RCC_OscConfig+0x7c4>)
 8003ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1e8      	bne.n	8003ebc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eea:	7ffb      	ldrb	r3, [r7, #31]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d105      	bne.n	8003efc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef0:	4b8b      	ldr	r3, [pc, #556]	; (8004120 <HAL_RCC_OscConfig+0x7c4>)
 8003ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef4:	4a8a      	ldr	r2, [pc, #552]	; (8004120 <HAL_RCC_OscConfig+0x7c4>)
 8003ef6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003efa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 8108 	beq.w	8004116 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	f040 80d0 	bne.w	80040b0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f10:	4b83      	ldr	r3, [pc, #524]	; (8004120 <HAL_RCC_OscConfig+0x7c4>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f003 0203 	and.w	r2, r3, #3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d130      	bne.n	8003f86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d127      	bne.n	8003f86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f40:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d11f      	bne.n	8003f86 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f50:	2a07      	cmp	r2, #7
 8003f52:	bf14      	ite	ne
 8003f54:	2201      	movne	r2, #1
 8003f56:	2200      	moveq	r2, #0
 8003f58:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d113      	bne.n	8003f86 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f68:	085b      	lsrs	r3, r3, #1
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d109      	bne.n	8003f86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7c:	085b      	lsrs	r3, r3, #1
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d06e      	beq.n	8004064 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	2b0c      	cmp	r3, #12
 8003f8a:	d069      	beq.n	8004060 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f8c:	4b64      	ldr	r3, [pc, #400]	; (8004120 <HAL_RCC_OscConfig+0x7c4>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d105      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f98:	4b61      	ldr	r3, [pc, #388]	; (8004120 <HAL_RCC_OscConfig+0x7c4>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e0b7      	b.n	8004118 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003fa8:	4b5d      	ldr	r3, [pc, #372]	; (8004120 <HAL_RCC_OscConfig+0x7c4>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a5c      	ldr	r2, [pc, #368]	; (8004120 <HAL_RCC_OscConfig+0x7c4>)
 8003fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fb2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fb4:	f7fe f9e0 	bl	8002378 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fbc:	f7fe f9dc 	bl	8002378 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e0a4      	b.n	8004118 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fce:	4b54      	ldr	r3, [pc, #336]	; (8004120 <HAL_RCC_OscConfig+0x7c4>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1f0      	bne.n	8003fbc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fda:	4b51      	ldr	r3, [pc, #324]	; (8004120 <HAL_RCC_OscConfig+0x7c4>)
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	4b51      	ldr	r3, [pc, #324]	; (8004124 <HAL_RCC_OscConfig+0x7c8>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003fea:	3a01      	subs	r2, #1
 8003fec:	0112      	lsls	r2, r2, #4
 8003fee:	4311      	orrs	r1, r2
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ff4:	0212      	lsls	r2, r2, #8
 8003ff6:	4311      	orrs	r1, r2
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ffc:	0852      	lsrs	r2, r2, #1
 8003ffe:	3a01      	subs	r2, #1
 8004000:	0552      	lsls	r2, r2, #21
 8004002:	4311      	orrs	r1, r2
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004008:	0852      	lsrs	r2, r2, #1
 800400a:	3a01      	subs	r2, #1
 800400c:	0652      	lsls	r2, r2, #25
 800400e:	4311      	orrs	r1, r2
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004014:	0912      	lsrs	r2, r2, #4
 8004016:	0452      	lsls	r2, r2, #17
 8004018:	430a      	orrs	r2, r1
 800401a:	4941      	ldr	r1, [pc, #260]	; (8004120 <HAL_RCC_OscConfig+0x7c4>)
 800401c:	4313      	orrs	r3, r2
 800401e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004020:	4b3f      	ldr	r3, [pc, #252]	; (8004120 <HAL_RCC_OscConfig+0x7c4>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a3e      	ldr	r2, [pc, #248]	; (8004120 <HAL_RCC_OscConfig+0x7c4>)
 8004026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800402a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800402c:	4b3c      	ldr	r3, [pc, #240]	; (8004120 <HAL_RCC_OscConfig+0x7c4>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	4a3b      	ldr	r2, [pc, #236]	; (8004120 <HAL_RCC_OscConfig+0x7c4>)
 8004032:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004036:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004038:	f7fe f99e 	bl	8002378 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004040:	f7fe f99a 	bl	8002378 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e062      	b.n	8004118 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004052:	4b33      	ldr	r3, [pc, #204]	; (8004120 <HAL_RCC_OscConfig+0x7c4>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0f0      	beq.n	8004040 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800405e:	e05a      	b.n	8004116 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e059      	b.n	8004118 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004064:	4b2e      	ldr	r3, [pc, #184]	; (8004120 <HAL_RCC_OscConfig+0x7c4>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d152      	bne.n	8004116 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004070:	4b2b      	ldr	r3, [pc, #172]	; (8004120 <HAL_RCC_OscConfig+0x7c4>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a2a      	ldr	r2, [pc, #168]	; (8004120 <HAL_RCC_OscConfig+0x7c4>)
 8004076:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800407a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800407c:	4b28      	ldr	r3, [pc, #160]	; (8004120 <HAL_RCC_OscConfig+0x7c4>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	4a27      	ldr	r2, [pc, #156]	; (8004120 <HAL_RCC_OscConfig+0x7c4>)
 8004082:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004086:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004088:	f7fe f976 	bl	8002378 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004090:	f7fe f972 	bl	8002378 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e03a      	b.n	8004118 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a2:	4b1f      	ldr	r3, [pc, #124]	; (8004120 <HAL_RCC_OscConfig+0x7c4>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0f0      	beq.n	8004090 <HAL_RCC_OscConfig+0x734>
 80040ae:	e032      	b.n	8004116 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	2b0c      	cmp	r3, #12
 80040b4:	d02d      	beq.n	8004112 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b6:	4b1a      	ldr	r3, [pc, #104]	; (8004120 <HAL_RCC_OscConfig+0x7c4>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a19      	ldr	r2, [pc, #100]	; (8004120 <HAL_RCC_OscConfig+0x7c4>)
 80040bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040c0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80040c2:	4b17      	ldr	r3, [pc, #92]	; (8004120 <HAL_RCC_OscConfig+0x7c4>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d105      	bne.n	80040da <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80040ce:	4b14      	ldr	r3, [pc, #80]	; (8004120 <HAL_RCC_OscConfig+0x7c4>)
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	4a13      	ldr	r2, [pc, #76]	; (8004120 <HAL_RCC_OscConfig+0x7c4>)
 80040d4:	f023 0303 	bic.w	r3, r3, #3
 80040d8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80040da:	4b11      	ldr	r3, [pc, #68]	; (8004120 <HAL_RCC_OscConfig+0x7c4>)
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	4a10      	ldr	r2, [pc, #64]	; (8004120 <HAL_RCC_OscConfig+0x7c4>)
 80040e0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80040e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040e8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ea:	f7fe f945 	bl	8002378 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f2:	f7fe f941 	bl	8002378 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e009      	b.n	8004118 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004104:	4b06      	ldr	r3, [pc, #24]	; (8004120 <HAL_RCC_OscConfig+0x7c4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1f0      	bne.n	80040f2 <HAL_RCC_OscConfig+0x796>
 8004110:	e001      	b.n	8004116 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3720      	adds	r7, #32
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40021000 	.word	0x40021000
 8004124:	f99d808c 	.word	0xf99d808c

08004128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e0c8      	b.n	80042ce <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800413c:	4b66      	ldr	r3, [pc, #408]	; (80042d8 <HAL_RCC_ClockConfig+0x1b0>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d910      	bls.n	800416c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414a:	4b63      	ldr	r3, [pc, #396]	; (80042d8 <HAL_RCC_ClockConfig+0x1b0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f023 0207 	bic.w	r2, r3, #7
 8004152:	4961      	ldr	r1, [pc, #388]	; (80042d8 <HAL_RCC_ClockConfig+0x1b0>)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	4313      	orrs	r3, r2
 8004158:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800415a:	4b5f      	ldr	r3, [pc, #380]	; (80042d8 <HAL_RCC_ClockConfig+0x1b0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d001      	beq.n	800416c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e0b0      	b.n	80042ce <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b00      	cmp	r3, #0
 8004176:	d04c      	beq.n	8004212 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	2b03      	cmp	r3, #3
 800417e:	d107      	bne.n	8004190 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004180:	4b56      	ldr	r3, [pc, #344]	; (80042dc <HAL_RCC_ClockConfig+0x1b4>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d121      	bne.n	80041d0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e09e      	b.n	80042ce <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2b02      	cmp	r3, #2
 8004196:	d107      	bne.n	80041a8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004198:	4b50      	ldr	r3, [pc, #320]	; (80042dc <HAL_RCC_ClockConfig+0x1b4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d115      	bne.n	80041d0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e092      	b.n	80042ce <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d107      	bne.n	80041c0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041b0:	4b4a      	ldr	r3, [pc, #296]	; (80042dc <HAL_RCC_ClockConfig+0x1b4>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d109      	bne.n	80041d0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e086      	b.n	80042ce <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041c0:	4b46      	ldr	r3, [pc, #280]	; (80042dc <HAL_RCC_ClockConfig+0x1b4>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e07e      	b.n	80042ce <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041d0:	4b42      	ldr	r3, [pc, #264]	; (80042dc <HAL_RCC_ClockConfig+0x1b4>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f023 0203 	bic.w	r2, r3, #3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	493f      	ldr	r1, [pc, #252]	; (80042dc <HAL_RCC_ClockConfig+0x1b4>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041e2:	f7fe f8c9 	bl	8002378 <HAL_GetTick>
 80041e6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e8:	e00a      	b.n	8004200 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ea:	f7fe f8c5 	bl	8002378 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e066      	b.n	80042ce <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004200:	4b36      	ldr	r3, [pc, #216]	; (80042dc <HAL_RCC_ClockConfig+0x1b4>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f003 020c 	and.w	r2, r3, #12
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	429a      	cmp	r2, r3
 8004210:	d1eb      	bne.n	80041ea <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d008      	beq.n	8004230 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800421e:	4b2f      	ldr	r3, [pc, #188]	; (80042dc <HAL_RCC_ClockConfig+0x1b4>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	492c      	ldr	r1, [pc, #176]	; (80042dc <HAL_RCC_ClockConfig+0x1b4>)
 800422c:	4313      	orrs	r3, r2
 800422e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004230:	4b29      	ldr	r3, [pc, #164]	; (80042d8 <HAL_RCC_ClockConfig+0x1b0>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d210      	bcs.n	8004260 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423e:	4b26      	ldr	r3, [pc, #152]	; (80042d8 <HAL_RCC_ClockConfig+0x1b0>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f023 0207 	bic.w	r2, r3, #7
 8004246:	4924      	ldr	r1, [pc, #144]	; (80042d8 <HAL_RCC_ClockConfig+0x1b0>)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	4313      	orrs	r3, r2
 800424c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800424e:	4b22      	ldr	r3, [pc, #136]	; (80042d8 <HAL_RCC_ClockConfig+0x1b0>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d001      	beq.n	8004260 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e036      	b.n	80042ce <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d008      	beq.n	800427e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800426c:	4b1b      	ldr	r3, [pc, #108]	; (80042dc <HAL_RCC_ClockConfig+0x1b4>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	4918      	ldr	r1, [pc, #96]	; (80042dc <HAL_RCC_ClockConfig+0x1b4>)
 800427a:	4313      	orrs	r3, r2
 800427c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d009      	beq.n	800429e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800428a:	4b14      	ldr	r3, [pc, #80]	; (80042dc <HAL_RCC_ClockConfig+0x1b4>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	4910      	ldr	r1, [pc, #64]	; (80042dc <HAL_RCC_ClockConfig+0x1b4>)
 800429a:	4313      	orrs	r3, r2
 800429c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800429e:	f000 f825 	bl	80042ec <HAL_RCC_GetSysClockFreq>
 80042a2:	4602      	mov	r2, r0
 80042a4:	4b0d      	ldr	r3, [pc, #52]	; (80042dc <HAL_RCC_ClockConfig+0x1b4>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	091b      	lsrs	r3, r3, #4
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	490c      	ldr	r1, [pc, #48]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 80042b0:	5ccb      	ldrb	r3, [r1, r3]
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	fa22 f303 	lsr.w	r3, r2, r3
 80042ba:	4a0a      	ldr	r2, [pc, #40]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80042bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042be:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <HAL_RCC_ClockConfig+0x1c0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7fe f808 	bl	80022d8 <HAL_InitTick>
 80042c8:	4603      	mov	r3, r0
 80042ca:	72fb      	strb	r3, [r7, #11]

  return status;
 80042cc:	7afb      	ldrb	r3, [r7, #11]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40022000 	.word	0x40022000
 80042dc:	40021000 	.word	0x40021000
 80042e0:	08008ef4 	.word	0x08008ef4
 80042e4:	20000018 	.word	0x20000018
 80042e8:	2000001c 	.word	0x2000001c

080042ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b089      	sub	sp, #36	; 0x24
 80042f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	61fb      	str	r3, [r7, #28]
 80042f6:	2300      	movs	r3, #0
 80042f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042fa:	4b3e      	ldr	r3, [pc, #248]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 030c 	and.w	r3, r3, #12
 8004302:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004304:	4b3b      	ldr	r3, [pc, #236]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f003 0303 	and.w	r3, r3, #3
 800430c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <HAL_RCC_GetSysClockFreq+0x34>
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	2b0c      	cmp	r3, #12
 8004318:	d121      	bne.n	800435e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d11e      	bne.n	800435e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004320:	4b34      	ldr	r3, [pc, #208]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	2b00      	cmp	r3, #0
 800432a:	d107      	bne.n	800433c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800432c:	4b31      	ldr	r3, [pc, #196]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800432e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004332:	0a1b      	lsrs	r3, r3, #8
 8004334:	f003 030f 	and.w	r3, r3, #15
 8004338:	61fb      	str	r3, [r7, #28]
 800433a:	e005      	b.n	8004348 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800433c:	4b2d      	ldr	r3, [pc, #180]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	091b      	lsrs	r3, r3, #4
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004348:	4a2b      	ldr	r2, [pc, #172]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004350:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10d      	bne.n	8004374 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800435c:	e00a      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	2b04      	cmp	r3, #4
 8004362:	d102      	bne.n	800436a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004364:	4b25      	ldr	r3, [pc, #148]	; (80043fc <HAL_RCC_GetSysClockFreq+0x110>)
 8004366:	61bb      	str	r3, [r7, #24]
 8004368:	e004      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	2b08      	cmp	r3, #8
 800436e:	d101      	bne.n	8004374 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004370:	4b23      	ldr	r3, [pc, #140]	; (8004400 <HAL_RCC_GetSysClockFreq+0x114>)
 8004372:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	2b0c      	cmp	r3, #12
 8004378:	d134      	bne.n	80043e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800437a:	4b1e      	ldr	r3, [pc, #120]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2b02      	cmp	r3, #2
 8004388:	d003      	beq.n	8004392 <HAL_RCC_GetSysClockFreq+0xa6>
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2b03      	cmp	r3, #3
 800438e:	d003      	beq.n	8004398 <HAL_RCC_GetSysClockFreq+0xac>
 8004390:	e005      	b.n	800439e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004392:	4b1a      	ldr	r3, [pc, #104]	; (80043fc <HAL_RCC_GetSysClockFreq+0x110>)
 8004394:	617b      	str	r3, [r7, #20]
      break;
 8004396:	e005      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004398:	4b19      	ldr	r3, [pc, #100]	; (8004400 <HAL_RCC_GetSysClockFreq+0x114>)
 800439a:	617b      	str	r3, [r7, #20]
      break;
 800439c:	e002      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	617b      	str	r3, [r7, #20]
      break;
 80043a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043a4:	4b13      	ldr	r3, [pc, #76]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	091b      	lsrs	r3, r3, #4
 80043aa:	f003 0307 	and.w	r3, r3, #7
 80043ae:	3301      	adds	r3, #1
 80043b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043b2:	4b10      	ldr	r3, [pc, #64]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	0a1b      	lsrs	r3, r3, #8
 80043b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	fb02 f203 	mul.w	r2, r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043ca:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	0e5b      	lsrs	r3, r3, #25
 80043d0:	f003 0303 	and.w	r3, r3, #3
 80043d4:	3301      	adds	r3, #1
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043e4:	69bb      	ldr	r3, [r7, #24]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3724      	adds	r7, #36	; 0x24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	40021000 	.word	0x40021000
 80043f8:	08008f0c 	.word	0x08008f0c
 80043fc:	00f42400 	.word	0x00f42400
 8004400:	007a1200 	.word	0x007a1200

08004404 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004408:	4b03      	ldr	r3, [pc, #12]	; (8004418 <HAL_RCC_GetHCLKFreq+0x14>)
 800440a:	681b      	ldr	r3, [r3, #0]
}
 800440c:	4618      	mov	r0, r3
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	20000018 	.word	0x20000018

0800441c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004420:	f7ff fff0 	bl	8004404 <HAL_RCC_GetHCLKFreq>
 8004424:	4602      	mov	r2, r0
 8004426:	4b06      	ldr	r3, [pc, #24]	; (8004440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	0a1b      	lsrs	r3, r3, #8
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	4904      	ldr	r1, [pc, #16]	; (8004444 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004432:	5ccb      	ldrb	r3, [r1, r3]
 8004434:	f003 031f 	and.w	r3, r3, #31
 8004438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800443c:	4618      	mov	r0, r3
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40021000 	.word	0x40021000
 8004444:	08008f04 	.word	0x08008f04

08004448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800444c:	f7ff ffda 	bl	8004404 <HAL_RCC_GetHCLKFreq>
 8004450:	4602      	mov	r2, r0
 8004452:	4b06      	ldr	r3, [pc, #24]	; (800446c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	0adb      	lsrs	r3, r3, #11
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	4904      	ldr	r1, [pc, #16]	; (8004470 <HAL_RCC_GetPCLK2Freq+0x28>)
 800445e:	5ccb      	ldrb	r3, [r1, r3]
 8004460:	f003 031f 	and.w	r3, r3, #31
 8004464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004468:	4618      	mov	r0, r3
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40021000 	.word	0x40021000
 8004470:	08008f04 	.word	0x08008f04

08004474 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800447c:	2300      	movs	r3, #0
 800447e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004480:	4b2a      	ldr	r3, [pc, #168]	; (800452c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800448c:	f7ff fa02 	bl	8003894 <HAL_PWREx_GetVoltageRange>
 8004490:	6178      	str	r0, [r7, #20]
 8004492:	e014      	b.n	80044be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004494:	4b25      	ldr	r3, [pc, #148]	; (800452c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004498:	4a24      	ldr	r2, [pc, #144]	; (800452c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800449a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800449e:	6593      	str	r3, [r2, #88]	; 0x58
 80044a0:	4b22      	ldr	r3, [pc, #136]	; (800452c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044ac:	f7ff f9f2 	bl	8003894 <HAL_PWREx_GetVoltageRange>
 80044b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044b2:	4b1e      	ldr	r3, [pc, #120]	; (800452c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b6:	4a1d      	ldr	r2, [pc, #116]	; (800452c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044c4:	d10b      	bne.n	80044de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b80      	cmp	r3, #128	; 0x80
 80044ca:	d919      	bls.n	8004500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2ba0      	cmp	r3, #160	; 0xa0
 80044d0:	d902      	bls.n	80044d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044d2:	2302      	movs	r3, #2
 80044d4:	613b      	str	r3, [r7, #16]
 80044d6:	e013      	b.n	8004500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044d8:	2301      	movs	r3, #1
 80044da:	613b      	str	r3, [r7, #16]
 80044dc:	e010      	b.n	8004500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b80      	cmp	r3, #128	; 0x80
 80044e2:	d902      	bls.n	80044ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80044e4:	2303      	movs	r3, #3
 80044e6:	613b      	str	r3, [r7, #16]
 80044e8:	e00a      	b.n	8004500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b80      	cmp	r3, #128	; 0x80
 80044ee:	d102      	bne.n	80044f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044f0:	2302      	movs	r3, #2
 80044f2:	613b      	str	r3, [r7, #16]
 80044f4:	e004      	b.n	8004500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b70      	cmp	r3, #112	; 0x70
 80044fa:	d101      	bne.n	8004500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044fc:	2301      	movs	r3, #1
 80044fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004500:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f023 0207 	bic.w	r2, r3, #7
 8004508:	4909      	ldr	r1, [pc, #36]	; (8004530 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	4313      	orrs	r3, r2
 800450e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004510:	4b07      	ldr	r3, [pc, #28]	; (8004530 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	429a      	cmp	r2, r3
 800451c:	d001      	beq.n	8004522 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e000      	b.n	8004524 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40021000 	.word	0x40021000
 8004530:	40022000 	.word	0x40022000

08004534 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800453c:	2300      	movs	r3, #0
 800453e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004540:	2300      	movs	r3, #0
 8004542:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800454c:	2b00      	cmp	r3, #0
 800454e:	d041      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004554:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004558:	d02a      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800455a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800455e:	d824      	bhi.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004560:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004564:	d008      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004566:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800456a:	d81e      	bhi.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00a      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004570:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004574:	d010      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004576:	e018      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004578:	4b86      	ldr	r3, [pc, #536]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	4a85      	ldr	r2, [pc, #532]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800457e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004582:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004584:	e015      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3304      	adds	r3, #4
 800458a:	2100      	movs	r1, #0
 800458c:	4618      	mov	r0, r3
 800458e:	f000 fabb 	bl	8004b08 <RCCEx_PLLSAI1_Config>
 8004592:	4603      	mov	r3, r0
 8004594:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004596:	e00c      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3320      	adds	r3, #32
 800459c:	2100      	movs	r1, #0
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 fba6 	bl	8004cf0 <RCCEx_PLLSAI2_Config>
 80045a4:	4603      	mov	r3, r0
 80045a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045a8:	e003      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	74fb      	strb	r3, [r7, #19]
      break;
 80045ae:	e000      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80045b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045b2:	7cfb      	ldrb	r3, [r7, #19]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10b      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045b8:	4b76      	ldr	r3, [pc, #472]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045c6:	4973      	ldr	r1, [pc, #460]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045ce:	e001      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d0:	7cfb      	ldrb	r3, [r7, #19]
 80045d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d041      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80045e8:	d02a      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80045ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80045ee:	d824      	bhi.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045f4:	d008      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80045f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045fa:	d81e      	bhi.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00a      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004604:	d010      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004606:	e018      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004608:	4b62      	ldr	r3, [pc, #392]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	4a61      	ldr	r2, [pc, #388]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800460e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004612:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004614:	e015      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	3304      	adds	r3, #4
 800461a:	2100      	movs	r1, #0
 800461c:	4618      	mov	r0, r3
 800461e:	f000 fa73 	bl	8004b08 <RCCEx_PLLSAI1_Config>
 8004622:	4603      	mov	r3, r0
 8004624:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004626:	e00c      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3320      	adds	r3, #32
 800462c:	2100      	movs	r1, #0
 800462e:	4618      	mov	r0, r3
 8004630:	f000 fb5e 	bl	8004cf0 <RCCEx_PLLSAI2_Config>
 8004634:	4603      	mov	r3, r0
 8004636:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004638:	e003      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	74fb      	strb	r3, [r7, #19]
      break;
 800463e:	e000      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004640:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004642:	7cfb      	ldrb	r3, [r7, #19]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10b      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004648:	4b52      	ldr	r3, [pc, #328]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800464a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004656:	494f      	ldr	r1, [pc, #316]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800465e:	e001      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004660:	7cfb      	ldrb	r3, [r7, #19]
 8004662:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 80a0 	beq.w	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004672:	2300      	movs	r3, #0
 8004674:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004676:	4b47      	ldr	r3, [pc, #284]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004686:	2300      	movs	r3, #0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00d      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800468c:	4b41      	ldr	r3, [pc, #260]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800468e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004690:	4a40      	ldr	r2, [pc, #256]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004696:	6593      	str	r3, [r2, #88]	; 0x58
 8004698:	4b3e      	ldr	r3, [pc, #248]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800469a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a0:	60bb      	str	r3, [r7, #8]
 80046a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046a4:	2301      	movs	r3, #1
 80046a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046a8:	4b3b      	ldr	r3, [pc, #236]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a3a      	ldr	r2, [pc, #232]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046b4:	f7fd fe60 	bl	8002378 <HAL_GetTick>
 80046b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046ba:	e009      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046bc:	f7fd fe5c 	bl	8002378 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d902      	bls.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	74fb      	strb	r3, [r7, #19]
        break;
 80046ce:	e005      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046d0:	4b31      	ldr	r3, [pc, #196]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0ef      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80046dc:	7cfb      	ldrb	r3, [r7, #19]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d15c      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046e2:	4b2c      	ldr	r3, [pc, #176]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d01f      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d019      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004700:	4b24      	ldr	r3, [pc, #144]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800470a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800470c:	4b21      	ldr	r3, [pc, #132]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800470e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004712:	4a20      	ldr	r2, [pc, #128]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800471c:	4b1d      	ldr	r3, [pc, #116]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800471e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004722:	4a1c      	ldr	r2, [pc, #112]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800472c:	4a19      	ldr	r2, [pc, #100]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d016      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473e:	f7fd fe1b 	bl	8002378 <HAL_GetTick>
 8004742:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004744:	e00b      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004746:	f7fd fe17 	bl	8002378 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	f241 3288 	movw	r2, #5000	; 0x1388
 8004754:	4293      	cmp	r3, r2
 8004756:	d902      	bls.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	74fb      	strb	r3, [r7, #19]
            break;
 800475c:	e006      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800475e:	4b0d      	ldr	r3, [pc, #52]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0ec      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800476c:	7cfb      	ldrb	r3, [r7, #19]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10c      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004772:	4b08      	ldr	r3, [pc, #32]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004778:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004782:	4904      	ldr	r1, [pc, #16]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800478a:	e009      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800478c:	7cfb      	ldrb	r3, [r7, #19]
 800478e:	74bb      	strb	r3, [r7, #18]
 8004790:	e006      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004792:	bf00      	nop
 8004794:	40021000 	.word	0x40021000
 8004798:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800479c:	7cfb      	ldrb	r3, [r7, #19]
 800479e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047a0:	7c7b      	ldrb	r3, [r7, #17]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d105      	bne.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047a6:	4b9e      	ldr	r3, [pc, #632]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047aa:	4a9d      	ldr	r2, [pc, #628]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047be:	4b98      	ldr	r3, [pc, #608]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c4:	f023 0203 	bic.w	r2, r3, #3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047cc:	4994      	ldr	r1, [pc, #592]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047e0:	4b8f      	ldr	r3, [pc, #572]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e6:	f023 020c 	bic.w	r2, r3, #12
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ee:	498c      	ldr	r1, [pc, #560]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004802:	4b87      	ldr	r3, [pc, #540]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004808:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004810:	4983      	ldr	r1, [pc, #524]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0308 	and.w	r3, r3, #8
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00a      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004824:	4b7e      	ldr	r3, [pc, #504]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004832:	497b      	ldr	r1, [pc, #492]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0310 	and.w	r3, r3, #16
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004846:	4b76      	ldr	r3, [pc, #472]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004854:	4972      	ldr	r1, [pc, #456]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0320 	and.w	r3, r3, #32
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00a      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004868:	4b6d      	ldr	r3, [pc, #436]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800486a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004876:	496a      	ldr	r1, [pc, #424]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004878:	4313      	orrs	r3, r2
 800487a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800488a:	4b65      	ldr	r3, [pc, #404]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800488c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004890:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004898:	4961      	ldr	r1, [pc, #388]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489a:	4313      	orrs	r3, r2
 800489c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00a      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048ac:	4b5c      	ldr	r3, [pc, #368]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ba:	4959      	ldr	r1, [pc, #356]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00a      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048ce:	4b54      	ldr	r3, [pc, #336]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048dc:	4950      	ldr	r1, [pc, #320]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00a      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048f0:	4b4b      	ldr	r3, [pc, #300]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fe:	4948      	ldr	r1, [pc, #288]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004900:	4313      	orrs	r3, r2
 8004902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004912:	4b43      	ldr	r3, [pc, #268]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004918:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004920:	493f      	ldr	r1, [pc, #252]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d028      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004934:	4b3a      	ldr	r3, [pc, #232]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004942:	4937      	ldr	r1, [pc, #220]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004944:	4313      	orrs	r3, r2
 8004946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800494e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004952:	d106      	bne.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004954:	4b32      	ldr	r3, [pc, #200]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	4a31      	ldr	r2, [pc, #196]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800495e:	60d3      	str	r3, [r2, #12]
 8004960:	e011      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004966:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800496a:	d10c      	bne.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3304      	adds	r3, #4
 8004970:	2101      	movs	r1, #1
 8004972:	4618      	mov	r0, r3
 8004974:	f000 f8c8 	bl	8004b08 <RCCEx_PLLSAI1_Config>
 8004978:	4603      	mov	r3, r0
 800497a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800497c:	7cfb      	ldrb	r3, [r7, #19]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004982:	7cfb      	ldrb	r3, [r7, #19]
 8004984:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d028      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004992:	4b23      	ldr	r3, [pc, #140]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004998:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a0:	491f      	ldr	r1, [pc, #124]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049b0:	d106      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049b2:	4b1b      	ldr	r3, [pc, #108]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	4a1a      	ldr	r2, [pc, #104]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049bc:	60d3      	str	r3, [r2, #12]
 80049be:	e011      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049c8:	d10c      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	3304      	adds	r3, #4
 80049ce:	2101      	movs	r1, #1
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 f899 	bl	8004b08 <RCCEx_PLLSAI1_Config>
 80049d6:	4603      	mov	r3, r0
 80049d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049da:	7cfb      	ldrb	r3, [r7, #19]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80049e0:	7cfb      	ldrb	r3, [r7, #19]
 80049e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d02b      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049f0:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049fe:	4908      	ldr	r1, [pc, #32]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a0e:	d109      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a10:	4b03      	ldr	r3, [pc, #12]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	4a02      	ldr	r2, [pc, #8]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a1a:	60d3      	str	r3, [r2, #12]
 8004a1c:	e014      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004a1e:	bf00      	nop
 8004a20:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a2c:	d10c      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	3304      	adds	r3, #4
 8004a32:	2101      	movs	r1, #1
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 f867 	bl	8004b08 <RCCEx_PLLSAI1_Config>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a3e:	7cfb      	ldrb	r3, [r7, #19]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004a44:	7cfb      	ldrb	r3, [r7, #19]
 8004a46:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d02f      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a54:	4b2b      	ldr	r3, [pc, #172]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a62:	4928      	ldr	r1, [pc, #160]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a72:	d10d      	bne.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3304      	adds	r3, #4
 8004a78:	2102      	movs	r1, #2
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 f844 	bl	8004b08 <RCCEx_PLLSAI1_Config>
 8004a80:	4603      	mov	r3, r0
 8004a82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a84:	7cfb      	ldrb	r3, [r7, #19]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d014      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a8a:	7cfb      	ldrb	r3, [r7, #19]
 8004a8c:	74bb      	strb	r3, [r7, #18]
 8004a8e:	e011      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a98:	d10c      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	3320      	adds	r3, #32
 8004a9e:	2102      	movs	r1, #2
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 f925 	bl	8004cf0 <RCCEx_PLLSAI2_Config>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004aaa:	7cfb      	ldrb	r3, [r7, #19]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004ab0:	7cfb      	ldrb	r3, [r7, #19]
 8004ab2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ac0:	4b10      	ldr	r3, [pc, #64]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ace:	490d      	ldr	r1, [pc, #52]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00b      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ae2:	4b08      	ldr	r3, [pc, #32]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004af2:	4904      	ldr	r1, [pc, #16]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004afa:	7cbb      	ldrb	r3, [r7, #18]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3718      	adds	r7, #24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40021000 	.word	0x40021000

08004b08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b16:	4b75      	ldr	r3, [pc, #468]	; (8004cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d018      	beq.n	8004b54 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b22:	4b72      	ldr	r3, [pc, #456]	; (8004cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f003 0203 	and.w	r2, r3, #3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d10d      	bne.n	8004b4e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
       ||
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d009      	beq.n	8004b4e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b3a:	4b6c      	ldr	r3, [pc, #432]	; (8004cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	091b      	lsrs	r3, r3, #4
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	1c5a      	adds	r2, r3, #1
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
       ||
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d047      	beq.n	8004bde <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	73fb      	strb	r3, [r7, #15]
 8004b52:	e044      	b.n	8004bde <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d018      	beq.n	8004b8e <RCCEx_PLLSAI1_Config+0x86>
 8004b5c:	2b03      	cmp	r3, #3
 8004b5e:	d825      	bhi.n	8004bac <RCCEx_PLLSAI1_Config+0xa4>
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d002      	beq.n	8004b6a <RCCEx_PLLSAI1_Config+0x62>
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d009      	beq.n	8004b7c <RCCEx_PLLSAI1_Config+0x74>
 8004b68:	e020      	b.n	8004bac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b6a:	4b60      	ldr	r3, [pc, #384]	; (8004cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d11d      	bne.n	8004bb2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b7a:	e01a      	b.n	8004bb2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b7c:	4b5b      	ldr	r3, [pc, #364]	; (8004cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d116      	bne.n	8004bb6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b8c:	e013      	b.n	8004bb6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b8e:	4b57      	ldr	r3, [pc, #348]	; (8004cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10f      	bne.n	8004bba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b9a:	4b54      	ldr	r3, [pc, #336]	; (8004cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d109      	bne.n	8004bba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004baa:	e006      	b.n	8004bba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	73fb      	strb	r3, [r7, #15]
      break;
 8004bb0:	e004      	b.n	8004bbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bb2:	bf00      	nop
 8004bb4:	e002      	b.n	8004bbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bb6:	bf00      	nop
 8004bb8:	e000      	b.n	8004bbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bba:	bf00      	nop
    }

    if(status == HAL_OK)
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10d      	bne.n	8004bde <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004bc2:	4b4a      	ldr	r3, [pc, #296]	; (8004cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6819      	ldr	r1, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	430b      	orrs	r3, r1
 8004bd8:	4944      	ldr	r1, [pc, #272]	; (8004cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bde:	7bfb      	ldrb	r3, [r7, #15]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d17d      	bne.n	8004ce0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004be4:	4b41      	ldr	r3, [pc, #260]	; (8004cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a40      	ldr	r2, [pc, #256]	; (8004cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bf0:	f7fd fbc2 	bl	8002378 <HAL_GetTick>
 8004bf4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bf6:	e009      	b.n	8004c0c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bf8:	f7fd fbbe 	bl	8002378 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d902      	bls.n	8004c0c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	73fb      	strb	r3, [r7, #15]
        break;
 8004c0a:	e005      	b.n	8004c18 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c0c:	4b37      	ldr	r3, [pc, #220]	; (8004cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1ef      	bne.n	8004bf8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d160      	bne.n	8004ce0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d111      	bne.n	8004c48 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c24:	4b31      	ldr	r3, [pc, #196]	; (8004cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6892      	ldr	r2, [r2, #8]
 8004c34:	0211      	lsls	r1, r2, #8
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	68d2      	ldr	r2, [r2, #12]
 8004c3a:	0912      	lsrs	r2, r2, #4
 8004c3c:	0452      	lsls	r2, r2, #17
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	492a      	ldr	r1, [pc, #168]	; (8004cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	610b      	str	r3, [r1, #16]
 8004c46:	e027      	b.n	8004c98 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d112      	bne.n	8004c74 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c4e:	4b27      	ldr	r3, [pc, #156]	; (8004cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004c56:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6892      	ldr	r2, [r2, #8]
 8004c5e:	0211      	lsls	r1, r2, #8
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	6912      	ldr	r2, [r2, #16]
 8004c64:	0852      	lsrs	r2, r2, #1
 8004c66:	3a01      	subs	r2, #1
 8004c68:	0552      	lsls	r2, r2, #21
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	491f      	ldr	r1, [pc, #124]	; (8004cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	610b      	str	r3, [r1, #16]
 8004c72:	e011      	b.n	8004c98 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c74:	4b1d      	ldr	r3, [pc, #116]	; (8004cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	6892      	ldr	r2, [r2, #8]
 8004c84:	0211      	lsls	r1, r2, #8
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6952      	ldr	r2, [r2, #20]
 8004c8a:	0852      	lsrs	r2, r2, #1
 8004c8c:	3a01      	subs	r2, #1
 8004c8e:	0652      	lsls	r2, r2, #25
 8004c90:	430a      	orrs	r2, r1
 8004c92:	4916      	ldr	r1, [pc, #88]	; (8004cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c98:	4b14      	ldr	r3, [pc, #80]	; (8004cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a13      	ldr	r2, [pc, #76]	; (8004cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ca2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca4:	f7fd fb68 	bl	8002378 <HAL_GetTick>
 8004ca8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004caa:	e009      	b.n	8004cc0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cac:	f7fd fb64 	bl	8002378 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d902      	bls.n	8004cc0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	73fb      	strb	r3, [r7, #15]
          break;
 8004cbe:	e005      	b.n	8004ccc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cc0:	4b0a      	ldr	r3, [pc, #40]	; (8004cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0ef      	beq.n	8004cac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d106      	bne.n	8004ce0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004cd2:	4b06      	ldr	r3, [pc, #24]	; (8004cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd4:	691a      	ldr	r2, [r3, #16]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	4904      	ldr	r1, [pc, #16]	; (8004cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	40021000 	.word	0x40021000

08004cf0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cfe:	4b6a      	ldr	r3, [pc, #424]	; (8004ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f003 0303 	and.w	r3, r3, #3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d018      	beq.n	8004d3c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d0a:	4b67      	ldr	r3, [pc, #412]	; (8004ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f003 0203 	and.w	r2, r3, #3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d10d      	bne.n	8004d36 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
       ||
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d009      	beq.n	8004d36 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004d22:	4b61      	ldr	r3, [pc, #388]	; (8004ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	091b      	lsrs	r3, r3, #4
 8004d28:	f003 0307 	and.w	r3, r3, #7
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
       ||
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d047      	beq.n	8004dc6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	73fb      	strb	r3, [r7, #15]
 8004d3a:	e044      	b.n	8004dc6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b03      	cmp	r3, #3
 8004d42:	d018      	beq.n	8004d76 <RCCEx_PLLSAI2_Config+0x86>
 8004d44:	2b03      	cmp	r3, #3
 8004d46:	d825      	bhi.n	8004d94 <RCCEx_PLLSAI2_Config+0xa4>
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d002      	beq.n	8004d52 <RCCEx_PLLSAI2_Config+0x62>
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d009      	beq.n	8004d64 <RCCEx_PLLSAI2_Config+0x74>
 8004d50:	e020      	b.n	8004d94 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d52:	4b55      	ldr	r3, [pc, #340]	; (8004ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d11d      	bne.n	8004d9a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d62:	e01a      	b.n	8004d9a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d64:	4b50      	ldr	r3, [pc, #320]	; (8004ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d116      	bne.n	8004d9e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d74:	e013      	b.n	8004d9e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d76:	4b4c      	ldr	r3, [pc, #304]	; (8004ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10f      	bne.n	8004da2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d82:	4b49      	ldr	r3, [pc, #292]	; (8004ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d109      	bne.n	8004da2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d92:	e006      	b.n	8004da2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	73fb      	strb	r3, [r7, #15]
      break;
 8004d98:	e004      	b.n	8004da4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d9a:	bf00      	nop
 8004d9c:	e002      	b.n	8004da4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d9e:	bf00      	nop
 8004da0:	e000      	b.n	8004da4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004da2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004da4:	7bfb      	ldrb	r3, [r7, #15]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10d      	bne.n	8004dc6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004daa:	4b3f      	ldr	r3, [pc, #252]	; (8004ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6819      	ldr	r1, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	011b      	lsls	r3, r3, #4
 8004dbe:	430b      	orrs	r3, r1
 8004dc0:	4939      	ldr	r1, [pc, #228]	; (8004ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004dc6:	7bfb      	ldrb	r3, [r7, #15]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d167      	bne.n	8004e9c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004dcc:	4b36      	ldr	r3, [pc, #216]	; (8004ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a35      	ldr	r2, [pc, #212]	; (8004ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dd8:	f7fd face 	bl	8002378 <HAL_GetTick>
 8004ddc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004dde:	e009      	b.n	8004df4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004de0:	f7fd faca 	bl	8002378 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d902      	bls.n	8004df4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	73fb      	strb	r3, [r7, #15]
        break;
 8004df2:	e005      	b.n	8004e00 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004df4:	4b2c      	ldr	r3, [pc, #176]	; (8004ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1ef      	bne.n	8004de0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e00:	7bfb      	ldrb	r3, [r7, #15]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d14a      	bne.n	8004e9c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d111      	bne.n	8004e30 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e0c:	4b26      	ldr	r3, [pc, #152]	; (8004ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6892      	ldr	r2, [r2, #8]
 8004e1c:	0211      	lsls	r1, r2, #8
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	68d2      	ldr	r2, [r2, #12]
 8004e22:	0912      	lsrs	r2, r2, #4
 8004e24:	0452      	lsls	r2, r2, #17
 8004e26:	430a      	orrs	r2, r1
 8004e28:	491f      	ldr	r1, [pc, #124]	; (8004ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	614b      	str	r3, [r1, #20]
 8004e2e:	e011      	b.n	8004e54 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e30:	4b1d      	ldr	r3, [pc, #116]	; (8004ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	6892      	ldr	r2, [r2, #8]
 8004e40:	0211      	lsls	r1, r2, #8
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6912      	ldr	r2, [r2, #16]
 8004e46:	0852      	lsrs	r2, r2, #1
 8004e48:	3a01      	subs	r2, #1
 8004e4a:	0652      	lsls	r2, r2, #25
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	4916      	ldr	r1, [pc, #88]	; (8004ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e54:	4b14      	ldr	r3, [pc, #80]	; (8004ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a13      	ldr	r2, [pc, #76]	; (8004ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e60:	f7fd fa8a 	bl	8002378 <HAL_GetTick>
 8004e64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e66:	e009      	b.n	8004e7c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e68:	f7fd fa86 	bl	8002378 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d902      	bls.n	8004e7c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	73fb      	strb	r3, [r7, #15]
          break;
 8004e7a:	e005      	b.n	8004e88 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d0ef      	beq.n	8004e68 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d106      	bne.n	8004e9c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e8e:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e90:	695a      	ldr	r2, [r3, #20]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	4904      	ldr	r1, [pc, #16]	; (8004ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	40021000 	.word	0x40021000

08004eac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e040      	b.n	8004f40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d106      	bne.n	8004ed4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7fd f906 	bl	80020e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2224      	movs	r2, #36	; 0x24
 8004ed8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 0201 	bic.w	r2, r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 fb26 	bl	800553c <UART_SetConfig>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d101      	bne.n	8004efa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e022      	b.n	8004f40 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d002      	beq.n	8004f08 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fda4 	bl	8005a50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689a      	ldr	r2, [r3, #8]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0201 	orr.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 fe2b 	bl	8005b94 <UART_CheckIdleState>
 8004f3e:	4603      	mov	r3, r0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3708      	adds	r7, #8
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08a      	sub	sp, #40	; 0x28
 8004f4c:	af02      	add	r7, sp, #8
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	603b      	str	r3, [r7, #0]
 8004f54:	4613      	mov	r3, r2
 8004f56:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f5c:	2b20      	cmp	r3, #32
 8004f5e:	f040 8082 	bne.w	8005066 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <HAL_UART_Transmit+0x26>
 8004f68:	88fb      	ldrh	r3, [r7, #6]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e07a      	b.n	8005068 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_UART_Transmit+0x38>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	e073      	b.n	8005068 <HAL_UART_Transmit+0x120>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2221      	movs	r2, #33	; 0x21
 8004f94:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f96:	f7fd f9ef 	bl	8002378 <HAL_GetTick>
 8004f9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	88fa      	ldrh	r2, [r7, #6]
 8004fa0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	88fa      	ldrh	r2, [r7, #6]
 8004fa8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb4:	d108      	bne.n	8004fc8 <HAL_UART_Transmit+0x80>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d104      	bne.n	8004fc8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	61bb      	str	r3, [r7, #24]
 8004fc6:	e003      	b.n	8004fd0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004fd8:	e02d      	b.n	8005036 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2180      	movs	r1, #128	; 0x80
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 fe1e 	bl	8005c26 <UART_WaitOnFlagUntilTimeout>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e039      	b.n	8005068 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10b      	bne.n	8005012 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	881a      	ldrh	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005006:	b292      	uxth	r2, r2
 8005008:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	3302      	adds	r3, #2
 800500e:	61bb      	str	r3, [r7, #24]
 8005010:	e008      	b.n	8005024 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	781a      	ldrb	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	b292      	uxth	r2, r2
 800501c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	3301      	adds	r3, #1
 8005022:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800502a:	b29b      	uxth	r3, r3
 800502c:	3b01      	subs	r3, #1
 800502e:	b29a      	uxth	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800503c:	b29b      	uxth	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1cb      	bne.n	8004fda <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2200      	movs	r2, #0
 800504a:	2140      	movs	r1, #64	; 0x40
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 fdea 	bl	8005c26 <UART_WaitOnFlagUntilTimeout>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e005      	b.n	8005068 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2220      	movs	r2, #32
 8005060:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	e000      	b.n	8005068 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005066:	2302      	movs	r3, #2
  }
}
 8005068:	4618      	mov	r0, r3
 800506a:	3720      	adds	r7, #32
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	4613      	mov	r3, r2
 800507c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005082:	2b20      	cmp	r3, #32
 8005084:	d131      	bne.n	80050ea <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <HAL_UART_Receive_IT+0x22>
 800508c:	88fb      	ldrh	r3, [r7, #6]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e02a      	b.n	80050ec <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800509c:	2b01      	cmp	r3, #1
 800509e:	d101      	bne.n	80050a4 <HAL_UART_Receive_IT+0x34>
 80050a0:	2302      	movs	r3, #2
 80050a2:	e023      	b.n	80050ec <HAL_UART_Receive_IT+0x7c>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a0f      	ldr	r2, [pc, #60]	; (80050f4 <HAL_UART_Receive_IT+0x84>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d00e      	beq.n	80050da <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d007      	beq.n	80050da <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80050d8:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80050da:	88fb      	ldrh	r3, [r7, #6]
 80050dc:	461a      	mov	r2, r3
 80050de:	68b9      	ldr	r1, [r7, #8]
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 fe1d 	bl	8005d20 <UART_Start_Receive_IT>
 80050e6:	4603      	mov	r3, r0
 80050e8:	e000      	b.n	80050ec <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 80050ea:	2302      	movs	r3, #2
  }
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40008000 	.word	0x40008000

080050f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b088      	sub	sp, #32
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005118:	69fa      	ldr	r2, [r7, #28]
 800511a:	f640 030f 	movw	r3, #2063	; 0x80f
 800511e:	4013      	ands	r3, r2
 8005120:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d113      	bne.n	8005150 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	f003 0320 	and.w	r3, r3, #32
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00e      	beq.n	8005150 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	f003 0320 	and.w	r3, r3, #32
 8005138:	2b00      	cmp	r3, #0
 800513a:	d009      	beq.n	8005150 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 81ce 	beq.w	80054e2 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	4798      	blx	r3
      }
      return;
 800514e:	e1c8      	b.n	80054e2 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	2b00      	cmp	r3, #0
 8005154:	f000 80e3 	beq.w	800531e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	2b00      	cmp	r3, #0
 8005160:	d105      	bne.n	800516e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	4ba6      	ldr	r3, [pc, #664]	; (8005400 <HAL_UART_IRQHandler+0x308>)
 8005166:	4013      	ands	r3, r2
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 80d8 	beq.w	800531e <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b00      	cmp	r3, #0
 8005176:	d010      	beq.n	800519a <HAL_UART_IRQHandler+0xa2>
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00b      	beq.n	800519a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2201      	movs	r2, #1
 8005188:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005190:	f043 0201 	orr.w	r2, r3, #1
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d010      	beq.n	80051c6 <HAL_UART_IRQHandler+0xce>
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00b      	beq.n	80051c6 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2202      	movs	r2, #2
 80051b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051bc:	f043 0204 	orr.w	r2, r3, #4
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d010      	beq.n	80051f2 <HAL_UART_IRQHandler+0xfa>
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00b      	beq.n	80051f2 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2204      	movs	r2, #4
 80051e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051e8:	f043 0202 	orr.w	r2, r3, #2
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	f003 0308 	and.w	r3, r3, #8
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d015      	beq.n	8005228 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	f003 0320 	and.w	r3, r3, #32
 8005202:	2b00      	cmp	r3, #0
 8005204:	d104      	bne.n	8005210 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00b      	beq.n	8005228 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2208      	movs	r2, #8
 8005216:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800521e:	f043 0208 	orr.w	r2, r3, #8
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800522e:	2b00      	cmp	r3, #0
 8005230:	d011      	beq.n	8005256 <HAL_UART_IRQHandler+0x15e>
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00c      	beq.n	8005256 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005244:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800524c:	f043 0220 	orr.w	r2, r3, #32
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 8142 	beq.w	80054e6 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	f003 0320 	and.w	r3, r3, #32
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00c      	beq.n	8005286 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	f003 0320 	and.w	r3, r3, #32
 8005272:	2b00      	cmp	r3, #0
 8005274:	d007      	beq.n	8005286 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800528c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005298:	2b40      	cmp	r3, #64	; 0x40
 800529a:	d004      	beq.n	80052a6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d031      	beq.n	800530a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 fdc2 	bl	8005e30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b6:	2b40      	cmp	r3, #64	; 0x40
 80052b8:	d123      	bne.n	8005302 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052c8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d013      	beq.n	80052fa <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d6:	4a4b      	ldr	r2, [pc, #300]	; (8005404 <HAL_UART_IRQHandler+0x30c>)
 80052d8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fd fbe3 	bl	8002aaa <HAL_DMA_Abort_IT>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d017      	beq.n	800531a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80052f4:	4610      	mov	r0, r2
 80052f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f8:	e00f      	b.n	800531a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f908 	bl	8005510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005300:	e00b      	b.n	800531a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f904 	bl	8005510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005308:	e007      	b.n	800531a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f900 	bl	8005510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005318:	e0e5      	b.n	80054e6 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800531a:	bf00      	nop
    return;
 800531c:	e0e3      	b.n	80054e6 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005322:	2b01      	cmp	r3, #1
 8005324:	f040 80a9 	bne.w	800547a <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	f003 0310 	and.w	r3, r3, #16
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 80a3 	beq.w	800547a <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	f003 0310 	and.w	r3, r3, #16
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 809d 	beq.w	800547a <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2210      	movs	r2, #16
 8005346:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005352:	2b40      	cmp	r3, #64	; 0x40
 8005354:	d158      	bne.n	8005408 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8005360:	893b      	ldrh	r3, [r7, #8]
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 80c1 	beq.w	80054ea <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800536e:	893a      	ldrh	r2, [r7, #8]
 8005370:	429a      	cmp	r2, r3
 8005372:	f080 80ba 	bcs.w	80054ea <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	893a      	ldrh	r2, [r7, #8]
 800537a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0320 	and.w	r3, r3, #32
 800538a:	2b00      	cmp	r3, #0
 800538c:	d12a      	bne.n	80053e4 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800539c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 0201 	bic.w	r2, r2, #1
 80053ac:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053bc:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2220      	movs	r2, #32
 80053c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 0210 	bic.w	r2, r2, #16
 80053d8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053de:	4618      	mov	r0, r3
 80053e0:	f7fd fb25 	bl	8002a2e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	4619      	mov	r1, r3
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f893 	bl	8005524 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80053fe:	e074      	b.n	80054ea <HAL_UART_IRQHandler+0x3f2>
 8005400:	04000120 	.word	0x04000120
 8005404:	08005e8f 	.word	0x08005e8f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005414:	b29b      	uxth	r3, r3
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005420:	b29b      	uxth	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d063      	beq.n	80054ee <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8005426:	897b      	ldrh	r3, [r7, #10]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d060      	beq.n	80054ee <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800543a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689a      	ldr	r2, [r3, #8]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 0201 	bic.w	r2, r2, #1
 800544a:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2220      	movs	r2, #32
 8005450:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 0210 	bic.w	r2, r2, #16
 800546c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800546e:	897b      	ldrh	r3, [r7, #10]
 8005470:	4619      	mov	r1, r3
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f856 	bl	8005524 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005478:	e039      	b.n	80054ee <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00d      	beq.n	80054a0 <HAL_UART_IRQHandler+0x3a8>
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d008      	beq.n	80054a0 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005496:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 fdff 	bl	800609c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800549e:	e029      	b.n	80054f4 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00d      	beq.n	80054c6 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d008      	beq.n	80054c6 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d01a      	beq.n	80054f2 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	4798      	blx	r3
    }
    return;
 80054c4:	e015      	b.n	80054f2 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d011      	beq.n	80054f4 <HAL_UART_IRQHandler+0x3fc>
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00c      	beq.n	80054f4 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 fced 	bl	8005eba <UART_EndTransmit_IT>
    return;
 80054e0:	e008      	b.n	80054f4 <HAL_UART_IRQHandler+0x3fc>
      return;
 80054e2:	bf00      	nop
 80054e4:	e006      	b.n	80054f4 <HAL_UART_IRQHandler+0x3fc>
    return;
 80054e6:	bf00      	nop
 80054e8:	e004      	b.n	80054f4 <HAL_UART_IRQHandler+0x3fc>
      return;
 80054ea:	bf00      	nop
 80054ec:	e002      	b.n	80054f4 <HAL_UART_IRQHandler+0x3fc>
      return;
 80054ee:	bf00      	nop
 80054f0:	e000      	b.n	80054f4 <HAL_UART_IRQHandler+0x3fc>
    return;
 80054f2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80054f4:	3720      	adds	r7, #32
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop

080054fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	460b      	mov	r3, r1
 800552e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800553c:	b5b0      	push	{r4, r5, r7, lr}
 800553e:	b088      	sub	sp, #32
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005544:	2300      	movs	r3, #0
 8005546:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	431a      	orrs	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	431a      	orrs	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	69db      	ldr	r3, [r3, #28]
 800555c:	4313      	orrs	r3, r2
 800555e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	4bad      	ldr	r3, [pc, #692]	; (800581c <UART_SetConfig+0x2e0>)
 8005568:	4013      	ands	r3, r2
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	6812      	ldr	r2, [r2, #0]
 800556e:	69f9      	ldr	r1, [r7, #28]
 8005570:	430b      	orrs	r3, r1
 8005572:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4aa2      	ldr	r2, [pc, #648]	; (8005820 <UART_SetConfig+0x2e4>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d004      	beq.n	80055a4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	69fa      	ldr	r2, [r7, #28]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	69fa      	ldr	r2, [r7, #28]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a99      	ldr	r2, [pc, #612]	; (8005824 <UART_SetConfig+0x2e8>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d121      	bne.n	8005606 <UART_SetConfig+0xca>
 80055c2:	4b99      	ldr	r3, [pc, #612]	; (8005828 <UART_SetConfig+0x2ec>)
 80055c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c8:	f003 0303 	and.w	r3, r3, #3
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d817      	bhi.n	8005600 <UART_SetConfig+0xc4>
 80055d0:	a201      	add	r2, pc, #4	; (adr r2, 80055d8 <UART_SetConfig+0x9c>)
 80055d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d6:	bf00      	nop
 80055d8:	080055e9 	.word	0x080055e9
 80055dc:	080055f5 	.word	0x080055f5
 80055e0:	080055ef 	.word	0x080055ef
 80055e4:	080055fb 	.word	0x080055fb
 80055e8:	2301      	movs	r3, #1
 80055ea:	76fb      	strb	r3, [r7, #27]
 80055ec:	e0e7      	b.n	80057be <UART_SetConfig+0x282>
 80055ee:	2302      	movs	r3, #2
 80055f0:	76fb      	strb	r3, [r7, #27]
 80055f2:	e0e4      	b.n	80057be <UART_SetConfig+0x282>
 80055f4:	2304      	movs	r3, #4
 80055f6:	76fb      	strb	r3, [r7, #27]
 80055f8:	e0e1      	b.n	80057be <UART_SetConfig+0x282>
 80055fa:	2308      	movs	r3, #8
 80055fc:	76fb      	strb	r3, [r7, #27]
 80055fe:	e0de      	b.n	80057be <UART_SetConfig+0x282>
 8005600:	2310      	movs	r3, #16
 8005602:	76fb      	strb	r3, [r7, #27]
 8005604:	e0db      	b.n	80057be <UART_SetConfig+0x282>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a88      	ldr	r2, [pc, #544]	; (800582c <UART_SetConfig+0x2f0>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d132      	bne.n	8005676 <UART_SetConfig+0x13a>
 8005610:	4b85      	ldr	r3, [pc, #532]	; (8005828 <UART_SetConfig+0x2ec>)
 8005612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005616:	f003 030c 	and.w	r3, r3, #12
 800561a:	2b0c      	cmp	r3, #12
 800561c:	d828      	bhi.n	8005670 <UART_SetConfig+0x134>
 800561e:	a201      	add	r2, pc, #4	; (adr r2, 8005624 <UART_SetConfig+0xe8>)
 8005620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005624:	08005659 	.word	0x08005659
 8005628:	08005671 	.word	0x08005671
 800562c:	08005671 	.word	0x08005671
 8005630:	08005671 	.word	0x08005671
 8005634:	08005665 	.word	0x08005665
 8005638:	08005671 	.word	0x08005671
 800563c:	08005671 	.word	0x08005671
 8005640:	08005671 	.word	0x08005671
 8005644:	0800565f 	.word	0x0800565f
 8005648:	08005671 	.word	0x08005671
 800564c:	08005671 	.word	0x08005671
 8005650:	08005671 	.word	0x08005671
 8005654:	0800566b 	.word	0x0800566b
 8005658:	2300      	movs	r3, #0
 800565a:	76fb      	strb	r3, [r7, #27]
 800565c:	e0af      	b.n	80057be <UART_SetConfig+0x282>
 800565e:	2302      	movs	r3, #2
 8005660:	76fb      	strb	r3, [r7, #27]
 8005662:	e0ac      	b.n	80057be <UART_SetConfig+0x282>
 8005664:	2304      	movs	r3, #4
 8005666:	76fb      	strb	r3, [r7, #27]
 8005668:	e0a9      	b.n	80057be <UART_SetConfig+0x282>
 800566a:	2308      	movs	r3, #8
 800566c:	76fb      	strb	r3, [r7, #27]
 800566e:	e0a6      	b.n	80057be <UART_SetConfig+0x282>
 8005670:	2310      	movs	r3, #16
 8005672:	76fb      	strb	r3, [r7, #27]
 8005674:	e0a3      	b.n	80057be <UART_SetConfig+0x282>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a6d      	ldr	r2, [pc, #436]	; (8005830 <UART_SetConfig+0x2f4>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d120      	bne.n	80056c2 <UART_SetConfig+0x186>
 8005680:	4b69      	ldr	r3, [pc, #420]	; (8005828 <UART_SetConfig+0x2ec>)
 8005682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005686:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800568a:	2b30      	cmp	r3, #48	; 0x30
 800568c:	d013      	beq.n	80056b6 <UART_SetConfig+0x17a>
 800568e:	2b30      	cmp	r3, #48	; 0x30
 8005690:	d814      	bhi.n	80056bc <UART_SetConfig+0x180>
 8005692:	2b20      	cmp	r3, #32
 8005694:	d009      	beq.n	80056aa <UART_SetConfig+0x16e>
 8005696:	2b20      	cmp	r3, #32
 8005698:	d810      	bhi.n	80056bc <UART_SetConfig+0x180>
 800569a:	2b00      	cmp	r3, #0
 800569c:	d002      	beq.n	80056a4 <UART_SetConfig+0x168>
 800569e:	2b10      	cmp	r3, #16
 80056a0:	d006      	beq.n	80056b0 <UART_SetConfig+0x174>
 80056a2:	e00b      	b.n	80056bc <UART_SetConfig+0x180>
 80056a4:	2300      	movs	r3, #0
 80056a6:	76fb      	strb	r3, [r7, #27]
 80056a8:	e089      	b.n	80057be <UART_SetConfig+0x282>
 80056aa:	2302      	movs	r3, #2
 80056ac:	76fb      	strb	r3, [r7, #27]
 80056ae:	e086      	b.n	80057be <UART_SetConfig+0x282>
 80056b0:	2304      	movs	r3, #4
 80056b2:	76fb      	strb	r3, [r7, #27]
 80056b4:	e083      	b.n	80057be <UART_SetConfig+0x282>
 80056b6:	2308      	movs	r3, #8
 80056b8:	76fb      	strb	r3, [r7, #27]
 80056ba:	e080      	b.n	80057be <UART_SetConfig+0x282>
 80056bc:	2310      	movs	r3, #16
 80056be:	76fb      	strb	r3, [r7, #27]
 80056c0:	e07d      	b.n	80057be <UART_SetConfig+0x282>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a5b      	ldr	r2, [pc, #364]	; (8005834 <UART_SetConfig+0x2f8>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d120      	bne.n	800570e <UART_SetConfig+0x1d2>
 80056cc:	4b56      	ldr	r3, [pc, #344]	; (8005828 <UART_SetConfig+0x2ec>)
 80056ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80056d6:	2bc0      	cmp	r3, #192	; 0xc0
 80056d8:	d013      	beq.n	8005702 <UART_SetConfig+0x1c6>
 80056da:	2bc0      	cmp	r3, #192	; 0xc0
 80056dc:	d814      	bhi.n	8005708 <UART_SetConfig+0x1cc>
 80056de:	2b80      	cmp	r3, #128	; 0x80
 80056e0:	d009      	beq.n	80056f6 <UART_SetConfig+0x1ba>
 80056e2:	2b80      	cmp	r3, #128	; 0x80
 80056e4:	d810      	bhi.n	8005708 <UART_SetConfig+0x1cc>
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d002      	beq.n	80056f0 <UART_SetConfig+0x1b4>
 80056ea:	2b40      	cmp	r3, #64	; 0x40
 80056ec:	d006      	beq.n	80056fc <UART_SetConfig+0x1c0>
 80056ee:	e00b      	b.n	8005708 <UART_SetConfig+0x1cc>
 80056f0:	2300      	movs	r3, #0
 80056f2:	76fb      	strb	r3, [r7, #27]
 80056f4:	e063      	b.n	80057be <UART_SetConfig+0x282>
 80056f6:	2302      	movs	r3, #2
 80056f8:	76fb      	strb	r3, [r7, #27]
 80056fa:	e060      	b.n	80057be <UART_SetConfig+0x282>
 80056fc:	2304      	movs	r3, #4
 80056fe:	76fb      	strb	r3, [r7, #27]
 8005700:	e05d      	b.n	80057be <UART_SetConfig+0x282>
 8005702:	2308      	movs	r3, #8
 8005704:	76fb      	strb	r3, [r7, #27]
 8005706:	e05a      	b.n	80057be <UART_SetConfig+0x282>
 8005708:	2310      	movs	r3, #16
 800570a:	76fb      	strb	r3, [r7, #27]
 800570c:	e057      	b.n	80057be <UART_SetConfig+0x282>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a49      	ldr	r2, [pc, #292]	; (8005838 <UART_SetConfig+0x2fc>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d125      	bne.n	8005764 <UART_SetConfig+0x228>
 8005718:	4b43      	ldr	r3, [pc, #268]	; (8005828 <UART_SetConfig+0x2ec>)
 800571a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800571e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005722:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005726:	d017      	beq.n	8005758 <UART_SetConfig+0x21c>
 8005728:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800572c:	d817      	bhi.n	800575e <UART_SetConfig+0x222>
 800572e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005732:	d00b      	beq.n	800574c <UART_SetConfig+0x210>
 8005734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005738:	d811      	bhi.n	800575e <UART_SetConfig+0x222>
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <UART_SetConfig+0x20a>
 800573e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005742:	d006      	beq.n	8005752 <UART_SetConfig+0x216>
 8005744:	e00b      	b.n	800575e <UART_SetConfig+0x222>
 8005746:	2300      	movs	r3, #0
 8005748:	76fb      	strb	r3, [r7, #27]
 800574a:	e038      	b.n	80057be <UART_SetConfig+0x282>
 800574c:	2302      	movs	r3, #2
 800574e:	76fb      	strb	r3, [r7, #27]
 8005750:	e035      	b.n	80057be <UART_SetConfig+0x282>
 8005752:	2304      	movs	r3, #4
 8005754:	76fb      	strb	r3, [r7, #27]
 8005756:	e032      	b.n	80057be <UART_SetConfig+0x282>
 8005758:	2308      	movs	r3, #8
 800575a:	76fb      	strb	r3, [r7, #27]
 800575c:	e02f      	b.n	80057be <UART_SetConfig+0x282>
 800575e:	2310      	movs	r3, #16
 8005760:	76fb      	strb	r3, [r7, #27]
 8005762:	e02c      	b.n	80057be <UART_SetConfig+0x282>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a2d      	ldr	r2, [pc, #180]	; (8005820 <UART_SetConfig+0x2e4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d125      	bne.n	80057ba <UART_SetConfig+0x27e>
 800576e:	4b2e      	ldr	r3, [pc, #184]	; (8005828 <UART_SetConfig+0x2ec>)
 8005770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005774:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005778:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800577c:	d017      	beq.n	80057ae <UART_SetConfig+0x272>
 800577e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005782:	d817      	bhi.n	80057b4 <UART_SetConfig+0x278>
 8005784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005788:	d00b      	beq.n	80057a2 <UART_SetConfig+0x266>
 800578a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800578e:	d811      	bhi.n	80057b4 <UART_SetConfig+0x278>
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <UART_SetConfig+0x260>
 8005794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005798:	d006      	beq.n	80057a8 <UART_SetConfig+0x26c>
 800579a:	e00b      	b.n	80057b4 <UART_SetConfig+0x278>
 800579c:	2300      	movs	r3, #0
 800579e:	76fb      	strb	r3, [r7, #27]
 80057a0:	e00d      	b.n	80057be <UART_SetConfig+0x282>
 80057a2:	2302      	movs	r3, #2
 80057a4:	76fb      	strb	r3, [r7, #27]
 80057a6:	e00a      	b.n	80057be <UART_SetConfig+0x282>
 80057a8:	2304      	movs	r3, #4
 80057aa:	76fb      	strb	r3, [r7, #27]
 80057ac:	e007      	b.n	80057be <UART_SetConfig+0x282>
 80057ae:	2308      	movs	r3, #8
 80057b0:	76fb      	strb	r3, [r7, #27]
 80057b2:	e004      	b.n	80057be <UART_SetConfig+0x282>
 80057b4:	2310      	movs	r3, #16
 80057b6:	76fb      	strb	r3, [r7, #27]
 80057b8:	e001      	b.n	80057be <UART_SetConfig+0x282>
 80057ba:	2310      	movs	r3, #16
 80057bc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a17      	ldr	r2, [pc, #92]	; (8005820 <UART_SetConfig+0x2e4>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	f040 8087 	bne.w	80058d8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057ca:	7efb      	ldrb	r3, [r7, #27]
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	d837      	bhi.n	8005840 <UART_SetConfig+0x304>
 80057d0:	a201      	add	r2, pc, #4	; (adr r2, 80057d8 <UART_SetConfig+0x29c>)
 80057d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d6:	bf00      	nop
 80057d8:	080057fd 	.word	0x080057fd
 80057dc:	08005841 	.word	0x08005841
 80057e0:	08005805 	.word	0x08005805
 80057e4:	08005841 	.word	0x08005841
 80057e8:	0800580b 	.word	0x0800580b
 80057ec:	08005841 	.word	0x08005841
 80057f0:	08005841 	.word	0x08005841
 80057f4:	08005841 	.word	0x08005841
 80057f8:	08005813 	.word	0x08005813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057fc:	f7fe fe0e 	bl	800441c <HAL_RCC_GetPCLK1Freq>
 8005800:	6178      	str	r0, [r7, #20]
        break;
 8005802:	e022      	b.n	800584a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005804:	4b0d      	ldr	r3, [pc, #52]	; (800583c <UART_SetConfig+0x300>)
 8005806:	617b      	str	r3, [r7, #20]
        break;
 8005808:	e01f      	b.n	800584a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800580a:	f7fe fd6f 	bl	80042ec <HAL_RCC_GetSysClockFreq>
 800580e:	6178      	str	r0, [r7, #20]
        break;
 8005810:	e01b      	b.n	800584a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005816:	617b      	str	r3, [r7, #20]
        break;
 8005818:	e017      	b.n	800584a <UART_SetConfig+0x30e>
 800581a:	bf00      	nop
 800581c:	efff69f3 	.word	0xefff69f3
 8005820:	40008000 	.word	0x40008000
 8005824:	40013800 	.word	0x40013800
 8005828:	40021000 	.word	0x40021000
 800582c:	40004400 	.word	0x40004400
 8005830:	40004800 	.word	0x40004800
 8005834:	40004c00 	.word	0x40004c00
 8005838:	40005000 	.word	0x40005000
 800583c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005840:	2300      	movs	r3, #0
 8005842:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	76bb      	strb	r3, [r7, #26]
        break;
 8005848:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 80f1 	beq.w	8005a34 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	4613      	mov	r3, r2
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	4413      	add	r3, r2
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	429a      	cmp	r2, r3
 8005860:	d305      	bcc.n	800586e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	429a      	cmp	r2, r3
 800586c:	d902      	bls.n	8005874 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	76bb      	strb	r3, [r7, #26]
 8005872:	e0df      	b.n	8005a34 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	4618      	mov	r0, r3
 8005878:	f04f 0100 	mov.w	r1, #0
 800587c:	f04f 0200 	mov.w	r2, #0
 8005880:	f04f 0300 	mov.w	r3, #0
 8005884:	020b      	lsls	r3, r1, #8
 8005886:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800588a:	0202      	lsls	r2, r0, #8
 800588c:	6879      	ldr	r1, [r7, #4]
 800588e:	6849      	ldr	r1, [r1, #4]
 8005890:	0849      	lsrs	r1, r1, #1
 8005892:	4608      	mov	r0, r1
 8005894:	f04f 0100 	mov.w	r1, #0
 8005898:	1814      	adds	r4, r2, r0
 800589a:	eb43 0501 	adc.w	r5, r3, r1
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	461a      	mov	r2, r3
 80058a4:	f04f 0300 	mov.w	r3, #0
 80058a8:	4620      	mov	r0, r4
 80058aa:	4629      	mov	r1, r5
 80058ac:	f7fb f98c 	bl	8000bc8 <__aeabi_uldivmod>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4613      	mov	r3, r2
 80058b6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058be:	d308      	bcc.n	80058d2 <UART_SetConfig+0x396>
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058c6:	d204      	bcs.n	80058d2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	60da      	str	r2, [r3, #12]
 80058d0:	e0b0      	b.n	8005a34 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	76bb      	strb	r3, [r7, #26]
 80058d6:	e0ad      	b.n	8005a34 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058e0:	d15c      	bne.n	800599c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80058e2:	7efb      	ldrb	r3, [r7, #27]
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	d828      	bhi.n	800593a <UART_SetConfig+0x3fe>
 80058e8:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <UART_SetConfig+0x3b4>)
 80058ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ee:	bf00      	nop
 80058f0:	08005915 	.word	0x08005915
 80058f4:	0800591d 	.word	0x0800591d
 80058f8:	08005925 	.word	0x08005925
 80058fc:	0800593b 	.word	0x0800593b
 8005900:	0800592b 	.word	0x0800592b
 8005904:	0800593b 	.word	0x0800593b
 8005908:	0800593b 	.word	0x0800593b
 800590c:	0800593b 	.word	0x0800593b
 8005910:	08005933 	.word	0x08005933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005914:	f7fe fd82 	bl	800441c <HAL_RCC_GetPCLK1Freq>
 8005918:	6178      	str	r0, [r7, #20]
        break;
 800591a:	e013      	b.n	8005944 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800591c:	f7fe fd94 	bl	8004448 <HAL_RCC_GetPCLK2Freq>
 8005920:	6178      	str	r0, [r7, #20]
        break;
 8005922:	e00f      	b.n	8005944 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005924:	4b49      	ldr	r3, [pc, #292]	; (8005a4c <UART_SetConfig+0x510>)
 8005926:	617b      	str	r3, [r7, #20]
        break;
 8005928:	e00c      	b.n	8005944 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800592a:	f7fe fcdf 	bl	80042ec <HAL_RCC_GetSysClockFreq>
 800592e:	6178      	str	r0, [r7, #20]
        break;
 8005930:	e008      	b.n	8005944 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005936:	617b      	str	r3, [r7, #20]
        break;
 8005938:	e004      	b.n	8005944 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	76bb      	strb	r3, [r7, #26]
        break;
 8005942:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d074      	beq.n	8005a34 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	005a      	lsls	r2, r3, #1
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	085b      	lsrs	r3, r3, #1
 8005954:	441a      	add	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	fbb2 f3f3 	udiv	r3, r2, r3
 800595e:	b29b      	uxth	r3, r3
 8005960:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	2b0f      	cmp	r3, #15
 8005966:	d916      	bls.n	8005996 <UART_SetConfig+0x45a>
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800596e:	d212      	bcs.n	8005996 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	b29b      	uxth	r3, r3
 8005974:	f023 030f 	bic.w	r3, r3, #15
 8005978:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	085b      	lsrs	r3, r3, #1
 800597e:	b29b      	uxth	r3, r3
 8005980:	f003 0307 	and.w	r3, r3, #7
 8005984:	b29a      	uxth	r2, r3
 8005986:	89fb      	ldrh	r3, [r7, #14]
 8005988:	4313      	orrs	r3, r2
 800598a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	89fa      	ldrh	r2, [r7, #14]
 8005992:	60da      	str	r2, [r3, #12]
 8005994:	e04e      	b.n	8005a34 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	76bb      	strb	r3, [r7, #26]
 800599a:	e04b      	b.n	8005a34 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800599c:	7efb      	ldrb	r3, [r7, #27]
 800599e:	2b08      	cmp	r3, #8
 80059a0:	d827      	bhi.n	80059f2 <UART_SetConfig+0x4b6>
 80059a2:	a201      	add	r2, pc, #4	; (adr r2, 80059a8 <UART_SetConfig+0x46c>)
 80059a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a8:	080059cd 	.word	0x080059cd
 80059ac:	080059d5 	.word	0x080059d5
 80059b0:	080059dd 	.word	0x080059dd
 80059b4:	080059f3 	.word	0x080059f3
 80059b8:	080059e3 	.word	0x080059e3
 80059bc:	080059f3 	.word	0x080059f3
 80059c0:	080059f3 	.word	0x080059f3
 80059c4:	080059f3 	.word	0x080059f3
 80059c8:	080059eb 	.word	0x080059eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059cc:	f7fe fd26 	bl	800441c <HAL_RCC_GetPCLK1Freq>
 80059d0:	6178      	str	r0, [r7, #20]
        break;
 80059d2:	e013      	b.n	80059fc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059d4:	f7fe fd38 	bl	8004448 <HAL_RCC_GetPCLK2Freq>
 80059d8:	6178      	str	r0, [r7, #20]
        break;
 80059da:	e00f      	b.n	80059fc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059dc:	4b1b      	ldr	r3, [pc, #108]	; (8005a4c <UART_SetConfig+0x510>)
 80059de:	617b      	str	r3, [r7, #20]
        break;
 80059e0:	e00c      	b.n	80059fc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059e2:	f7fe fc83 	bl	80042ec <HAL_RCC_GetSysClockFreq>
 80059e6:	6178      	str	r0, [r7, #20]
        break;
 80059e8:	e008      	b.n	80059fc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059ee:	617b      	str	r3, [r7, #20]
        break;
 80059f0:	e004      	b.n	80059fc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	76bb      	strb	r3, [r7, #26]
        break;
 80059fa:	bf00      	nop
    }

    if (pclk != 0U)
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d018      	beq.n	8005a34 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	085a      	lsrs	r2, r3, #1
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	441a      	add	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	2b0f      	cmp	r3, #15
 8005a1c:	d908      	bls.n	8005a30 <UART_SetConfig+0x4f4>
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a24:	d204      	bcs.n	8005a30 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	60da      	str	r2, [r3, #12]
 8005a2e:	e001      	b.n	8005a34 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005a40:	7ebb      	ldrb	r3, [r7, #26]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3720      	adds	r7, #32
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bdb0      	pop	{r4, r5, r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	00f42400 	.word	0x00f42400

08005a50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00a      	beq.n	8005a7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7e:	f003 0302 	and.w	r3, r3, #2
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00a      	beq.n	8005a9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00a      	beq.n	8005abe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	f003 0308 	and.w	r3, r3, #8
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00a      	beq.n	8005ae0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae4:	f003 0310 	and.w	r3, r3, #16
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00a      	beq.n	8005b02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b06:	f003 0320 	and.w	r3, r3, #32
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00a      	beq.n	8005b24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d01a      	beq.n	8005b66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	430a      	orrs	r2, r1
 8005b44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b4e:	d10a      	bne.n	8005b66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00a      	beq.n	8005b88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	605a      	str	r2, [r3, #4]
  }
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af02      	add	r7, sp, #8
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ba4:	f7fc fbe8 	bl	8002378 <HAL_GetTick>
 8005ba8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0308 	and.w	r3, r3, #8
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d10e      	bne.n	8005bd6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f82d 	bl	8005c26 <UART_WaitOnFlagUntilTimeout>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e023      	b.n	8005c1e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0304 	and.w	r3, r3, #4
 8005be0:	2b04      	cmp	r3, #4
 8005be2:	d10e      	bne.n	8005c02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005be4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f817 	bl	8005c26 <UART_WaitOnFlagUntilTimeout>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e00d      	b.n	8005c1e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2220      	movs	r2, #32
 8005c06:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	60f8      	str	r0, [r7, #12]
 8005c2e:	60b9      	str	r1, [r7, #8]
 8005c30:	603b      	str	r3, [r7, #0]
 8005c32:	4613      	mov	r3, r2
 8005c34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c36:	e05e      	b.n	8005cf6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3e:	d05a      	beq.n	8005cf6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c40:	f7fc fb9a 	bl	8002378 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d302      	bcc.n	8005c56 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d11b      	bne.n	8005c8e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c64:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689a      	ldr	r2, [r3, #8]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0201 	bic.w	r2, r2, #1
 8005c74:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e043      	b.n	8005d16 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d02c      	beq.n	8005cf6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005caa:	d124      	bne.n	8005cf6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cb4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005cc4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0201 	bic.w	r2, r2, #1
 8005cd4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2220      	movs	r2, #32
 8005ce0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e00f      	b.n	8005d16 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	69da      	ldr	r2, [r3, #28]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	bf0c      	ite	eq
 8005d06:	2301      	moveq	r3, #1
 8005d08:	2300      	movne	r3, #0
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	79fb      	ldrb	r3, [r7, #7]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d091      	beq.n	8005c38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
	...

08005d20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	88fa      	ldrh	r2, [r7, #6]
 8005d38:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	88fa      	ldrh	r2, [r7, #6]
 8005d40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d52:	d10e      	bne.n	8005d72 <UART_Start_Receive_IT+0x52>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d105      	bne.n	8005d68 <UART_Start_Receive_IT+0x48>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005d62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d66:	e02d      	b.n	8005dc4 <UART_Start_Receive_IT+0xa4>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	22ff      	movs	r2, #255	; 0xff
 8005d6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d70:	e028      	b.n	8005dc4 <UART_Start_Receive_IT+0xa4>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10d      	bne.n	8005d96 <UART_Start_Receive_IT+0x76>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d104      	bne.n	8005d8c <UART_Start_Receive_IT+0x6c>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	22ff      	movs	r2, #255	; 0xff
 8005d86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d8a:	e01b      	b.n	8005dc4 <UART_Start_Receive_IT+0xa4>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	227f      	movs	r2, #127	; 0x7f
 8005d90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d94:	e016      	b.n	8005dc4 <UART_Start_Receive_IT+0xa4>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d9e:	d10d      	bne.n	8005dbc <UART_Start_Receive_IT+0x9c>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d104      	bne.n	8005db2 <UART_Start_Receive_IT+0x92>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	227f      	movs	r2, #127	; 0x7f
 8005dac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005db0:	e008      	b.n	8005dc4 <UART_Start_Receive_IT+0xa4>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	223f      	movs	r2, #63	; 0x3f
 8005db6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005dba:	e003      	b.n	8005dc4 <UART_Start_Receive_IT+0xa4>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2222      	movs	r2, #34	; 0x22
 8005dd0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689a      	ldr	r2, [r3, #8]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f042 0201 	orr.w	r2, r2, #1
 8005de0:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dea:	d107      	bne.n	8005dfc <UART_Start_Receive_IT+0xdc>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d103      	bne.n	8005dfc <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4a0c      	ldr	r2, [pc, #48]	; (8005e28 <UART_Start_Receive_IT+0x108>)
 8005df8:	665a      	str	r2, [r3, #100]	; 0x64
 8005dfa:	e002      	b.n	8005e02 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4a0b      	ldr	r2, [pc, #44]	; (8005e2c <UART_Start_Receive_IT+0x10c>)
 8005e00:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005e18:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	08005fc5 	.word	0x08005fc5
 8005e2c:	08005eed 	.word	0x08005eed

08005e30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e46:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689a      	ldr	r2, [r3, #8]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f022 0201 	bic.w	r2, r2, #1
 8005e56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d107      	bne.n	8005e70 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 0210 	bic.w	r2, r2, #16
 8005e6e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2220      	movs	r2, #32
 8005e74:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005e82:	bf00      	nop
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b084      	sub	sp, #16
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f7ff fb2f 	bl	8005510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eb2:	bf00      	nop
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b082      	sub	sp, #8
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ed0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7ff fb0c 	bl	80054fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ee4:	bf00      	nop
 8005ee6:	3708      	adds	r7, #8
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005efa:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f00:	2b22      	cmp	r3, #34	; 0x22
 8005f02:	d151      	bne.n	8005fa8 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005f0a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005f0c:	89bb      	ldrh	r3, [r7, #12]
 8005f0e:	b2d9      	uxtb	r1, r3
 8005f10:	89fb      	ldrh	r3, [r7, #14]
 8005f12:	b2da      	uxtb	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f18:	400a      	ands	r2, r1
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f22:	1c5a      	adds	r2, r3, #1
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d13a      	bne.n	8005fbc <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f54:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f022 0201 	bic.w	r2, r2, #1
 8005f64:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d10f      	bne.n	8005f9a <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f022 0210 	bic.w	r2, r2, #16
 8005f88:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f90:	4619      	mov	r1, r3
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff fac6 	bl	8005524 <HAL_UARTEx_RxEventCallback>
 8005f98:	e002      	b.n	8005fa0 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7fb fe92 	bl	8001cc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005fa6:	e009      	b.n	8005fbc <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	8b1b      	ldrh	r3, [r3, #24]
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f042 0208 	orr.w	r2, r2, #8
 8005fb8:	b292      	uxth	r2, r2
 8005fba:	831a      	strh	r2, [r3, #24]
}
 8005fbc:	bf00      	nop
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005fd2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fd8:	2b22      	cmp	r3, #34	; 0x22
 8005fda:	d151      	bne.n	8006080 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005fe2:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005fea:	89ba      	ldrh	r2, [r7, #12]
 8005fec:	89fb      	ldrh	r3, [r7, #14]
 8005fee:	4013      	ands	r3, r2
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ffa:	1c9a      	adds	r2, r3, #2
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006006:	b29b      	uxth	r3, r3
 8006008:	3b01      	subs	r3, #1
 800600a:	b29a      	uxth	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006018:	b29b      	uxth	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d13a      	bne.n	8006094 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800602c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0201 	bic.w	r2, r2, #1
 800603c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2220      	movs	r2, #32
 8006042:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800604e:	2b01      	cmp	r3, #1
 8006050:	d10f      	bne.n	8006072 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f022 0210 	bic.w	r2, r2, #16
 8006060:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006068:	4619      	mov	r1, r3
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f7ff fa5a 	bl	8005524 <HAL_UARTEx_RxEventCallback>
 8006070:	e002      	b.n	8006078 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7fb fe26 	bl	8001cc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800607e:	e009      	b.n	8006094 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	8b1b      	ldrh	r3, [r3, #24]
 8006086:	b29a      	uxth	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f042 0208 	orr.w	r2, r2, #8
 8006090:	b292      	uxth	r2, r2
 8006092:	831a      	strh	r2, [r3, #24]
}
 8006094:	bf00      	nop
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <__errno>:
 80060b0:	4b01      	ldr	r3, [pc, #4]	; (80060b8 <__errno+0x8>)
 80060b2:	6818      	ldr	r0, [r3, #0]
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	20000024 	.word	0x20000024

080060bc <__libc_init_array>:
 80060bc:	b570      	push	{r4, r5, r6, lr}
 80060be:	4d0d      	ldr	r5, [pc, #52]	; (80060f4 <__libc_init_array+0x38>)
 80060c0:	4c0d      	ldr	r4, [pc, #52]	; (80060f8 <__libc_init_array+0x3c>)
 80060c2:	1b64      	subs	r4, r4, r5
 80060c4:	10a4      	asrs	r4, r4, #2
 80060c6:	2600      	movs	r6, #0
 80060c8:	42a6      	cmp	r6, r4
 80060ca:	d109      	bne.n	80060e0 <__libc_init_array+0x24>
 80060cc:	4d0b      	ldr	r5, [pc, #44]	; (80060fc <__libc_init_array+0x40>)
 80060ce:	4c0c      	ldr	r4, [pc, #48]	; (8006100 <__libc_init_array+0x44>)
 80060d0:	f002 feb4 	bl	8008e3c <_init>
 80060d4:	1b64      	subs	r4, r4, r5
 80060d6:	10a4      	asrs	r4, r4, #2
 80060d8:	2600      	movs	r6, #0
 80060da:	42a6      	cmp	r6, r4
 80060dc:	d105      	bne.n	80060ea <__libc_init_array+0x2e>
 80060de:	bd70      	pop	{r4, r5, r6, pc}
 80060e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80060e4:	4798      	blx	r3
 80060e6:	3601      	adds	r6, #1
 80060e8:	e7ee      	b.n	80060c8 <__libc_init_array+0xc>
 80060ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ee:	4798      	blx	r3
 80060f0:	3601      	adds	r6, #1
 80060f2:	e7f2      	b.n	80060da <__libc_init_array+0x1e>
 80060f4:	08009324 	.word	0x08009324
 80060f8:	08009324 	.word	0x08009324
 80060fc:	08009324 	.word	0x08009324
 8006100:	08009328 	.word	0x08009328

08006104 <memset>:
 8006104:	4402      	add	r2, r0
 8006106:	4603      	mov	r3, r0
 8006108:	4293      	cmp	r3, r2
 800610a:	d100      	bne.n	800610e <memset+0xa>
 800610c:	4770      	bx	lr
 800610e:	f803 1b01 	strb.w	r1, [r3], #1
 8006112:	e7f9      	b.n	8006108 <memset+0x4>

08006114 <__cvt>:
 8006114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006118:	ec55 4b10 	vmov	r4, r5, d0
 800611c:	2d00      	cmp	r5, #0
 800611e:	460e      	mov	r6, r1
 8006120:	4619      	mov	r1, r3
 8006122:	462b      	mov	r3, r5
 8006124:	bfbb      	ittet	lt
 8006126:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800612a:	461d      	movlt	r5, r3
 800612c:	2300      	movge	r3, #0
 800612e:	232d      	movlt	r3, #45	; 0x2d
 8006130:	700b      	strb	r3, [r1, #0]
 8006132:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006134:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006138:	4691      	mov	r9, r2
 800613a:	f023 0820 	bic.w	r8, r3, #32
 800613e:	bfbc      	itt	lt
 8006140:	4622      	movlt	r2, r4
 8006142:	4614      	movlt	r4, r2
 8006144:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006148:	d005      	beq.n	8006156 <__cvt+0x42>
 800614a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800614e:	d100      	bne.n	8006152 <__cvt+0x3e>
 8006150:	3601      	adds	r6, #1
 8006152:	2102      	movs	r1, #2
 8006154:	e000      	b.n	8006158 <__cvt+0x44>
 8006156:	2103      	movs	r1, #3
 8006158:	ab03      	add	r3, sp, #12
 800615a:	9301      	str	r3, [sp, #4]
 800615c:	ab02      	add	r3, sp, #8
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	ec45 4b10 	vmov	d0, r4, r5
 8006164:	4653      	mov	r3, sl
 8006166:	4632      	mov	r2, r6
 8006168:	f000 fcea 	bl	8006b40 <_dtoa_r>
 800616c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006170:	4607      	mov	r7, r0
 8006172:	d102      	bne.n	800617a <__cvt+0x66>
 8006174:	f019 0f01 	tst.w	r9, #1
 8006178:	d022      	beq.n	80061c0 <__cvt+0xac>
 800617a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800617e:	eb07 0906 	add.w	r9, r7, r6
 8006182:	d110      	bne.n	80061a6 <__cvt+0x92>
 8006184:	783b      	ldrb	r3, [r7, #0]
 8006186:	2b30      	cmp	r3, #48	; 0x30
 8006188:	d10a      	bne.n	80061a0 <__cvt+0x8c>
 800618a:	2200      	movs	r2, #0
 800618c:	2300      	movs	r3, #0
 800618e:	4620      	mov	r0, r4
 8006190:	4629      	mov	r1, r5
 8006192:	f7fa fca9 	bl	8000ae8 <__aeabi_dcmpeq>
 8006196:	b918      	cbnz	r0, 80061a0 <__cvt+0x8c>
 8006198:	f1c6 0601 	rsb	r6, r6, #1
 800619c:	f8ca 6000 	str.w	r6, [sl]
 80061a0:	f8da 3000 	ldr.w	r3, [sl]
 80061a4:	4499      	add	r9, r3
 80061a6:	2200      	movs	r2, #0
 80061a8:	2300      	movs	r3, #0
 80061aa:	4620      	mov	r0, r4
 80061ac:	4629      	mov	r1, r5
 80061ae:	f7fa fc9b 	bl	8000ae8 <__aeabi_dcmpeq>
 80061b2:	b108      	cbz	r0, 80061b8 <__cvt+0xa4>
 80061b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80061b8:	2230      	movs	r2, #48	; 0x30
 80061ba:	9b03      	ldr	r3, [sp, #12]
 80061bc:	454b      	cmp	r3, r9
 80061be:	d307      	bcc.n	80061d0 <__cvt+0xbc>
 80061c0:	9b03      	ldr	r3, [sp, #12]
 80061c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061c4:	1bdb      	subs	r3, r3, r7
 80061c6:	4638      	mov	r0, r7
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	b004      	add	sp, #16
 80061cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d0:	1c59      	adds	r1, r3, #1
 80061d2:	9103      	str	r1, [sp, #12]
 80061d4:	701a      	strb	r2, [r3, #0]
 80061d6:	e7f0      	b.n	80061ba <__cvt+0xa6>

080061d8 <__exponent>:
 80061d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061da:	4603      	mov	r3, r0
 80061dc:	2900      	cmp	r1, #0
 80061de:	bfb8      	it	lt
 80061e0:	4249      	neglt	r1, r1
 80061e2:	f803 2b02 	strb.w	r2, [r3], #2
 80061e6:	bfb4      	ite	lt
 80061e8:	222d      	movlt	r2, #45	; 0x2d
 80061ea:	222b      	movge	r2, #43	; 0x2b
 80061ec:	2909      	cmp	r1, #9
 80061ee:	7042      	strb	r2, [r0, #1]
 80061f0:	dd2a      	ble.n	8006248 <__exponent+0x70>
 80061f2:	f10d 0407 	add.w	r4, sp, #7
 80061f6:	46a4      	mov	ip, r4
 80061f8:	270a      	movs	r7, #10
 80061fa:	46a6      	mov	lr, r4
 80061fc:	460a      	mov	r2, r1
 80061fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8006202:	fb07 1516 	mls	r5, r7, r6, r1
 8006206:	3530      	adds	r5, #48	; 0x30
 8006208:	2a63      	cmp	r2, #99	; 0x63
 800620a:	f104 34ff 	add.w	r4, r4, #4294967295
 800620e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006212:	4631      	mov	r1, r6
 8006214:	dcf1      	bgt.n	80061fa <__exponent+0x22>
 8006216:	3130      	adds	r1, #48	; 0x30
 8006218:	f1ae 0502 	sub.w	r5, lr, #2
 800621c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006220:	1c44      	adds	r4, r0, #1
 8006222:	4629      	mov	r1, r5
 8006224:	4561      	cmp	r1, ip
 8006226:	d30a      	bcc.n	800623e <__exponent+0x66>
 8006228:	f10d 0209 	add.w	r2, sp, #9
 800622c:	eba2 020e 	sub.w	r2, r2, lr
 8006230:	4565      	cmp	r5, ip
 8006232:	bf88      	it	hi
 8006234:	2200      	movhi	r2, #0
 8006236:	4413      	add	r3, r2
 8006238:	1a18      	subs	r0, r3, r0
 800623a:	b003      	add	sp, #12
 800623c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800623e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006242:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006246:	e7ed      	b.n	8006224 <__exponent+0x4c>
 8006248:	2330      	movs	r3, #48	; 0x30
 800624a:	3130      	adds	r1, #48	; 0x30
 800624c:	7083      	strb	r3, [r0, #2]
 800624e:	70c1      	strb	r1, [r0, #3]
 8006250:	1d03      	adds	r3, r0, #4
 8006252:	e7f1      	b.n	8006238 <__exponent+0x60>

08006254 <_printf_float>:
 8006254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006258:	ed2d 8b02 	vpush	{d8}
 800625c:	b08d      	sub	sp, #52	; 0x34
 800625e:	460c      	mov	r4, r1
 8006260:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006264:	4616      	mov	r6, r2
 8006266:	461f      	mov	r7, r3
 8006268:	4605      	mov	r5, r0
 800626a:	f001 fa55 	bl	8007718 <_localeconv_r>
 800626e:	f8d0 a000 	ldr.w	sl, [r0]
 8006272:	4650      	mov	r0, sl
 8006274:	f7f9 ffb6 	bl	80001e4 <strlen>
 8006278:	2300      	movs	r3, #0
 800627a:	930a      	str	r3, [sp, #40]	; 0x28
 800627c:	6823      	ldr	r3, [r4, #0]
 800627e:	9305      	str	r3, [sp, #20]
 8006280:	f8d8 3000 	ldr.w	r3, [r8]
 8006284:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006288:	3307      	adds	r3, #7
 800628a:	f023 0307 	bic.w	r3, r3, #7
 800628e:	f103 0208 	add.w	r2, r3, #8
 8006292:	f8c8 2000 	str.w	r2, [r8]
 8006296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800629e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80062a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80062a6:	9307      	str	r3, [sp, #28]
 80062a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80062ac:	ee08 0a10 	vmov	s16, r0
 80062b0:	4b9f      	ldr	r3, [pc, #636]	; (8006530 <_printf_float+0x2dc>)
 80062b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062b6:	f04f 32ff 	mov.w	r2, #4294967295
 80062ba:	f7fa fc47 	bl	8000b4c <__aeabi_dcmpun>
 80062be:	bb88      	cbnz	r0, 8006324 <_printf_float+0xd0>
 80062c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062c4:	4b9a      	ldr	r3, [pc, #616]	; (8006530 <_printf_float+0x2dc>)
 80062c6:	f04f 32ff 	mov.w	r2, #4294967295
 80062ca:	f7fa fc21 	bl	8000b10 <__aeabi_dcmple>
 80062ce:	bb48      	cbnz	r0, 8006324 <_printf_float+0xd0>
 80062d0:	2200      	movs	r2, #0
 80062d2:	2300      	movs	r3, #0
 80062d4:	4640      	mov	r0, r8
 80062d6:	4649      	mov	r1, r9
 80062d8:	f7fa fc10 	bl	8000afc <__aeabi_dcmplt>
 80062dc:	b110      	cbz	r0, 80062e4 <_printf_float+0x90>
 80062de:	232d      	movs	r3, #45	; 0x2d
 80062e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062e4:	4b93      	ldr	r3, [pc, #588]	; (8006534 <_printf_float+0x2e0>)
 80062e6:	4894      	ldr	r0, [pc, #592]	; (8006538 <_printf_float+0x2e4>)
 80062e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80062ec:	bf94      	ite	ls
 80062ee:	4698      	movls	r8, r3
 80062f0:	4680      	movhi	r8, r0
 80062f2:	2303      	movs	r3, #3
 80062f4:	6123      	str	r3, [r4, #16]
 80062f6:	9b05      	ldr	r3, [sp, #20]
 80062f8:	f023 0204 	bic.w	r2, r3, #4
 80062fc:	6022      	str	r2, [r4, #0]
 80062fe:	f04f 0900 	mov.w	r9, #0
 8006302:	9700      	str	r7, [sp, #0]
 8006304:	4633      	mov	r3, r6
 8006306:	aa0b      	add	r2, sp, #44	; 0x2c
 8006308:	4621      	mov	r1, r4
 800630a:	4628      	mov	r0, r5
 800630c:	f000 f9d8 	bl	80066c0 <_printf_common>
 8006310:	3001      	adds	r0, #1
 8006312:	f040 8090 	bne.w	8006436 <_printf_float+0x1e2>
 8006316:	f04f 30ff 	mov.w	r0, #4294967295
 800631a:	b00d      	add	sp, #52	; 0x34
 800631c:	ecbd 8b02 	vpop	{d8}
 8006320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006324:	4642      	mov	r2, r8
 8006326:	464b      	mov	r3, r9
 8006328:	4640      	mov	r0, r8
 800632a:	4649      	mov	r1, r9
 800632c:	f7fa fc0e 	bl	8000b4c <__aeabi_dcmpun>
 8006330:	b140      	cbz	r0, 8006344 <_printf_float+0xf0>
 8006332:	464b      	mov	r3, r9
 8006334:	2b00      	cmp	r3, #0
 8006336:	bfbc      	itt	lt
 8006338:	232d      	movlt	r3, #45	; 0x2d
 800633a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800633e:	487f      	ldr	r0, [pc, #508]	; (800653c <_printf_float+0x2e8>)
 8006340:	4b7f      	ldr	r3, [pc, #508]	; (8006540 <_printf_float+0x2ec>)
 8006342:	e7d1      	b.n	80062e8 <_printf_float+0x94>
 8006344:	6863      	ldr	r3, [r4, #4]
 8006346:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800634a:	9206      	str	r2, [sp, #24]
 800634c:	1c5a      	adds	r2, r3, #1
 800634e:	d13f      	bne.n	80063d0 <_printf_float+0x17c>
 8006350:	2306      	movs	r3, #6
 8006352:	6063      	str	r3, [r4, #4]
 8006354:	9b05      	ldr	r3, [sp, #20]
 8006356:	6861      	ldr	r1, [r4, #4]
 8006358:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800635c:	2300      	movs	r3, #0
 800635e:	9303      	str	r3, [sp, #12]
 8006360:	ab0a      	add	r3, sp, #40	; 0x28
 8006362:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006366:	ab09      	add	r3, sp, #36	; 0x24
 8006368:	ec49 8b10 	vmov	d0, r8, r9
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	6022      	str	r2, [r4, #0]
 8006370:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006374:	4628      	mov	r0, r5
 8006376:	f7ff fecd 	bl	8006114 <__cvt>
 800637a:	9b06      	ldr	r3, [sp, #24]
 800637c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800637e:	2b47      	cmp	r3, #71	; 0x47
 8006380:	4680      	mov	r8, r0
 8006382:	d108      	bne.n	8006396 <_printf_float+0x142>
 8006384:	1cc8      	adds	r0, r1, #3
 8006386:	db02      	blt.n	800638e <_printf_float+0x13a>
 8006388:	6863      	ldr	r3, [r4, #4]
 800638a:	4299      	cmp	r1, r3
 800638c:	dd41      	ble.n	8006412 <_printf_float+0x1be>
 800638e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006392:	fa5f fb8b 	uxtb.w	fp, fp
 8006396:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800639a:	d820      	bhi.n	80063de <_printf_float+0x18a>
 800639c:	3901      	subs	r1, #1
 800639e:	465a      	mov	r2, fp
 80063a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80063a4:	9109      	str	r1, [sp, #36]	; 0x24
 80063a6:	f7ff ff17 	bl	80061d8 <__exponent>
 80063aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063ac:	1813      	adds	r3, r2, r0
 80063ae:	2a01      	cmp	r2, #1
 80063b0:	4681      	mov	r9, r0
 80063b2:	6123      	str	r3, [r4, #16]
 80063b4:	dc02      	bgt.n	80063bc <_printf_float+0x168>
 80063b6:	6822      	ldr	r2, [r4, #0]
 80063b8:	07d2      	lsls	r2, r2, #31
 80063ba:	d501      	bpl.n	80063c0 <_printf_float+0x16c>
 80063bc:	3301      	adds	r3, #1
 80063be:	6123      	str	r3, [r4, #16]
 80063c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d09c      	beq.n	8006302 <_printf_float+0xae>
 80063c8:	232d      	movs	r3, #45	; 0x2d
 80063ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063ce:	e798      	b.n	8006302 <_printf_float+0xae>
 80063d0:	9a06      	ldr	r2, [sp, #24]
 80063d2:	2a47      	cmp	r2, #71	; 0x47
 80063d4:	d1be      	bne.n	8006354 <_printf_float+0x100>
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1bc      	bne.n	8006354 <_printf_float+0x100>
 80063da:	2301      	movs	r3, #1
 80063dc:	e7b9      	b.n	8006352 <_printf_float+0xfe>
 80063de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80063e2:	d118      	bne.n	8006416 <_printf_float+0x1c2>
 80063e4:	2900      	cmp	r1, #0
 80063e6:	6863      	ldr	r3, [r4, #4]
 80063e8:	dd0b      	ble.n	8006402 <_printf_float+0x1ae>
 80063ea:	6121      	str	r1, [r4, #16]
 80063ec:	b913      	cbnz	r3, 80063f4 <_printf_float+0x1a0>
 80063ee:	6822      	ldr	r2, [r4, #0]
 80063f0:	07d0      	lsls	r0, r2, #31
 80063f2:	d502      	bpl.n	80063fa <_printf_float+0x1a6>
 80063f4:	3301      	adds	r3, #1
 80063f6:	440b      	add	r3, r1
 80063f8:	6123      	str	r3, [r4, #16]
 80063fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80063fc:	f04f 0900 	mov.w	r9, #0
 8006400:	e7de      	b.n	80063c0 <_printf_float+0x16c>
 8006402:	b913      	cbnz	r3, 800640a <_printf_float+0x1b6>
 8006404:	6822      	ldr	r2, [r4, #0]
 8006406:	07d2      	lsls	r2, r2, #31
 8006408:	d501      	bpl.n	800640e <_printf_float+0x1ba>
 800640a:	3302      	adds	r3, #2
 800640c:	e7f4      	b.n	80063f8 <_printf_float+0x1a4>
 800640e:	2301      	movs	r3, #1
 8006410:	e7f2      	b.n	80063f8 <_printf_float+0x1a4>
 8006412:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006418:	4299      	cmp	r1, r3
 800641a:	db05      	blt.n	8006428 <_printf_float+0x1d4>
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	6121      	str	r1, [r4, #16]
 8006420:	07d8      	lsls	r0, r3, #31
 8006422:	d5ea      	bpl.n	80063fa <_printf_float+0x1a6>
 8006424:	1c4b      	adds	r3, r1, #1
 8006426:	e7e7      	b.n	80063f8 <_printf_float+0x1a4>
 8006428:	2900      	cmp	r1, #0
 800642a:	bfd4      	ite	le
 800642c:	f1c1 0202 	rsble	r2, r1, #2
 8006430:	2201      	movgt	r2, #1
 8006432:	4413      	add	r3, r2
 8006434:	e7e0      	b.n	80063f8 <_printf_float+0x1a4>
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	055a      	lsls	r2, r3, #21
 800643a:	d407      	bmi.n	800644c <_printf_float+0x1f8>
 800643c:	6923      	ldr	r3, [r4, #16]
 800643e:	4642      	mov	r2, r8
 8006440:	4631      	mov	r1, r6
 8006442:	4628      	mov	r0, r5
 8006444:	47b8      	blx	r7
 8006446:	3001      	adds	r0, #1
 8006448:	d12c      	bne.n	80064a4 <_printf_float+0x250>
 800644a:	e764      	b.n	8006316 <_printf_float+0xc2>
 800644c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006450:	f240 80e0 	bls.w	8006614 <_printf_float+0x3c0>
 8006454:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006458:	2200      	movs	r2, #0
 800645a:	2300      	movs	r3, #0
 800645c:	f7fa fb44 	bl	8000ae8 <__aeabi_dcmpeq>
 8006460:	2800      	cmp	r0, #0
 8006462:	d034      	beq.n	80064ce <_printf_float+0x27a>
 8006464:	4a37      	ldr	r2, [pc, #220]	; (8006544 <_printf_float+0x2f0>)
 8006466:	2301      	movs	r3, #1
 8006468:	4631      	mov	r1, r6
 800646a:	4628      	mov	r0, r5
 800646c:	47b8      	blx	r7
 800646e:	3001      	adds	r0, #1
 8006470:	f43f af51 	beq.w	8006316 <_printf_float+0xc2>
 8006474:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006478:	429a      	cmp	r2, r3
 800647a:	db02      	blt.n	8006482 <_printf_float+0x22e>
 800647c:	6823      	ldr	r3, [r4, #0]
 800647e:	07d8      	lsls	r0, r3, #31
 8006480:	d510      	bpl.n	80064a4 <_printf_float+0x250>
 8006482:	ee18 3a10 	vmov	r3, s16
 8006486:	4652      	mov	r2, sl
 8006488:	4631      	mov	r1, r6
 800648a:	4628      	mov	r0, r5
 800648c:	47b8      	blx	r7
 800648e:	3001      	adds	r0, #1
 8006490:	f43f af41 	beq.w	8006316 <_printf_float+0xc2>
 8006494:	f04f 0800 	mov.w	r8, #0
 8006498:	f104 091a 	add.w	r9, r4, #26
 800649c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800649e:	3b01      	subs	r3, #1
 80064a0:	4543      	cmp	r3, r8
 80064a2:	dc09      	bgt.n	80064b8 <_printf_float+0x264>
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	079b      	lsls	r3, r3, #30
 80064a8:	f100 8105 	bmi.w	80066b6 <_printf_float+0x462>
 80064ac:	68e0      	ldr	r0, [r4, #12]
 80064ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064b0:	4298      	cmp	r0, r3
 80064b2:	bfb8      	it	lt
 80064b4:	4618      	movlt	r0, r3
 80064b6:	e730      	b.n	800631a <_printf_float+0xc6>
 80064b8:	2301      	movs	r3, #1
 80064ba:	464a      	mov	r2, r9
 80064bc:	4631      	mov	r1, r6
 80064be:	4628      	mov	r0, r5
 80064c0:	47b8      	blx	r7
 80064c2:	3001      	adds	r0, #1
 80064c4:	f43f af27 	beq.w	8006316 <_printf_float+0xc2>
 80064c8:	f108 0801 	add.w	r8, r8, #1
 80064cc:	e7e6      	b.n	800649c <_printf_float+0x248>
 80064ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	dc39      	bgt.n	8006548 <_printf_float+0x2f4>
 80064d4:	4a1b      	ldr	r2, [pc, #108]	; (8006544 <_printf_float+0x2f0>)
 80064d6:	2301      	movs	r3, #1
 80064d8:	4631      	mov	r1, r6
 80064da:	4628      	mov	r0, r5
 80064dc:	47b8      	blx	r7
 80064de:	3001      	adds	r0, #1
 80064e0:	f43f af19 	beq.w	8006316 <_printf_float+0xc2>
 80064e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064e8:	4313      	orrs	r3, r2
 80064ea:	d102      	bne.n	80064f2 <_printf_float+0x29e>
 80064ec:	6823      	ldr	r3, [r4, #0]
 80064ee:	07d9      	lsls	r1, r3, #31
 80064f0:	d5d8      	bpl.n	80064a4 <_printf_float+0x250>
 80064f2:	ee18 3a10 	vmov	r3, s16
 80064f6:	4652      	mov	r2, sl
 80064f8:	4631      	mov	r1, r6
 80064fa:	4628      	mov	r0, r5
 80064fc:	47b8      	blx	r7
 80064fe:	3001      	adds	r0, #1
 8006500:	f43f af09 	beq.w	8006316 <_printf_float+0xc2>
 8006504:	f04f 0900 	mov.w	r9, #0
 8006508:	f104 0a1a 	add.w	sl, r4, #26
 800650c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800650e:	425b      	negs	r3, r3
 8006510:	454b      	cmp	r3, r9
 8006512:	dc01      	bgt.n	8006518 <_printf_float+0x2c4>
 8006514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006516:	e792      	b.n	800643e <_printf_float+0x1ea>
 8006518:	2301      	movs	r3, #1
 800651a:	4652      	mov	r2, sl
 800651c:	4631      	mov	r1, r6
 800651e:	4628      	mov	r0, r5
 8006520:	47b8      	blx	r7
 8006522:	3001      	adds	r0, #1
 8006524:	f43f aef7 	beq.w	8006316 <_printf_float+0xc2>
 8006528:	f109 0901 	add.w	r9, r9, #1
 800652c:	e7ee      	b.n	800650c <_printf_float+0x2b8>
 800652e:	bf00      	nop
 8006530:	7fefffff 	.word	0x7fefffff
 8006534:	08008f40 	.word	0x08008f40
 8006538:	08008f44 	.word	0x08008f44
 800653c:	08008f4c 	.word	0x08008f4c
 8006540:	08008f48 	.word	0x08008f48
 8006544:	08008f50 	.word	0x08008f50
 8006548:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800654a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800654c:	429a      	cmp	r2, r3
 800654e:	bfa8      	it	ge
 8006550:	461a      	movge	r2, r3
 8006552:	2a00      	cmp	r2, #0
 8006554:	4691      	mov	r9, r2
 8006556:	dc37      	bgt.n	80065c8 <_printf_float+0x374>
 8006558:	f04f 0b00 	mov.w	fp, #0
 800655c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006560:	f104 021a 	add.w	r2, r4, #26
 8006564:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006566:	9305      	str	r3, [sp, #20]
 8006568:	eba3 0309 	sub.w	r3, r3, r9
 800656c:	455b      	cmp	r3, fp
 800656e:	dc33      	bgt.n	80065d8 <_printf_float+0x384>
 8006570:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006574:	429a      	cmp	r2, r3
 8006576:	db3b      	blt.n	80065f0 <_printf_float+0x39c>
 8006578:	6823      	ldr	r3, [r4, #0]
 800657a:	07da      	lsls	r2, r3, #31
 800657c:	d438      	bmi.n	80065f0 <_printf_float+0x39c>
 800657e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006580:	9b05      	ldr	r3, [sp, #20]
 8006582:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	eba2 0901 	sub.w	r9, r2, r1
 800658a:	4599      	cmp	r9, r3
 800658c:	bfa8      	it	ge
 800658e:	4699      	movge	r9, r3
 8006590:	f1b9 0f00 	cmp.w	r9, #0
 8006594:	dc35      	bgt.n	8006602 <_printf_float+0x3ae>
 8006596:	f04f 0800 	mov.w	r8, #0
 800659a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800659e:	f104 0a1a 	add.w	sl, r4, #26
 80065a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065a6:	1a9b      	subs	r3, r3, r2
 80065a8:	eba3 0309 	sub.w	r3, r3, r9
 80065ac:	4543      	cmp	r3, r8
 80065ae:	f77f af79 	ble.w	80064a4 <_printf_float+0x250>
 80065b2:	2301      	movs	r3, #1
 80065b4:	4652      	mov	r2, sl
 80065b6:	4631      	mov	r1, r6
 80065b8:	4628      	mov	r0, r5
 80065ba:	47b8      	blx	r7
 80065bc:	3001      	adds	r0, #1
 80065be:	f43f aeaa 	beq.w	8006316 <_printf_float+0xc2>
 80065c2:	f108 0801 	add.w	r8, r8, #1
 80065c6:	e7ec      	b.n	80065a2 <_printf_float+0x34e>
 80065c8:	4613      	mov	r3, r2
 80065ca:	4631      	mov	r1, r6
 80065cc:	4642      	mov	r2, r8
 80065ce:	4628      	mov	r0, r5
 80065d0:	47b8      	blx	r7
 80065d2:	3001      	adds	r0, #1
 80065d4:	d1c0      	bne.n	8006558 <_printf_float+0x304>
 80065d6:	e69e      	b.n	8006316 <_printf_float+0xc2>
 80065d8:	2301      	movs	r3, #1
 80065da:	4631      	mov	r1, r6
 80065dc:	4628      	mov	r0, r5
 80065de:	9205      	str	r2, [sp, #20]
 80065e0:	47b8      	blx	r7
 80065e2:	3001      	adds	r0, #1
 80065e4:	f43f ae97 	beq.w	8006316 <_printf_float+0xc2>
 80065e8:	9a05      	ldr	r2, [sp, #20]
 80065ea:	f10b 0b01 	add.w	fp, fp, #1
 80065ee:	e7b9      	b.n	8006564 <_printf_float+0x310>
 80065f0:	ee18 3a10 	vmov	r3, s16
 80065f4:	4652      	mov	r2, sl
 80065f6:	4631      	mov	r1, r6
 80065f8:	4628      	mov	r0, r5
 80065fa:	47b8      	blx	r7
 80065fc:	3001      	adds	r0, #1
 80065fe:	d1be      	bne.n	800657e <_printf_float+0x32a>
 8006600:	e689      	b.n	8006316 <_printf_float+0xc2>
 8006602:	9a05      	ldr	r2, [sp, #20]
 8006604:	464b      	mov	r3, r9
 8006606:	4442      	add	r2, r8
 8006608:	4631      	mov	r1, r6
 800660a:	4628      	mov	r0, r5
 800660c:	47b8      	blx	r7
 800660e:	3001      	adds	r0, #1
 8006610:	d1c1      	bne.n	8006596 <_printf_float+0x342>
 8006612:	e680      	b.n	8006316 <_printf_float+0xc2>
 8006614:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006616:	2a01      	cmp	r2, #1
 8006618:	dc01      	bgt.n	800661e <_printf_float+0x3ca>
 800661a:	07db      	lsls	r3, r3, #31
 800661c:	d538      	bpl.n	8006690 <_printf_float+0x43c>
 800661e:	2301      	movs	r3, #1
 8006620:	4642      	mov	r2, r8
 8006622:	4631      	mov	r1, r6
 8006624:	4628      	mov	r0, r5
 8006626:	47b8      	blx	r7
 8006628:	3001      	adds	r0, #1
 800662a:	f43f ae74 	beq.w	8006316 <_printf_float+0xc2>
 800662e:	ee18 3a10 	vmov	r3, s16
 8006632:	4652      	mov	r2, sl
 8006634:	4631      	mov	r1, r6
 8006636:	4628      	mov	r0, r5
 8006638:	47b8      	blx	r7
 800663a:	3001      	adds	r0, #1
 800663c:	f43f ae6b 	beq.w	8006316 <_printf_float+0xc2>
 8006640:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006644:	2200      	movs	r2, #0
 8006646:	2300      	movs	r3, #0
 8006648:	f7fa fa4e 	bl	8000ae8 <__aeabi_dcmpeq>
 800664c:	b9d8      	cbnz	r0, 8006686 <_printf_float+0x432>
 800664e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006650:	f108 0201 	add.w	r2, r8, #1
 8006654:	3b01      	subs	r3, #1
 8006656:	4631      	mov	r1, r6
 8006658:	4628      	mov	r0, r5
 800665a:	47b8      	blx	r7
 800665c:	3001      	adds	r0, #1
 800665e:	d10e      	bne.n	800667e <_printf_float+0x42a>
 8006660:	e659      	b.n	8006316 <_printf_float+0xc2>
 8006662:	2301      	movs	r3, #1
 8006664:	4652      	mov	r2, sl
 8006666:	4631      	mov	r1, r6
 8006668:	4628      	mov	r0, r5
 800666a:	47b8      	blx	r7
 800666c:	3001      	adds	r0, #1
 800666e:	f43f ae52 	beq.w	8006316 <_printf_float+0xc2>
 8006672:	f108 0801 	add.w	r8, r8, #1
 8006676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006678:	3b01      	subs	r3, #1
 800667a:	4543      	cmp	r3, r8
 800667c:	dcf1      	bgt.n	8006662 <_printf_float+0x40e>
 800667e:	464b      	mov	r3, r9
 8006680:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006684:	e6dc      	b.n	8006440 <_printf_float+0x1ec>
 8006686:	f04f 0800 	mov.w	r8, #0
 800668a:	f104 0a1a 	add.w	sl, r4, #26
 800668e:	e7f2      	b.n	8006676 <_printf_float+0x422>
 8006690:	2301      	movs	r3, #1
 8006692:	4642      	mov	r2, r8
 8006694:	e7df      	b.n	8006656 <_printf_float+0x402>
 8006696:	2301      	movs	r3, #1
 8006698:	464a      	mov	r2, r9
 800669a:	4631      	mov	r1, r6
 800669c:	4628      	mov	r0, r5
 800669e:	47b8      	blx	r7
 80066a0:	3001      	adds	r0, #1
 80066a2:	f43f ae38 	beq.w	8006316 <_printf_float+0xc2>
 80066a6:	f108 0801 	add.w	r8, r8, #1
 80066aa:	68e3      	ldr	r3, [r4, #12]
 80066ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066ae:	1a5b      	subs	r3, r3, r1
 80066b0:	4543      	cmp	r3, r8
 80066b2:	dcf0      	bgt.n	8006696 <_printf_float+0x442>
 80066b4:	e6fa      	b.n	80064ac <_printf_float+0x258>
 80066b6:	f04f 0800 	mov.w	r8, #0
 80066ba:	f104 0919 	add.w	r9, r4, #25
 80066be:	e7f4      	b.n	80066aa <_printf_float+0x456>

080066c0 <_printf_common>:
 80066c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066c4:	4616      	mov	r6, r2
 80066c6:	4699      	mov	r9, r3
 80066c8:	688a      	ldr	r2, [r1, #8]
 80066ca:	690b      	ldr	r3, [r1, #16]
 80066cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066d0:	4293      	cmp	r3, r2
 80066d2:	bfb8      	it	lt
 80066d4:	4613      	movlt	r3, r2
 80066d6:	6033      	str	r3, [r6, #0]
 80066d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066dc:	4607      	mov	r7, r0
 80066de:	460c      	mov	r4, r1
 80066e0:	b10a      	cbz	r2, 80066e6 <_printf_common+0x26>
 80066e2:	3301      	adds	r3, #1
 80066e4:	6033      	str	r3, [r6, #0]
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	0699      	lsls	r1, r3, #26
 80066ea:	bf42      	ittt	mi
 80066ec:	6833      	ldrmi	r3, [r6, #0]
 80066ee:	3302      	addmi	r3, #2
 80066f0:	6033      	strmi	r3, [r6, #0]
 80066f2:	6825      	ldr	r5, [r4, #0]
 80066f4:	f015 0506 	ands.w	r5, r5, #6
 80066f8:	d106      	bne.n	8006708 <_printf_common+0x48>
 80066fa:	f104 0a19 	add.w	sl, r4, #25
 80066fe:	68e3      	ldr	r3, [r4, #12]
 8006700:	6832      	ldr	r2, [r6, #0]
 8006702:	1a9b      	subs	r3, r3, r2
 8006704:	42ab      	cmp	r3, r5
 8006706:	dc26      	bgt.n	8006756 <_printf_common+0x96>
 8006708:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800670c:	1e13      	subs	r3, r2, #0
 800670e:	6822      	ldr	r2, [r4, #0]
 8006710:	bf18      	it	ne
 8006712:	2301      	movne	r3, #1
 8006714:	0692      	lsls	r2, r2, #26
 8006716:	d42b      	bmi.n	8006770 <_printf_common+0xb0>
 8006718:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800671c:	4649      	mov	r1, r9
 800671e:	4638      	mov	r0, r7
 8006720:	47c0      	blx	r8
 8006722:	3001      	adds	r0, #1
 8006724:	d01e      	beq.n	8006764 <_printf_common+0xa4>
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	68e5      	ldr	r5, [r4, #12]
 800672a:	6832      	ldr	r2, [r6, #0]
 800672c:	f003 0306 	and.w	r3, r3, #6
 8006730:	2b04      	cmp	r3, #4
 8006732:	bf08      	it	eq
 8006734:	1aad      	subeq	r5, r5, r2
 8006736:	68a3      	ldr	r3, [r4, #8]
 8006738:	6922      	ldr	r2, [r4, #16]
 800673a:	bf0c      	ite	eq
 800673c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006740:	2500      	movne	r5, #0
 8006742:	4293      	cmp	r3, r2
 8006744:	bfc4      	itt	gt
 8006746:	1a9b      	subgt	r3, r3, r2
 8006748:	18ed      	addgt	r5, r5, r3
 800674a:	2600      	movs	r6, #0
 800674c:	341a      	adds	r4, #26
 800674e:	42b5      	cmp	r5, r6
 8006750:	d11a      	bne.n	8006788 <_printf_common+0xc8>
 8006752:	2000      	movs	r0, #0
 8006754:	e008      	b.n	8006768 <_printf_common+0xa8>
 8006756:	2301      	movs	r3, #1
 8006758:	4652      	mov	r2, sl
 800675a:	4649      	mov	r1, r9
 800675c:	4638      	mov	r0, r7
 800675e:	47c0      	blx	r8
 8006760:	3001      	adds	r0, #1
 8006762:	d103      	bne.n	800676c <_printf_common+0xac>
 8006764:	f04f 30ff 	mov.w	r0, #4294967295
 8006768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800676c:	3501      	adds	r5, #1
 800676e:	e7c6      	b.n	80066fe <_printf_common+0x3e>
 8006770:	18e1      	adds	r1, r4, r3
 8006772:	1c5a      	adds	r2, r3, #1
 8006774:	2030      	movs	r0, #48	; 0x30
 8006776:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800677a:	4422      	add	r2, r4
 800677c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006780:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006784:	3302      	adds	r3, #2
 8006786:	e7c7      	b.n	8006718 <_printf_common+0x58>
 8006788:	2301      	movs	r3, #1
 800678a:	4622      	mov	r2, r4
 800678c:	4649      	mov	r1, r9
 800678e:	4638      	mov	r0, r7
 8006790:	47c0      	blx	r8
 8006792:	3001      	adds	r0, #1
 8006794:	d0e6      	beq.n	8006764 <_printf_common+0xa4>
 8006796:	3601      	adds	r6, #1
 8006798:	e7d9      	b.n	800674e <_printf_common+0x8e>
	...

0800679c <_printf_i>:
 800679c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067a0:	460c      	mov	r4, r1
 80067a2:	4691      	mov	r9, r2
 80067a4:	7e27      	ldrb	r7, [r4, #24]
 80067a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80067a8:	2f78      	cmp	r7, #120	; 0x78
 80067aa:	4680      	mov	r8, r0
 80067ac:	469a      	mov	sl, r3
 80067ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067b2:	d807      	bhi.n	80067c4 <_printf_i+0x28>
 80067b4:	2f62      	cmp	r7, #98	; 0x62
 80067b6:	d80a      	bhi.n	80067ce <_printf_i+0x32>
 80067b8:	2f00      	cmp	r7, #0
 80067ba:	f000 80d8 	beq.w	800696e <_printf_i+0x1d2>
 80067be:	2f58      	cmp	r7, #88	; 0x58
 80067c0:	f000 80a3 	beq.w	800690a <_printf_i+0x16e>
 80067c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80067c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067cc:	e03a      	b.n	8006844 <_printf_i+0xa8>
 80067ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067d2:	2b15      	cmp	r3, #21
 80067d4:	d8f6      	bhi.n	80067c4 <_printf_i+0x28>
 80067d6:	a001      	add	r0, pc, #4	; (adr r0, 80067dc <_printf_i+0x40>)
 80067d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80067dc:	08006835 	.word	0x08006835
 80067e0:	08006849 	.word	0x08006849
 80067e4:	080067c5 	.word	0x080067c5
 80067e8:	080067c5 	.word	0x080067c5
 80067ec:	080067c5 	.word	0x080067c5
 80067f0:	080067c5 	.word	0x080067c5
 80067f4:	08006849 	.word	0x08006849
 80067f8:	080067c5 	.word	0x080067c5
 80067fc:	080067c5 	.word	0x080067c5
 8006800:	080067c5 	.word	0x080067c5
 8006804:	080067c5 	.word	0x080067c5
 8006808:	08006955 	.word	0x08006955
 800680c:	08006879 	.word	0x08006879
 8006810:	08006937 	.word	0x08006937
 8006814:	080067c5 	.word	0x080067c5
 8006818:	080067c5 	.word	0x080067c5
 800681c:	08006977 	.word	0x08006977
 8006820:	080067c5 	.word	0x080067c5
 8006824:	08006879 	.word	0x08006879
 8006828:	080067c5 	.word	0x080067c5
 800682c:	080067c5 	.word	0x080067c5
 8006830:	0800693f 	.word	0x0800693f
 8006834:	680b      	ldr	r3, [r1, #0]
 8006836:	1d1a      	adds	r2, r3, #4
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	600a      	str	r2, [r1, #0]
 800683c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006840:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006844:	2301      	movs	r3, #1
 8006846:	e0a3      	b.n	8006990 <_printf_i+0x1f4>
 8006848:	6825      	ldr	r5, [r4, #0]
 800684a:	6808      	ldr	r0, [r1, #0]
 800684c:	062e      	lsls	r6, r5, #24
 800684e:	f100 0304 	add.w	r3, r0, #4
 8006852:	d50a      	bpl.n	800686a <_printf_i+0xce>
 8006854:	6805      	ldr	r5, [r0, #0]
 8006856:	600b      	str	r3, [r1, #0]
 8006858:	2d00      	cmp	r5, #0
 800685a:	da03      	bge.n	8006864 <_printf_i+0xc8>
 800685c:	232d      	movs	r3, #45	; 0x2d
 800685e:	426d      	negs	r5, r5
 8006860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006864:	485e      	ldr	r0, [pc, #376]	; (80069e0 <_printf_i+0x244>)
 8006866:	230a      	movs	r3, #10
 8006868:	e019      	b.n	800689e <_printf_i+0x102>
 800686a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800686e:	6805      	ldr	r5, [r0, #0]
 8006870:	600b      	str	r3, [r1, #0]
 8006872:	bf18      	it	ne
 8006874:	b22d      	sxthne	r5, r5
 8006876:	e7ef      	b.n	8006858 <_printf_i+0xbc>
 8006878:	680b      	ldr	r3, [r1, #0]
 800687a:	6825      	ldr	r5, [r4, #0]
 800687c:	1d18      	adds	r0, r3, #4
 800687e:	6008      	str	r0, [r1, #0]
 8006880:	0628      	lsls	r0, r5, #24
 8006882:	d501      	bpl.n	8006888 <_printf_i+0xec>
 8006884:	681d      	ldr	r5, [r3, #0]
 8006886:	e002      	b.n	800688e <_printf_i+0xf2>
 8006888:	0669      	lsls	r1, r5, #25
 800688a:	d5fb      	bpl.n	8006884 <_printf_i+0xe8>
 800688c:	881d      	ldrh	r5, [r3, #0]
 800688e:	4854      	ldr	r0, [pc, #336]	; (80069e0 <_printf_i+0x244>)
 8006890:	2f6f      	cmp	r7, #111	; 0x6f
 8006892:	bf0c      	ite	eq
 8006894:	2308      	moveq	r3, #8
 8006896:	230a      	movne	r3, #10
 8006898:	2100      	movs	r1, #0
 800689a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800689e:	6866      	ldr	r6, [r4, #4]
 80068a0:	60a6      	str	r6, [r4, #8]
 80068a2:	2e00      	cmp	r6, #0
 80068a4:	bfa2      	ittt	ge
 80068a6:	6821      	ldrge	r1, [r4, #0]
 80068a8:	f021 0104 	bicge.w	r1, r1, #4
 80068ac:	6021      	strge	r1, [r4, #0]
 80068ae:	b90d      	cbnz	r5, 80068b4 <_printf_i+0x118>
 80068b0:	2e00      	cmp	r6, #0
 80068b2:	d04d      	beq.n	8006950 <_printf_i+0x1b4>
 80068b4:	4616      	mov	r6, r2
 80068b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80068ba:	fb03 5711 	mls	r7, r3, r1, r5
 80068be:	5dc7      	ldrb	r7, [r0, r7]
 80068c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068c4:	462f      	mov	r7, r5
 80068c6:	42bb      	cmp	r3, r7
 80068c8:	460d      	mov	r5, r1
 80068ca:	d9f4      	bls.n	80068b6 <_printf_i+0x11a>
 80068cc:	2b08      	cmp	r3, #8
 80068ce:	d10b      	bne.n	80068e8 <_printf_i+0x14c>
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	07df      	lsls	r7, r3, #31
 80068d4:	d508      	bpl.n	80068e8 <_printf_i+0x14c>
 80068d6:	6923      	ldr	r3, [r4, #16]
 80068d8:	6861      	ldr	r1, [r4, #4]
 80068da:	4299      	cmp	r1, r3
 80068dc:	bfde      	ittt	le
 80068de:	2330      	movle	r3, #48	; 0x30
 80068e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068e8:	1b92      	subs	r2, r2, r6
 80068ea:	6122      	str	r2, [r4, #16]
 80068ec:	f8cd a000 	str.w	sl, [sp]
 80068f0:	464b      	mov	r3, r9
 80068f2:	aa03      	add	r2, sp, #12
 80068f4:	4621      	mov	r1, r4
 80068f6:	4640      	mov	r0, r8
 80068f8:	f7ff fee2 	bl	80066c0 <_printf_common>
 80068fc:	3001      	adds	r0, #1
 80068fe:	d14c      	bne.n	800699a <_printf_i+0x1fe>
 8006900:	f04f 30ff 	mov.w	r0, #4294967295
 8006904:	b004      	add	sp, #16
 8006906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800690a:	4835      	ldr	r0, [pc, #212]	; (80069e0 <_printf_i+0x244>)
 800690c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006910:	6823      	ldr	r3, [r4, #0]
 8006912:	680e      	ldr	r6, [r1, #0]
 8006914:	061f      	lsls	r7, r3, #24
 8006916:	f856 5b04 	ldr.w	r5, [r6], #4
 800691a:	600e      	str	r6, [r1, #0]
 800691c:	d514      	bpl.n	8006948 <_printf_i+0x1ac>
 800691e:	07d9      	lsls	r1, r3, #31
 8006920:	bf44      	itt	mi
 8006922:	f043 0320 	orrmi.w	r3, r3, #32
 8006926:	6023      	strmi	r3, [r4, #0]
 8006928:	b91d      	cbnz	r5, 8006932 <_printf_i+0x196>
 800692a:	6823      	ldr	r3, [r4, #0]
 800692c:	f023 0320 	bic.w	r3, r3, #32
 8006930:	6023      	str	r3, [r4, #0]
 8006932:	2310      	movs	r3, #16
 8006934:	e7b0      	b.n	8006898 <_printf_i+0xfc>
 8006936:	6823      	ldr	r3, [r4, #0]
 8006938:	f043 0320 	orr.w	r3, r3, #32
 800693c:	6023      	str	r3, [r4, #0]
 800693e:	2378      	movs	r3, #120	; 0x78
 8006940:	4828      	ldr	r0, [pc, #160]	; (80069e4 <_printf_i+0x248>)
 8006942:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006946:	e7e3      	b.n	8006910 <_printf_i+0x174>
 8006948:	065e      	lsls	r6, r3, #25
 800694a:	bf48      	it	mi
 800694c:	b2ad      	uxthmi	r5, r5
 800694e:	e7e6      	b.n	800691e <_printf_i+0x182>
 8006950:	4616      	mov	r6, r2
 8006952:	e7bb      	b.n	80068cc <_printf_i+0x130>
 8006954:	680b      	ldr	r3, [r1, #0]
 8006956:	6826      	ldr	r6, [r4, #0]
 8006958:	6960      	ldr	r0, [r4, #20]
 800695a:	1d1d      	adds	r5, r3, #4
 800695c:	600d      	str	r5, [r1, #0]
 800695e:	0635      	lsls	r5, r6, #24
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	d501      	bpl.n	8006968 <_printf_i+0x1cc>
 8006964:	6018      	str	r0, [r3, #0]
 8006966:	e002      	b.n	800696e <_printf_i+0x1d2>
 8006968:	0671      	lsls	r1, r6, #25
 800696a:	d5fb      	bpl.n	8006964 <_printf_i+0x1c8>
 800696c:	8018      	strh	r0, [r3, #0]
 800696e:	2300      	movs	r3, #0
 8006970:	6123      	str	r3, [r4, #16]
 8006972:	4616      	mov	r6, r2
 8006974:	e7ba      	b.n	80068ec <_printf_i+0x150>
 8006976:	680b      	ldr	r3, [r1, #0]
 8006978:	1d1a      	adds	r2, r3, #4
 800697a:	600a      	str	r2, [r1, #0]
 800697c:	681e      	ldr	r6, [r3, #0]
 800697e:	6862      	ldr	r2, [r4, #4]
 8006980:	2100      	movs	r1, #0
 8006982:	4630      	mov	r0, r6
 8006984:	f7f9 fc3c 	bl	8000200 <memchr>
 8006988:	b108      	cbz	r0, 800698e <_printf_i+0x1f2>
 800698a:	1b80      	subs	r0, r0, r6
 800698c:	6060      	str	r0, [r4, #4]
 800698e:	6863      	ldr	r3, [r4, #4]
 8006990:	6123      	str	r3, [r4, #16]
 8006992:	2300      	movs	r3, #0
 8006994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006998:	e7a8      	b.n	80068ec <_printf_i+0x150>
 800699a:	6923      	ldr	r3, [r4, #16]
 800699c:	4632      	mov	r2, r6
 800699e:	4649      	mov	r1, r9
 80069a0:	4640      	mov	r0, r8
 80069a2:	47d0      	blx	sl
 80069a4:	3001      	adds	r0, #1
 80069a6:	d0ab      	beq.n	8006900 <_printf_i+0x164>
 80069a8:	6823      	ldr	r3, [r4, #0]
 80069aa:	079b      	lsls	r3, r3, #30
 80069ac:	d413      	bmi.n	80069d6 <_printf_i+0x23a>
 80069ae:	68e0      	ldr	r0, [r4, #12]
 80069b0:	9b03      	ldr	r3, [sp, #12]
 80069b2:	4298      	cmp	r0, r3
 80069b4:	bfb8      	it	lt
 80069b6:	4618      	movlt	r0, r3
 80069b8:	e7a4      	b.n	8006904 <_printf_i+0x168>
 80069ba:	2301      	movs	r3, #1
 80069bc:	4632      	mov	r2, r6
 80069be:	4649      	mov	r1, r9
 80069c0:	4640      	mov	r0, r8
 80069c2:	47d0      	blx	sl
 80069c4:	3001      	adds	r0, #1
 80069c6:	d09b      	beq.n	8006900 <_printf_i+0x164>
 80069c8:	3501      	adds	r5, #1
 80069ca:	68e3      	ldr	r3, [r4, #12]
 80069cc:	9903      	ldr	r1, [sp, #12]
 80069ce:	1a5b      	subs	r3, r3, r1
 80069d0:	42ab      	cmp	r3, r5
 80069d2:	dcf2      	bgt.n	80069ba <_printf_i+0x21e>
 80069d4:	e7eb      	b.n	80069ae <_printf_i+0x212>
 80069d6:	2500      	movs	r5, #0
 80069d8:	f104 0619 	add.w	r6, r4, #25
 80069dc:	e7f5      	b.n	80069ca <_printf_i+0x22e>
 80069de:	bf00      	nop
 80069e0:	08008f52 	.word	0x08008f52
 80069e4:	08008f63 	.word	0x08008f63

080069e8 <siprintf>:
 80069e8:	b40e      	push	{r1, r2, r3}
 80069ea:	b500      	push	{lr}
 80069ec:	b09c      	sub	sp, #112	; 0x70
 80069ee:	ab1d      	add	r3, sp, #116	; 0x74
 80069f0:	9002      	str	r0, [sp, #8]
 80069f2:	9006      	str	r0, [sp, #24]
 80069f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80069f8:	4809      	ldr	r0, [pc, #36]	; (8006a20 <siprintf+0x38>)
 80069fa:	9107      	str	r1, [sp, #28]
 80069fc:	9104      	str	r1, [sp, #16]
 80069fe:	4909      	ldr	r1, [pc, #36]	; (8006a24 <siprintf+0x3c>)
 8006a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a04:	9105      	str	r1, [sp, #20]
 8006a06:	6800      	ldr	r0, [r0, #0]
 8006a08:	9301      	str	r3, [sp, #4]
 8006a0a:	a902      	add	r1, sp, #8
 8006a0c:	f001 fb32 	bl	8008074 <_svfiprintf_r>
 8006a10:	9b02      	ldr	r3, [sp, #8]
 8006a12:	2200      	movs	r2, #0
 8006a14:	701a      	strb	r2, [r3, #0]
 8006a16:	b01c      	add	sp, #112	; 0x70
 8006a18:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a1c:	b003      	add	sp, #12
 8006a1e:	4770      	bx	lr
 8006a20:	20000024 	.word	0x20000024
 8006a24:	ffff0208 	.word	0xffff0208

08006a28 <quorem>:
 8006a28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a2c:	6903      	ldr	r3, [r0, #16]
 8006a2e:	690c      	ldr	r4, [r1, #16]
 8006a30:	42a3      	cmp	r3, r4
 8006a32:	4607      	mov	r7, r0
 8006a34:	f2c0 8081 	blt.w	8006b3a <quorem+0x112>
 8006a38:	3c01      	subs	r4, #1
 8006a3a:	f101 0814 	add.w	r8, r1, #20
 8006a3e:	f100 0514 	add.w	r5, r0, #20
 8006a42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a46:	9301      	str	r3, [sp, #4]
 8006a48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a50:	3301      	adds	r3, #1
 8006a52:	429a      	cmp	r2, r3
 8006a54:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a60:	d331      	bcc.n	8006ac6 <quorem+0x9e>
 8006a62:	f04f 0e00 	mov.w	lr, #0
 8006a66:	4640      	mov	r0, r8
 8006a68:	46ac      	mov	ip, r5
 8006a6a:	46f2      	mov	sl, lr
 8006a6c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a70:	b293      	uxth	r3, r2
 8006a72:	fb06 e303 	mla	r3, r6, r3, lr
 8006a76:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	ebaa 0303 	sub.w	r3, sl, r3
 8006a80:	0c12      	lsrs	r2, r2, #16
 8006a82:	f8dc a000 	ldr.w	sl, [ip]
 8006a86:	fb06 e202 	mla	r2, r6, r2, lr
 8006a8a:	fa13 f38a 	uxtah	r3, r3, sl
 8006a8e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a92:	fa1f fa82 	uxth.w	sl, r2
 8006a96:	f8dc 2000 	ldr.w	r2, [ip]
 8006a9a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006a9e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006aa8:	4581      	cmp	r9, r0
 8006aaa:	f84c 3b04 	str.w	r3, [ip], #4
 8006aae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006ab2:	d2db      	bcs.n	8006a6c <quorem+0x44>
 8006ab4:	f855 300b 	ldr.w	r3, [r5, fp]
 8006ab8:	b92b      	cbnz	r3, 8006ac6 <quorem+0x9e>
 8006aba:	9b01      	ldr	r3, [sp, #4]
 8006abc:	3b04      	subs	r3, #4
 8006abe:	429d      	cmp	r5, r3
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	d32e      	bcc.n	8006b22 <quorem+0xfa>
 8006ac4:	613c      	str	r4, [r7, #16]
 8006ac6:	4638      	mov	r0, r7
 8006ac8:	f001 f8be 	bl	8007c48 <__mcmp>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	db24      	blt.n	8006b1a <quorem+0xf2>
 8006ad0:	3601      	adds	r6, #1
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	f04f 0c00 	mov.w	ip, #0
 8006ad8:	f858 2b04 	ldr.w	r2, [r8], #4
 8006adc:	f8d0 e000 	ldr.w	lr, [r0]
 8006ae0:	b293      	uxth	r3, r2
 8006ae2:	ebac 0303 	sub.w	r3, ip, r3
 8006ae6:	0c12      	lsrs	r2, r2, #16
 8006ae8:	fa13 f38e 	uxtah	r3, r3, lr
 8006aec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006af0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006afa:	45c1      	cmp	r9, r8
 8006afc:	f840 3b04 	str.w	r3, [r0], #4
 8006b00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006b04:	d2e8      	bcs.n	8006ad8 <quorem+0xb0>
 8006b06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b0e:	b922      	cbnz	r2, 8006b1a <quorem+0xf2>
 8006b10:	3b04      	subs	r3, #4
 8006b12:	429d      	cmp	r5, r3
 8006b14:	461a      	mov	r2, r3
 8006b16:	d30a      	bcc.n	8006b2e <quorem+0x106>
 8006b18:	613c      	str	r4, [r7, #16]
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	b003      	add	sp, #12
 8006b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b22:	6812      	ldr	r2, [r2, #0]
 8006b24:	3b04      	subs	r3, #4
 8006b26:	2a00      	cmp	r2, #0
 8006b28:	d1cc      	bne.n	8006ac4 <quorem+0x9c>
 8006b2a:	3c01      	subs	r4, #1
 8006b2c:	e7c7      	b.n	8006abe <quorem+0x96>
 8006b2e:	6812      	ldr	r2, [r2, #0]
 8006b30:	3b04      	subs	r3, #4
 8006b32:	2a00      	cmp	r2, #0
 8006b34:	d1f0      	bne.n	8006b18 <quorem+0xf0>
 8006b36:	3c01      	subs	r4, #1
 8006b38:	e7eb      	b.n	8006b12 <quorem+0xea>
 8006b3a:	2000      	movs	r0, #0
 8006b3c:	e7ee      	b.n	8006b1c <quorem+0xf4>
	...

08006b40 <_dtoa_r>:
 8006b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b44:	ed2d 8b02 	vpush	{d8}
 8006b48:	ec57 6b10 	vmov	r6, r7, d0
 8006b4c:	b095      	sub	sp, #84	; 0x54
 8006b4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006b50:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006b54:	9105      	str	r1, [sp, #20]
 8006b56:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006b5a:	4604      	mov	r4, r0
 8006b5c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b60:	b975      	cbnz	r5, 8006b80 <_dtoa_r+0x40>
 8006b62:	2010      	movs	r0, #16
 8006b64:	f000 fddc 	bl	8007720 <malloc>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	6260      	str	r0, [r4, #36]	; 0x24
 8006b6c:	b920      	cbnz	r0, 8006b78 <_dtoa_r+0x38>
 8006b6e:	4bb2      	ldr	r3, [pc, #712]	; (8006e38 <_dtoa_r+0x2f8>)
 8006b70:	21ea      	movs	r1, #234	; 0xea
 8006b72:	48b2      	ldr	r0, [pc, #712]	; (8006e3c <_dtoa_r+0x2fc>)
 8006b74:	f001 fb8e 	bl	8008294 <__assert_func>
 8006b78:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006b7c:	6005      	str	r5, [r0, #0]
 8006b7e:	60c5      	str	r5, [r0, #12]
 8006b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b82:	6819      	ldr	r1, [r3, #0]
 8006b84:	b151      	cbz	r1, 8006b9c <_dtoa_r+0x5c>
 8006b86:	685a      	ldr	r2, [r3, #4]
 8006b88:	604a      	str	r2, [r1, #4]
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	4093      	lsls	r3, r2
 8006b8e:	608b      	str	r3, [r1, #8]
 8006b90:	4620      	mov	r0, r4
 8006b92:	f000 fe1b 	bl	80077cc <_Bfree>
 8006b96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b98:	2200      	movs	r2, #0
 8006b9a:	601a      	str	r2, [r3, #0]
 8006b9c:	1e3b      	subs	r3, r7, #0
 8006b9e:	bfb9      	ittee	lt
 8006ba0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006ba4:	9303      	strlt	r3, [sp, #12]
 8006ba6:	2300      	movge	r3, #0
 8006ba8:	f8c8 3000 	strge.w	r3, [r8]
 8006bac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006bb0:	4ba3      	ldr	r3, [pc, #652]	; (8006e40 <_dtoa_r+0x300>)
 8006bb2:	bfbc      	itt	lt
 8006bb4:	2201      	movlt	r2, #1
 8006bb6:	f8c8 2000 	strlt.w	r2, [r8]
 8006bba:	ea33 0309 	bics.w	r3, r3, r9
 8006bbe:	d11b      	bne.n	8006bf8 <_dtoa_r+0xb8>
 8006bc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006bc2:	f242 730f 	movw	r3, #9999	; 0x270f
 8006bc6:	6013      	str	r3, [r2, #0]
 8006bc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006bcc:	4333      	orrs	r3, r6
 8006bce:	f000 857a 	beq.w	80076c6 <_dtoa_r+0xb86>
 8006bd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bd4:	b963      	cbnz	r3, 8006bf0 <_dtoa_r+0xb0>
 8006bd6:	4b9b      	ldr	r3, [pc, #620]	; (8006e44 <_dtoa_r+0x304>)
 8006bd8:	e024      	b.n	8006c24 <_dtoa_r+0xe4>
 8006bda:	4b9b      	ldr	r3, [pc, #620]	; (8006e48 <_dtoa_r+0x308>)
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	3308      	adds	r3, #8
 8006be0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006be2:	6013      	str	r3, [r2, #0]
 8006be4:	9800      	ldr	r0, [sp, #0]
 8006be6:	b015      	add	sp, #84	; 0x54
 8006be8:	ecbd 8b02 	vpop	{d8}
 8006bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bf0:	4b94      	ldr	r3, [pc, #592]	; (8006e44 <_dtoa_r+0x304>)
 8006bf2:	9300      	str	r3, [sp, #0]
 8006bf4:	3303      	adds	r3, #3
 8006bf6:	e7f3      	b.n	8006be0 <_dtoa_r+0xa0>
 8006bf8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	ec51 0b17 	vmov	r0, r1, d7
 8006c02:	2300      	movs	r3, #0
 8006c04:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006c08:	f7f9 ff6e 	bl	8000ae8 <__aeabi_dcmpeq>
 8006c0c:	4680      	mov	r8, r0
 8006c0e:	b158      	cbz	r0, 8006c28 <_dtoa_r+0xe8>
 8006c10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c12:	2301      	movs	r3, #1
 8006c14:	6013      	str	r3, [r2, #0]
 8006c16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 8551 	beq.w	80076c0 <_dtoa_r+0xb80>
 8006c1e:	488b      	ldr	r0, [pc, #556]	; (8006e4c <_dtoa_r+0x30c>)
 8006c20:	6018      	str	r0, [r3, #0]
 8006c22:	1e43      	subs	r3, r0, #1
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	e7dd      	b.n	8006be4 <_dtoa_r+0xa4>
 8006c28:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006c2c:	aa12      	add	r2, sp, #72	; 0x48
 8006c2e:	a913      	add	r1, sp, #76	; 0x4c
 8006c30:	4620      	mov	r0, r4
 8006c32:	f001 f8ad 	bl	8007d90 <__d2b>
 8006c36:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006c3a:	4683      	mov	fp, r0
 8006c3c:	2d00      	cmp	r5, #0
 8006c3e:	d07c      	beq.n	8006d3a <_dtoa_r+0x1fa>
 8006c40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c42:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006c46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c4a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006c4e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006c52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006c56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006c5a:	4b7d      	ldr	r3, [pc, #500]	; (8006e50 <_dtoa_r+0x310>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	4630      	mov	r0, r6
 8006c60:	4639      	mov	r1, r7
 8006c62:	f7f9 fb21 	bl	80002a8 <__aeabi_dsub>
 8006c66:	a36e      	add	r3, pc, #440	; (adr r3, 8006e20 <_dtoa_r+0x2e0>)
 8006c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6c:	f7f9 fcd4 	bl	8000618 <__aeabi_dmul>
 8006c70:	a36d      	add	r3, pc, #436	; (adr r3, 8006e28 <_dtoa_r+0x2e8>)
 8006c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c76:	f7f9 fb19 	bl	80002ac <__adddf3>
 8006c7a:	4606      	mov	r6, r0
 8006c7c:	4628      	mov	r0, r5
 8006c7e:	460f      	mov	r7, r1
 8006c80:	f7f9 fc60 	bl	8000544 <__aeabi_i2d>
 8006c84:	a36a      	add	r3, pc, #424	; (adr r3, 8006e30 <_dtoa_r+0x2f0>)
 8006c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8a:	f7f9 fcc5 	bl	8000618 <__aeabi_dmul>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	460b      	mov	r3, r1
 8006c92:	4630      	mov	r0, r6
 8006c94:	4639      	mov	r1, r7
 8006c96:	f7f9 fb09 	bl	80002ac <__adddf3>
 8006c9a:	4606      	mov	r6, r0
 8006c9c:	460f      	mov	r7, r1
 8006c9e:	f7f9 ff6b 	bl	8000b78 <__aeabi_d2iz>
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	4682      	mov	sl, r0
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	4630      	mov	r0, r6
 8006caa:	4639      	mov	r1, r7
 8006cac:	f7f9 ff26 	bl	8000afc <__aeabi_dcmplt>
 8006cb0:	b148      	cbz	r0, 8006cc6 <_dtoa_r+0x186>
 8006cb2:	4650      	mov	r0, sl
 8006cb4:	f7f9 fc46 	bl	8000544 <__aeabi_i2d>
 8006cb8:	4632      	mov	r2, r6
 8006cba:	463b      	mov	r3, r7
 8006cbc:	f7f9 ff14 	bl	8000ae8 <__aeabi_dcmpeq>
 8006cc0:	b908      	cbnz	r0, 8006cc6 <_dtoa_r+0x186>
 8006cc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cc6:	f1ba 0f16 	cmp.w	sl, #22
 8006cca:	d854      	bhi.n	8006d76 <_dtoa_r+0x236>
 8006ccc:	4b61      	ldr	r3, [pc, #388]	; (8006e54 <_dtoa_r+0x314>)
 8006cce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006cda:	f7f9 ff0f 	bl	8000afc <__aeabi_dcmplt>
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	d04b      	beq.n	8006d7a <_dtoa_r+0x23a>
 8006ce2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	930e      	str	r3, [sp, #56]	; 0x38
 8006cea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cec:	1b5d      	subs	r5, r3, r5
 8006cee:	1e6b      	subs	r3, r5, #1
 8006cf0:	9304      	str	r3, [sp, #16]
 8006cf2:	bf43      	ittte	mi
 8006cf4:	2300      	movmi	r3, #0
 8006cf6:	f1c5 0801 	rsbmi	r8, r5, #1
 8006cfa:	9304      	strmi	r3, [sp, #16]
 8006cfc:	f04f 0800 	movpl.w	r8, #0
 8006d00:	f1ba 0f00 	cmp.w	sl, #0
 8006d04:	db3b      	blt.n	8006d7e <_dtoa_r+0x23e>
 8006d06:	9b04      	ldr	r3, [sp, #16]
 8006d08:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006d0c:	4453      	add	r3, sl
 8006d0e:	9304      	str	r3, [sp, #16]
 8006d10:	2300      	movs	r3, #0
 8006d12:	9306      	str	r3, [sp, #24]
 8006d14:	9b05      	ldr	r3, [sp, #20]
 8006d16:	2b09      	cmp	r3, #9
 8006d18:	d869      	bhi.n	8006dee <_dtoa_r+0x2ae>
 8006d1a:	2b05      	cmp	r3, #5
 8006d1c:	bfc4      	itt	gt
 8006d1e:	3b04      	subgt	r3, #4
 8006d20:	9305      	strgt	r3, [sp, #20]
 8006d22:	9b05      	ldr	r3, [sp, #20]
 8006d24:	f1a3 0302 	sub.w	r3, r3, #2
 8006d28:	bfcc      	ite	gt
 8006d2a:	2500      	movgt	r5, #0
 8006d2c:	2501      	movle	r5, #1
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d869      	bhi.n	8006e06 <_dtoa_r+0x2c6>
 8006d32:	e8df f003 	tbb	[pc, r3]
 8006d36:	4e2c      	.short	0x4e2c
 8006d38:	5a4c      	.short	0x5a4c
 8006d3a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006d3e:	441d      	add	r5, r3
 8006d40:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006d44:	2b20      	cmp	r3, #32
 8006d46:	bfc1      	itttt	gt
 8006d48:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d4c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006d50:	fa09 f303 	lslgt.w	r3, r9, r3
 8006d54:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006d58:	bfda      	itte	le
 8006d5a:	f1c3 0320 	rsble	r3, r3, #32
 8006d5e:	fa06 f003 	lslle.w	r0, r6, r3
 8006d62:	4318      	orrgt	r0, r3
 8006d64:	f7f9 fbde 	bl	8000524 <__aeabi_ui2d>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	4606      	mov	r6, r0
 8006d6c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006d70:	3d01      	subs	r5, #1
 8006d72:	9310      	str	r3, [sp, #64]	; 0x40
 8006d74:	e771      	b.n	8006c5a <_dtoa_r+0x11a>
 8006d76:	2301      	movs	r3, #1
 8006d78:	e7b6      	b.n	8006ce8 <_dtoa_r+0x1a8>
 8006d7a:	900e      	str	r0, [sp, #56]	; 0x38
 8006d7c:	e7b5      	b.n	8006cea <_dtoa_r+0x1aa>
 8006d7e:	f1ca 0300 	rsb	r3, sl, #0
 8006d82:	9306      	str	r3, [sp, #24]
 8006d84:	2300      	movs	r3, #0
 8006d86:	eba8 080a 	sub.w	r8, r8, sl
 8006d8a:	930d      	str	r3, [sp, #52]	; 0x34
 8006d8c:	e7c2      	b.n	8006d14 <_dtoa_r+0x1d4>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	9308      	str	r3, [sp, #32]
 8006d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	dc39      	bgt.n	8006e0c <_dtoa_r+0x2cc>
 8006d98:	f04f 0901 	mov.w	r9, #1
 8006d9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006da0:	464b      	mov	r3, r9
 8006da2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006da6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006da8:	2200      	movs	r2, #0
 8006daa:	6042      	str	r2, [r0, #4]
 8006dac:	2204      	movs	r2, #4
 8006dae:	f102 0614 	add.w	r6, r2, #20
 8006db2:	429e      	cmp	r6, r3
 8006db4:	6841      	ldr	r1, [r0, #4]
 8006db6:	d92f      	bls.n	8006e18 <_dtoa_r+0x2d8>
 8006db8:	4620      	mov	r0, r4
 8006dba:	f000 fcc7 	bl	800774c <_Balloc>
 8006dbe:	9000      	str	r0, [sp, #0]
 8006dc0:	2800      	cmp	r0, #0
 8006dc2:	d14b      	bne.n	8006e5c <_dtoa_r+0x31c>
 8006dc4:	4b24      	ldr	r3, [pc, #144]	; (8006e58 <_dtoa_r+0x318>)
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006dcc:	e6d1      	b.n	8006b72 <_dtoa_r+0x32>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e7de      	b.n	8006d90 <_dtoa_r+0x250>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	9308      	str	r3, [sp, #32]
 8006dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd8:	eb0a 0903 	add.w	r9, sl, r3
 8006ddc:	f109 0301 	add.w	r3, r9, #1
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	9301      	str	r3, [sp, #4]
 8006de4:	bfb8      	it	lt
 8006de6:	2301      	movlt	r3, #1
 8006de8:	e7dd      	b.n	8006da6 <_dtoa_r+0x266>
 8006dea:	2301      	movs	r3, #1
 8006dec:	e7f2      	b.n	8006dd4 <_dtoa_r+0x294>
 8006dee:	2501      	movs	r5, #1
 8006df0:	2300      	movs	r3, #0
 8006df2:	9305      	str	r3, [sp, #20]
 8006df4:	9508      	str	r5, [sp, #32]
 8006df6:	f04f 39ff 	mov.w	r9, #4294967295
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e00:	2312      	movs	r3, #18
 8006e02:	9209      	str	r2, [sp, #36]	; 0x24
 8006e04:	e7cf      	b.n	8006da6 <_dtoa_r+0x266>
 8006e06:	2301      	movs	r3, #1
 8006e08:	9308      	str	r3, [sp, #32]
 8006e0a:	e7f4      	b.n	8006df6 <_dtoa_r+0x2b6>
 8006e0c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006e10:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e14:	464b      	mov	r3, r9
 8006e16:	e7c6      	b.n	8006da6 <_dtoa_r+0x266>
 8006e18:	3101      	adds	r1, #1
 8006e1a:	6041      	str	r1, [r0, #4]
 8006e1c:	0052      	lsls	r2, r2, #1
 8006e1e:	e7c6      	b.n	8006dae <_dtoa_r+0x26e>
 8006e20:	636f4361 	.word	0x636f4361
 8006e24:	3fd287a7 	.word	0x3fd287a7
 8006e28:	8b60c8b3 	.word	0x8b60c8b3
 8006e2c:	3fc68a28 	.word	0x3fc68a28
 8006e30:	509f79fb 	.word	0x509f79fb
 8006e34:	3fd34413 	.word	0x3fd34413
 8006e38:	08008f81 	.word	0x08008f81
 8006e3c:	08008f98 	.word	0x08008f98
 8006e40:	7ff00000 	.word	0x7ff00000
 8006e44:	08008f7d 	.word	0x08008f7d
 8006e48:	08008f74 	.word	0x08008f74
 8006e4c:	08008f51 	.word	0x08008f51
 8006e50:	3ff80000 	.word	0x3ff80000
 8006e54:	08009090 	.word	0x08009090
 8006e58:	08008ff7 	.word	0x08008ff7
 8006e5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e5e:	9a00      	ldr	r2, [sp, #0]
 8006e60:	601a      	str	r2, [r3, #0]
 8006e62:	9b01      	ldr	r3, [sp, #4]
 8006e64:	2b0e      	cmp	r3, #14
 8006e66:	f200 80ad 	bhi.w	8006fc4 <_dtoa_r+0x484>
 8006e6a:	2d00      	cmp	r5, #0
 8006e6c:	f000 80aa 	beq.w	8006fc4 <_dtoa_r+0x484>
 8006e70:	f1ba 0f00 	cmp.w	sl, #0
 8006e74:	dd36      	ble.n	8006ee4 <_dtoa_r+0x3a4>
 8006e76:	4ac3      	ldr	r2, [pc, #780]	; (8007184 <_dtoa_r+0x644>)
 8006e78:	f00a 030f 	and.w	r3, sl, #15
 8006e7c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006e80:	ed93 7b00 	vldr	d7, [r3]
 8006e84:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006e88:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006e8c:	eeb0 8a47 	vmov.f32	s16, s14
 8006e90:	eef0 8a67 	vmov.f32	s17, s15
 8006e94:	d016      	beq.n	8006ec4 <_dtoa_r+0x384>
 8006e96:	4bbc      	ldr	r3, [pc, #752]	; (8007188 <_dtoa_r+0x648>)
 8006e98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ea0:	f7f9 fce4 	bl	800086c <__aeabi_ddiv>
 8006ea4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ea8:	f007 070f 	and.w	r7, r7, #15
 8006eac:	2503      	movs	r5, #3
 8006eae:	4eb6      	ldr	r6, [pc, #728]	; (8007188 <_dtoa_r+0x648>)
 8006eb0:	b957      	cbnz	r7, 8006ec8 <_dtoa_r+0x388>
 8006eb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eb6:	ec53 2b18 	vmov	r2, r3, d8
 8006eba:	f7f9 fcd7 	bl	800086c <__aeabi_ddiv>
 8006ebe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ec2:	e029      	b.n	8006f18 <_dtoa_r+0x3d8>
 8006ec4:	2502      	movs	r5, #2
 8006ec6:	e7f2      	b.n	8006eae <_dtoa_r+0x36e>
 8006ec8:	07f9      	lsls	r1, r7, #31
 8006eca:	d508      	bpl.n	8006ede <_dtoa_r+0x39e>
 8006ecc:	ec51 0b18 	vmov	r0, r1, d8
 8006ed0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ed4:	f7f9 fba0 	bl	8000618 <__aeabi_dmul>
 8006ed8:	ec41 0b18 	vmov	d8, r0, r1
 8006edc:	3501      	adds	r5, #1
 8006ede:	107f      	asrs	r7, r7, #1
 8006ee0:	3608      	adds	r6, #8
 8006ee2:	e7e5      	b.n	8006eb0 <_dtoa_r+0x370>
 8006ee4:	f000 80a6 	beq.w	8007034 <_dtoa_r+0x4f4>
 8006ee8:	f1ca 0600 	rsb	r6, sl, #0
 8006eec:	4ba5      	ldr	r3, [pc, #660]	; (8007184 <_dtoa_r+0x644>)
 8006eee:	4fa6      	ldr	r7, [pc, #664]	; (8007188 <_dtoa_r+0x648>)
 8006ef0:	f006 020f 	and.w	r2, r6, #15
 8006ef4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f00:	f7f9 fb8a 	bl	8000618 <__aeabi_dmul>
 8006f04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f08:	1136      	asrs	r6, r6, #4
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	2502      	movs	r5, #2
 8006f0e:	2e00      	cmp	r6, #0
 8006f10:	f040 8085 	bne.w	800701e <_dtoa_r+0x4de>
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1d2      	bne.n	8006ebe <_dtoa_r+0x37e>
 8006f18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 808c 	beq.w	8007038 <_dtoa_r+0x4f8>
 8006f20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006f24:	4b99      	ldr	r3, [pc, #612]	; (800718c <_dtoa_r+0x64c>)
 8006f26:	2200      	movs	r2, #0
 8006f28:	4630      	mov	r0, r6
 8006f2a:	4639      	mov	r1, r7
 8006f2c:	f7f9 fde6 	bl	8000afc <__aeabi_dcmplt>
 8006f30:	2800      	cmp	r0, #0
 8006f32:	f000 8081 	beq.w	8007038 <_dtoa_r+0x4f8>
 8006f36:	9b01      	ldr	r3, [sp, #4]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d07d      	beq.n	8007038 <_dtoa_r+0x4f8>
 8006f3c:	f1b9 0f00 	cmp.w	r9, #0
 8006f40:	dd3c      	ble.n	8006fbc <_dtoa_r+0x47c>
 8006f42:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006f46:	9307      	str	r3, [sp, #28]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	4b91      	ldr	r3, [pc, #580]	; (8007190 <_dtoa_r+0x650>)
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	4639      	mov	r1, r7
 8006f50:	f7f9 fb62 	bl	8000618 <__aeabi_dmul>
 8006f54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f58:	3501      	adds	r5, #1
 8006f5a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006f5e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006f62:	4628      	mov	r0, r5
 8006f64:	f7f9 faee 	bl	8000544 <__aeabi_i2d>
 8006f68:	4632      	mov	r2, r6
 8006f6a:	463b      	mov	r3, r7
 8006f6c:	f7f9 fb54 	bl	8000618 <__aeabi_dmul>
 8006f70:	4b88      	ldr	r3, [pc, #544]	; (8007194 <_dtoa_r+0x654>)
 8006f72:	2200      	movs	r2, #0
 8006f74:	f7f9 f99a 	bl	80002ac <__adddf3>
 8006f78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006f7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f80:	9303      	str	r3, [sp, #12]
 8006f82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d15c      	bne.n	8007042 <_dtoa_r+0x502>
 8006f88:	4b83      	ldr	r3, [pc, #524]	; (8007198 <_dtoa_r+0x658>)
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	4639      	mov	r1, r7
 8006f90:	f7f9 f98a 	bl	80002a8 <__aeabi_dsub>
 8006f94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f98:	4606      	mov	r6, r0
 8006f9a:	460f      	mov	r7, r1
 8006f9c:	f7f9 fdcc 	bl	8000b38 <__aeabi_dcmpgt>
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	f040 8296 	bne.w	80074d2 <_dtoa_r+0x992>
 8006fa6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006faa:	4630      	mov	r0, r6
 8006fac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fb0:	4639      	mov	r1, r7
 8006fb2:	f7f9 fda3 	bl	8000afc <__aeabi_dcmplt>
 8006fb6:	2800      	cmp	r0, #0
 8006fb8:	f040 8288 	bne.w	80074cc <_dtoa_r+0x98c>
 8006fbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006fc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006fc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f2c0 8158 	blt.w	800727c <_dtoa_r+0x73c>
 8006fcc:	f1ba 0f0e 	cmp.w	sl, #14
 8006fd0:	f300 8154 	bgt.w	800727c <_dtoa_r+0x73c>
 8006fd4:	4b6b      	ldr	r3, [pc, #428]	; (8007184 <_dtoa_r+0x644>)
 8006fd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006fda:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f280 80e3 	bge.w	80071ac <_dtoa_r+0x66c>
 8006fe6:	9b01      	ldr	r3, [sp, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f300 80df 	bgt.w	80071ac <_dtoa_r+0x66c>
 8006fee:	f040 826d 	bne.w	80074cc <_dtoa_r+0x98c>
 8006ff2:	4b69      	ldr	r3, [pc, #420]	; (8007198 <_dtoa_r+0x658>)
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	4640      	mov	r0, r8
 8006ff8:	4649      	mov	r1, r9
 8006ffa:	f7f9 fb0d 	bl	8000618 <__aeabi_dmul>
 8006ffe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007002:	f7f9 fd8f 	bl	8000b24 <__aeabi_dcmpge>
 8007006:	9e01      	ldr	r6, [sp, #4]
 8007008:	4637      	mov	r7, r6
 800700a:	2800      	cmp	r0, #0
 800700c:	f040 8243 	bne.w	8007496 <_dtoa_r+0x956>
 8007010:	9d00      	ldr	r5, [sp, #0]
 8007012:	2331      	movs	r3, #49	; 0x31
 8007014:	f805 3b01 	strb.w	r3, [r5], #1
 8007018:	f10a 0a01 	add.w	sl, sl, #1
 800701c:	e23f      	b.n	800749e <_dtoa_r+0x95e>
 800701e:	07f2      	lsls	r2, r6, #31
 8007020:	d505      	bpl.n	800702e <_dtoa_r+0x4ee>
 8007022:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007026:	f7f9 faf7 	bl	8000618 <__aeabi_dmul>
 800702a:	3501      	adds	r5, #1
 800702c:	2301      	movs	r3, #1
 800702e:	1076      	asrs	r6, r6, #1
 8007030:	3708      	adds	r7, #8
 8007032:	e76c      	b.n	8006f0e <_dtoa_r+0x3ce>
 8007034:	2502      	movs	r5, #2
 8007036:	e76f      	b.n	8006f18 <_dtoa_r+0x3d8>
 8007038:	9b01      	ldr	r3, [sp, #4]
 800703a:	f8cd a01c 	str.w	sl, [sp, #28]
 800703e:	930c      	str	r3, [sp, #48]	; 0x30
 8007040:	e78d      	b.n	8006f5e <_dtoa_r+0x41e>
 8007042:	9900      	ldr	r1, [sp, #0]
 8007044:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007046:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007048:	4b4e      	ldr	r3, [pc, #312]	; (8007184 <_dtoa_r+0x644>)
 800704a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800704e:	4401      	add	r1, r0
 8007050:	9102      	str	r1, [sp, #8]
 8007052:	9908      	ldr	r1, [sp, #32]
 8007054:	eeb0 8a47 	vmov.f32	s16, s14
 8007058:	eef0 8a67 	vmov.f32	s17, s15
 800705c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007060:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007064:	2900      	cmp	r1, #0
 8007066:	d045      	beq.n	80070f4 <_dtoa_r+0x5b4>
 8007068:	494c      	ldr	r1, [pc, #304]	; (800719c <_dtoa_r+0x65c>)
 800706a:	2000      	movs	r0, #0
 800706c:	f7f9 fbfe 	bl	800086c <__aeabi_ddiv>
 8007070:	ec53 2b18 	vmov	r2, r3, d8
 8007074:	f7f9 f918 	bl	80002a8 <__aeabi_dsub>
 8007078:	9d00      	ldr	r5, [sp, #0]
 800707a:	ec41 0b18 	vmov	d8, r0, r1
 800707e:	4639      	mov	r1, r7
 8007080:	4630      	mov	r0, r6
 8007082:	f7f9 fd79 	bl	8000b78 <__aeabi_d2iz>
 8007086:	900c      	str	r0, [sp, #48]	; 0x30
 8007088:	f7f9 fa5c 	bl	8000544 <__aeabi_i2d>
 800708c:	4602      	mov	r2, r0
 800708e:	460b      	mov	r3, r1
 8007090:	4630      	mov	r0, r6
 8007092:	4639      	mov	r1, r7
 8007094:	f7f9 f908 	bl	80002a8 <__aeabi_dsub>
 8007098:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800709a:	3330      	adds	r3, #48	; 0x30
 800709c:	f805 3b01 	strb.w	r3, [r5], #1
 80070a0:	ec53 2b18 	vmov	r2, r3, d8
 80070a4:	4606      	mov	r6, r0
 80070a6:	460f      	mov	r7, r1
 80070a8:	f7f9 fd28 	bl	8000afc <__aeabi_dcmplt>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	d165      	bne.n	800717c <_dtoa_r+0x63c>
 80070b0:	4632      	mov	r2, r6
 80070b2:	463b      	mov	r3, r7
 80070b4:	4935      	ldr	r1, [pc, #212]	; (800718c <_dtoa_r+0x64c>)
 80070b6:	2000      	movs	r0, #0
 80070b8:	f7f9 f8f6 	bl	80002a8 <__aeabi_dsub>
 80070bc:	ec53 2b18 	vmov	r2, r3, d8
 80070c0:	f7f9 fd1c 	bl	8000afc <__aeabi_dcmplt>
 80070c4:	2800      	cmp	r0, #0
 80070c6:	f040 80b9 	bne.w	800723c <_dtoa_r+0x6fc>
 80070ca:	9b02      	ldr	r3, [sp, #8]
 80070cc:	429d      	cmp	r5, r3
 80070ce:	f43f af75 	beq.w	8006fbc <_dtoa_r+0x47c>
 80070d2:	4b2f      	ldr	r3, [pc, #188]	; (8007190 <_dtoa_r+0x650>)
 80070d4:	ec51 0b18 	vmov	r0, r1, d8
 80070d8:	2200      	movs	r2, #0
 80070da:	f7f9 fa9d 	bl	8000618 <__aeabi_dmul>
 80070de:	4b2c      	ldr	r3, [pc, #176]	; (8007190 <_dtoa_r+0x650>)
 80070e0:	ec41 0b18 	vmov	d8, r0, r1
 80070e4:	2200      	movs	r2, #0
 80070e6:	4630      	mov	r0, r6
 80070e8:	4639      	mov	r1, r7
 80070ea:	f7f9 fa95 	bl	8000618 <__aeabi_dmul>
 80070ee:	4606      	mov	r6, r0
 80070f0:	460f      	mov	r7, r1
 80070f2:	e7c4      	b.n	800707e <_dtoa_r+0x53e>
 80070f4:	ec51 0b17 	vmov	r0, r1, d7
 80070f8:	f7f9 fa8e 	bl	8000618 <__aeabi_dmul>
 80070fc:	9b02      	ldr	r3, [sp, #8]
 80070fe:	9d00      	ldr	r5, [sp, #0]
 8007100:	930c      	str	r3, [sp, #48]	; 0x30
 8007102:	ec41 0b18 	vmov	d8, r0, r1
 8007106:	4639      	mov	r1, r7
 8007108:	4630      	mov	r0, r6
 800710a:	f7f9 fd35 	bl	8000b78 <__aeabi_d2iz>
 800710e:	9011      	str	r0, [sp, #68]	; 0x44
 8007110:	f7f9 fa18 	bl	8000544 <__aeabi_i2d>
 8007114:	4602      	mov	r2, r0
 8007116:	460b      	mov	r3, r1
 8007118:	4630      	mov	r0, r6
 800711a:	4639      	mov	r1, r7
 800711c:	f7f9 f8c4 	bl	80002a8 <__aeabi_dsub>
 8007120:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007122:	3330      	adds	r3, #48	; 0x30
 8007124:	f805 3b01 	strb.w	r3, [r5], #1
 8007128:	9b02      	ldr	r3, [sp, #8]
 800712a:	429d      	cmp	r5, r3
 800712c:	4606      	mov	r6, r0
 800712e:	460f      	mov	r7, r1
 8007130:	f04f 0200 	mov.w	r2, #0
 8007134:	d134      	bne.n	80071a0 <_dtoa_r+0x660>
 8007136:	4b19      	ldr	r3, [pc, #100]	; (800719c <_dtoa_r+0x65c>)
 8007138:	ec51 0b18 	vmov	r0, r1, d8
 800713c:	f7f9 f8b6 	bl	80002ac <__adddf3>
 8007140:	4602      	mov	r2, r0
 8007142:	460b      	mov	r3, r1
 8007144:	4630      	mov	r0, r6
 8007146:	4639      	mov	r1, r7
 8007148:	f7f9 fcf6 	bl	8000b38 <__aeabi_dcmpgt>
 800714c:	2800      	cmp	r0, #0
 800714e:	d175      	bne.n	800723c <_dtoa_r+0x6fc>
 8007150:	ec53 2b18 	vmov	r2, r3, d8
 8007154:	4911      	ldr	r1, [pc, #68]	; (800719c <_dtoa_r+0x65c>)
 8007156:	2000      	movs	r0, #0
 8007158:	f7f9 f8a6 	bl	80002a8 <__aeabi_dsub>
 800715c:	4602      	mov	r2, r0
 800715e:	460b      	mov	r3, r1
 8007160:	4630      	mov	r0, r6
 8007162:	4639      	mov	r1, r7
 8007164:	f7f9 fcca 	bl	8000afc <__aeabi_dcmplt>
 8007168:	2800      	cmp	r0, #0
 800716a:	f43f af27 	beq.w	8006fbc <_dtoa_r+0x47c>
 800716e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007170:	1e6b      	subs	r3, r5, #1
 8007172:	930c      	str	r3, [sp, #48]	; 0x30
 8007174:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007178:	2b30      	cmp	r3, #48	; 0x30
 800717a:	d0f8      	beq.n	800716e <_dtoa_r+0x62e>
 800717c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007180:	e04a      	b.n	8007218 <_dtoa_r+0x6d8>
 8007182:	bf00      	nop
 8007184:	08009090 	.word	0x08009090
 8007188:	08009068 	.word	0x08009068
 800718c:	3ff00000 	.word	0x3ff00000
 8007190:	40240000 	.word	0x40240000
 8007194:	401c0000 	.word	0x401c0000
 8007198:	40140000 	.word	0x40140000
 800719c:	3fe00000 	.word	0x3fe00000
 80071a0:	4baf      	ldr	r3, [pc, #700]	; (8007460 <_dtoa_r+0x920>)
 80071a2:	f7f9 fa39 	bl	8000618 <__aeabi_dmul>
 80071a6:	4606      	mov	r6, r0
 80071a8:	460f      	mov	r7, r1
 80071aa:	e7ac      	b.n	8007106 <_dtoa_r+0x5c6>
 80071ac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80071b0:	9d00      	ldr	r5, [sp, #0]
 80071b2:	4642      	mov	r2, r8
 80071b4:	464b      	mov	r3, r9
 80071b6:	4630      	mov	r0, r6
 80071b8:	4639      	mov	r1, r7
 80071ba:	f7f9 fb57 	bl	800086c <__aeabi_ddiv>
 80071be:	f7f9 fcdb 	bl	8000b78 <__aeabi_d2iz>
 80071c2:	9002      	str	r0, [sp, #8]
 80071c4:	f7f9 f9be 	bl	8000544 <__aeabi_i2d>
 80071c8:	4642      	mov	r2, r8
 80071ca:	464b      	mov	r3, r9
 80071cc:	f7f9 fa24 	bl	8000618 <__aeabi_dmul>
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	4630      	mov	r0, r6
 80071d6:	4639      	mov	r1, r7
 80071d8:	f7f9 f866 	bl	80002a8 <__aeabi_dsub>
 80071dc:	9e02      	ldr	r6, [sp, #8]
 80071de:	9f01      	ldr	r7, [sp, #4]
 80071e0:	3630      	adds	r6, #48	; 0x30
 80071e2:	f805 6b01 	strb.w	r6, [r5], #1
 80071e6:	9e00      	ldr	r6, [sp, #0]
 80071e8:	1bae      	subs	r6, r5, r6
 80071ea:	42b7      	cmp	r7, r6
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	d137      	bne.n	8007262 <_dtoa_r+0x722>
 80071f2:	f7f9 f85b 	bl	80002ac <__adddf3>
 80071f6:	4642      	mov	r2, r8
 80071f8:	464b      	mov	r3, r9
 80071fa:	4606      	mov	r6, r0
 80071fc:	460f      	mov	r7, r1
 80071fe:	f7f9 fc9b 	bl	8000b38 <__aeabi_dcmpgt>
 8007202:	b9c8      	cbnz	r0, 8007238 <_dtoa_r+0x6f8>
 8007204:	4642      	mov	r2, r8
 8007206:	464b      	mov	r3, r9
 8007208:	4630      	mov	r0, r6
 800720a:	4639      	mov	r1, r7
 800720c:	f7f9 fc6c 	bl	8000ae8 <__aeabi_dcmpeq>
 8007210:	b110      	cbz	r0, 8007218 <_dtoa_r+0x6d8>
 8007212:	9b02      	ldr	r3, [sp, #8]
 8007214:	07d9      	lsls	r1, r3, #31
 8007216:	d40f      	bmi.n	8007238 <_dtoa_r+0x6f8>
 8007218:	4620      	mov	r0, r4
 800721a:	4659      	mov	r1, fp
 800721c:	f000 fad6 	bl	80077cc <_Bfree>
 8007220:	2300      	movs	r3, #0
 8007222:	702b      	strb	r3, [r5, #0]
 8007224:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007226:	f10a 0001 	add.w	r0, sl, #1
 800722a:	6018      	str	r0, [r3, #0]
 800722c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800722e:	2b00      	cmp	r3, #0
 8007230:	f43f acd8 	beq.w	8006be4 <_dtoa_r+0xa4>
 8007234:	601d      	str	r5, [r3, #0]
 8007236:	e4d5      	b.n	8006be4 <_dtoa_r+0xa4>
 8007238:	f8cd a01c 	str.w	sl, [sp, #28]
 800723c:	462b      	mov	r3, r5
 800723e:	461d      	mov	r5, r3
 8007240:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007244:	2a39      	cmp	r2, #57	; 0x39
 8007246:	d108      	bne.n	800725a <_dtoa_r+0x71a>
 8007248:	9a00      	ldr	r2, [sp, #0]
 800724a:	429a      	cmp	r2, r3
 800724c:	d1f7      	bne.n	800723e <_dtoa_r+0x6fe>
 800724e:	9a07      	ldr	r2, [sp, #28]
 8007250:	9900      	ldr	r1, [sp, #0]
 8007252:	3201      	adds	r2, #1
 8007254:	9207      	str	r2, [sp, #28]
 8007256:	2230      	movs	r2, #48	; 0x30
 8007258:	700a      	strb	r2, [r1, #0]
 800725a:	781a      	ldrb	r2, [r3, #0]
 800725c:	3201      	adds	r2, #1
 800725e:	701a      	strb	r2, [r3, #0]
 8007260:	e78c      	b.n	800717c <_dtoa_r+0x63c>
 8007262:	4b7f      	ldr	r3, [pc, #508]	; (8007460 <_dtoa_r+0x920>)
 8007264:	2200      	movs	r2, #0
 8007266:	f7f9 f9d7 	bl	8000618 <__aeabi_dmul>
 800726a:	2200      	movs	r2, #0
 800726c:	2300      	movs	r3, #0
 800726e:	4606      	mov	r6, r0
 8007270:	460f      	mov	r7, r1
 8007272:	f7f9 fc39 	bl	8000ae8 <__aeabi_dcmpeq>
 8007276:	2800      	cmp	r0, #0
 8007278:	d09b      	beq.n	80071b2 <_dtoa_r+0x672>
 800727a:	e7cd      	b.n	8007218 <_dtoa_r+0x6d8>
 800727c:	9a08      	ldr	r2, [sp, #32]
 800727e:	2a00      	cmp	r2, #0
 8007280:	f000 80c4 	beq.w	800740c <_dtoa_r+0x8cc>
 8007284:	9a05      	ldr	r2, [sp, #20]
 8007286:	2a01      	cmp	r2, #1
 8007288:	f300 80a8 	bgt.w	80073dc <_dtoa_r+0x89c>
 800728c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800728e:	2a00      	cmp	r2, #0
 8007290:	f000 80a0 	beq.w	80073d4 <_dtoa_r+0x894>
 8007294:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007298:	9e06      	ldr	r6, [sp, #24]
 800729a:	4645      	mov	r5, r8
 800729c:	9a04      	ldr	r2, [sp, #16]
 800729e:	2101      	movs	r1, #1
 80072a0:	441a      	add	r2, r3
 80072a2:	4620      	mov	r0, r4
 80072a4:	4498      	add	r8, r3
 80072a6:	9204      	str	r2, [sp, #16]
 80072a8:	f000 fb4c 	bl	8007944 <__i2b>
 80072ac:	4607      	mov	r7, r0
 80072ae:	2d00      	cmp	r5, #0
 80072b0:	dd0b      	ble.n	80072ca <_dtoa_r+0x78a>
 80072b2:	9b04      	ldr	r3, [sp, #16]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	dd08      	ble.n	80072ca <_dtoa_r+0x78a>
 80072b8:	42ab      	cmp	r3, r5
 80072ba:	9a04      	ldr	r2, [sp, #16]
 80072bc:	bfa8      	it	ge
 80072be:	462b      	movge	r3, r5
 80072c0:	eba8 0803 	sub.w	r8, r8, r3
 80072c4:	1aed      	subs	r5, r5, r3
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	9304      	str	r3, [sp, #16]
 80072ca:	9b06      	ldr	r3, [sp, #24]
 80072cc:	b1fb      	cbz	r3, 800730e <_dtoa_r+0x7ce>
 80072ce:	9b08      	ldr	r3, [sp, #32]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 809f 	beq.w	8007414 <_dtoa_r+0x8d4>
 80072d6:	2e00      	cmp	r6, #0
 80072d8:	dd11      	ble.n	80072fe <_dtoa_r+0x7be>
 80072da:	4639      	mov	r1, r7
 80072dc:	4632      	mov	r2, r6
 80072de:	4620      	mov	r0, r4
 80072e0:	f000 fbec 	bl	8007abc <__pow5mult>
 80072e4:	465a      	mov	r2, fp
 80072e6:	4601      	mov	r1, r0
 80072e8:	4607      	mov	r7, r0
 80072ea:	4620      	mov	r0, r4
 80072ec:	f000 fb40 	bl	8007970 <__multiply>
 80072f0:	4659      	mov	r1, fp
 80072f2:	9007      	str	r0, [sp, #28]
 80072f4:	4620      	mov	r0, r4
 80072f6:	f000 fa69 	bl	80077cc <_Bfree>
 80072fa:	9b07      	ldr	r3, [sp, #28]
 80072fc:	469b      	mov	fp, r3
 80072fe:	9b06      	ldr	r3, [sp, #24]
 8007300:	1b9a      	subs	r2, r3, r6
 8007302:	d004      	beq.n	800730e <_dtoa_r+0x7ce>
 8007304:	4659      	mov	r1, fp
 8007306:	4620      	mov	r0, r4
 8007308:	f000 fbd8 	bl	8007abc <__pow5mult>
 800730c:	4683      	mov	fp, r0
 800730e:	2101      	movs	r1, #1
 8007310:	4620      	mov	r0, r4
 8007312:	f000 fb17 	bl	8007944 <__i2b>
 8007316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007318:	2b00      	cmp	r3, #0
 800731a:	4606      	mov	r6, r0
 800731c:	dd7c      	ble.n	8007418 <_dtoa_r+0x8d8>
 800731e:	461a      	mov	r2, r3
 8007320:	4601      	mov	r1, r0
 8007322:	4620      	mov	r0, r4
 8007324:	f000 fbca 	bl	8007abc <__pow5mult>
 8007328:	9b05      	ldr	r3, [sp, #20]
 800732a:	2b01      	cmp	r3, #1
 800732c:	4606      	mov	r6, r0
 800732e:	dd76      	ble.n	800741e <_dtoa_r+0x8de>
 8007330:	2300      	movs	r3, #0
 8007332:	9306      	str	r3, [sp, #24]
 8007334:	6933      	ldr	r3, [r6, #16]
 8007336:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800733a:	6918      	ldr	r0, [r3, #16]
 800733c:	f000 fab2 	bl	80078a4 <__hi0bits>
 8007340:	f1c0 0020 	rsb	r0, r0, #32
 8007344:	9b04      	ldr	r3, [sp, #16]
 8007346:	4418      	add	r0, r3
 8007348:	f010 001f 	ands.w	r0, r0, #31
 800734c:	f000 8086 	beq.w	800745c <_dtoa_r+0x91c>
 8007350:	f1c0 0320 	rsb	r3, r0, #32
 8007354:	2b04      	cmp	r3, #4
 8007356:	dd7f      	ble.n	8007458 <_dtoa_r+0x918>
 8007358:	f1c0 001c 	rsb	r0, r0, #28
 800735c:	9b04      	ldr	r3, [sp, #16]
 800735e:	4403      	add	r3, r0
 8007360:	4480      	add	r8, r0
 8007362:	4405      	add	r5, r0
 8007364:	9304      	str	r3, [sp, #16]
 8007366:	f1b8 0f00 	cmp.w	r8, #0
 800736a:	dd05      	ble.n	8007378 <_dtoa_r+0x838>
 800736c:	4659      	mov	r1, fp
 800736e:	4642      	mov	r2, r8
 8007370:	4620      	mov	r0, r4
 8007372:	f000 fbfd 	bl	8007b70 <__lshift>
 8007376:	4683      	mov	fp, r0
 8007378:	9b04      	ldr	r3, [sp, #16]
 800737a:	2b00      	cmp	r3, #0
 800737c:	dd05      	ble.n	800738a <_dtoa_r+0x84a>
 800737e:	4631      	mov	r1, r6
 8007380:	461a      	mov	r2, r3
 8007382:	4620      	mov	r0, r4
 8007384:	f000 fbf4 	bl	8007b70 <__lshift>
 8007388:	4606      	mov	r6, r0
 800738a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800738c:	2b00      	cmp	r3, #0
 800738e:	d069      	beq.n	8007464 <_dtoa_r+0x924>
 8007390:	4631      	mov	r1, r6
 8007392:	4658      	mov	r0, fp
 8007394:	f000 fc58 	bl	8007c48 <__mcmp>
 8007398:	2800      	cmp	r0, #0
 800739a:	da63      	bge.n	8007464 <_dtoa_r+0x924>
 800739c:	2300      	movs	r3, #0
 800739e:	4659      	mov	r1, fp
 80073a0:	220a      	movs	r2, #10
 80073a2:	4620      	mov	r0, r4
 80073a4:	f000 fa34 	bl	8007810 <__multadd>
 80073a8:	9b08      	ldr	r3, [sp, #32]
 80073aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073ae:	4683      	mov	fp, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f000 818f 	beq.w	80076d4 <_dtoa_r+0xb94>
 80073b6:	4639      	mov	r1, r7
 80073b8:	2300      	movs	r3, #0
 80073ba:	220a      	movs	r2, #10
 80073bc:	4620      	mov	r0, r4
 80073be:	f000 fa27 	bl	8007810 <__multadd>
 80073c2:	f1b9 0f00 	cmp.w	r9, #0
 80073c6:	4607      	mov	r7, r0
 80073c8:	f300 808e 	bgt.w	80074e8 <_dtoa_r+0x9a8>
 80073cc:	9b05      	ldr	r3, [sp, #20]
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	dc50      	bgt.n	8007474 <_dtoa_r+0x934>
 80073d2:	e089      	b.n	80074e8 <_dtoa_r+0x9a8>
 80073d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80073da:	e75d      	b.n	8007298 <_dtoa_r+0x758>
 80073dc:	9b01      	ldr	r3, [sp, #4]
 80073de:	1e5e      	subs	r6, r3, #1
 80073e0:	9b06      	ldr	r3, [sp, #24]
 80073e2:	42b3      	cmp	r3, r6
 80073e4:	bfbf      	itttt	lt
 80073e6:	9b06      	ldrlt	r3, [sp, #24]
 80073e8:	9606      	strlt	r6, [sp, #24]
 80073ea:	1af2      	sublt	r2, r6, r3
 80073ec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80073ee:	bfb6      	itet	lt
 80073f0:	189b      	addlt	r3, r3, r2
 80073f2:	1b9e      	subge	r6, r3, r6
 80073f4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80073f6:	9b01      	ldr	r3, [sp, #4]
 80073f8:	bfb8      	it	lt
 80073fa:	2600      	movlt	r6, #0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	bfb5      	itete	lt
 8007400:	eba8 0503 	sublt.w	r5, r8, r3
 8007404:	9b01      	ldrge	r3, [sp, #4]
 8007406:	2300      	movlt	r3, #0
 8007408:	4645      	movge	r5, r8
 800740a:	e747      	b.n	800729c <_dtoa_r+0x75c>
 800740c:	9e06      	ldr	r6, [sp, #24]
 800740e:	9f08      	ldr	r7, [sp, #32]
 8007410:	4645      	mov	r5, r8
 8007412:	e74c      	b.n	80072ae <_dtoa_r+0x76e>
 8007414:	9a06      	ldr	r2, [sp, #24]
 8007416:	e775      	b.n	8007304 <_dtoa_r+0x7c4>
 8007418:	9b05      	ldr	r3, [sp, #20]
 800741a:	2b01      	cmp	r3, #1
 800741c:	dc18      	bgt.n	8007450 <_dtoa_r+0x910>
 800741e:	9b02      	ldr	r3, [sp, #8]
 8007420:	b9b3      	cbnz	r3, 8007450 <_dtoa_r+0x910>
 8007422:	9b03      	ldr	r3, [sp, #12]
 8007424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007428:	b9a3      	cbnz	r3, 8007454 <_dtoa_r+0x914>
 800742a:	9b03      	ldr	r3, [sp, #12]
 800742c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007430:	0d1b      	lsrs	r3, r3, #20
 8007432:	051b      	lsls	r3, r3, #20
 8007434:	b12b      	cbz	r3, 8007442 <_dtoa_r+0x902>
 8007436:	9b04      	ldr	r3, [sp, #16]
 8007438:	3301      	adds	r3, #1
 800743a:	9304      	str	r3, [sp, #16]
 800743c:	f108 0801 	add.w	r8, r8, #1
 8007440:	2301      	movs	r3, #1
 8007442:	9306      	str	r3, [sp, #24]
 8007444:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007446:	2b00      	cmp	r3, #0
 8007448:	f47f af74 	bne.w	8007334 <_dtoa_r+0x7f4>
 800744c:	2001      	movs	r0, #1
 800744e:	e779      	b.n	8007344 <_dtoa_r+0x804>
 8007450:	2300      	movs	r3, #0
 8007452:	e7f6      	b.n	8007442 <_dtoa_r+0x902>
 8007454:	9b02      	ldr	r3, [sp, #8]
 8007456:	e7f4      	b.n	8007442 <_dtoa_r+0x902>
 8007458:	d085      	beq.n	8007366 <_dtoa_r+0x826>
 800745a:	4618      	mov	r0, r3
 800745c:	301c      	adds	r0, #28
 800745e:	e77d      	b.n	800735c <_dtoa_r+0x81c>
 8007460:	40240000 	.word	0x40240000
 8007464:	9b01      	ldr	r3, [sp, #4]
 8007466:	2b00      	cmp	r3, #0
 8007468:	dc38      	bgt.n	80074dc <_dtoa_r+0x99c>
 800746a:	9b05      	ldr	r3, [sp, #20]
 800746c:	2b02      	cmp	r3, #2
 800746e:	dd35      	ble.n	80074dc <_dtoa_r+0x99c>
 8007470:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007474:	f1b9 0f00 	cmp.w	r9, #0
 8007478:	d10d      	bne.n	8007496 <_dtoa_r+0x956>
 800747a:	4631      	mov	r1, r6
 800747c:	464b      	mov	r3, r9
 800747e:	2205      	movs	r2, #5
 8007480:	4620      	mov	r0, r4
 8007482:	f000 f9c5 	bl	8007810 <__multadd>
 8007486:	4601      	mov	r1, r0
 8007488:	4606      	mov	r6, r0
 800748a:	4658      	mov	r0, fp
 800748c:	f000 fbdc 	bl	8007c48 <__mcmp>
 8007490:	2800      	cmp	r0, #0
 8007492:	f73f adbd 	bgt.w	8007010 <_dtoa_r+0x4d0>
 8007496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007498:	9d00      	ldr	r5, [sp, #0]
 800749a:	ea6f 0a03 	mvn.w	sl, r3
 800749e:	f04f 0800 	mov.w	r8, #0
 80074a2:	4631      	mov	r1, r6
 80074a4:	4620      	mov	r0, r4
 80074a6:	f000 f991 	bl	80077cc <_Bfree>
 80074aa:	2f00      	cmp	r7, #0
 80074ac:	f43f aeb4 	beq.w	8007218 <_dtoa_r+0x6d8>
 80074b0:	f1b8 0f00 	cmp.w	r8, #0
 80074b4:	d005      	beq.n	80074c2 <_dtoa_r+0x982>
 80074b6:	45b8      	cmp	r8, r7
 80074b8:	d003      	beq.n	80074c2 <_dtoa_r+0x982>
 80074ba:	4641      	mov	r1, r8
 80074bc:	4620      	mov	r0, r4
 80074be:	f000 f985 	bl	80077cc <_Bfree>
 80074c2:	4639      	mov	r1, r7
 80074c4:	4620      	mov	r0, r4
 80074c6:	f000 f981 	bl	80077cc <_Bfree>
 80074ca:	e6a5      	b.n	8007218 <_dtoa_r+0x6d8>
 80074cc:	2600      	movs	r6, #0
 80074ce:	4637      	mov	r7, r6
 80074d0:	e7e1      	b.n	8007496 <_dtoa_r+0x956>
 80074d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80074d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80074d8:	4637      	mov	r7, r6
 80074da:	e599      	b.n	8007010 <_dtoa_r+0x4d0>
 80074dc:	9b08      	ldr	r3, [sp, #32]
 80074de:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f000 80fd 	beq.w	80076e2 <_dtoa_r+0xba2>
 80074e8:	2d00      	cmp	r5, #0
 80074ea:	dd05      	ble.n	80074f8 <_dtoa_r+0x9b8>
 80074ec:	4639      	mov	r1, r7
 80074ee:	462a      	mov	r2, r5
 80074f0:	4620      	mov	r0, r4
 80074f2:	f000 fb3d 	bl	8007b70 <__lshift>
 80074f6:	4607      	mov	r7, r0
 80074f8:	9b06      	ldr	r3, [sp, #24]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d05c      	beq.n	80075b8 <_dtoa_r+0xa78>
 80074fe:	6879      	ldr	r1, [r7, #4]
 8007500:	4620      	mov	r0, r4
 8007502:	f000 f923 	bl	800774c <_Balloc>
 8007506:	4605      	mov	r5, r0
 8007508:	b928      	cbnz	r0, 8007516 <_dtoa_r+0x9d6>
 800750a:	4b80      	ldr	r3, [pc, #512]	; (800770c <_dtoa_r+0xbcc>)
 800750c:	4602      	mov	r2, r0
 800750e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007512:	f7ff bb2e 	b.w	8006b72 <_dtoa_r+0x32>
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	3202      	adds	r2, #2
 800751a:	0092      	lsls	r2, r2, #2
 800751c:	f107 010c 	add.w	r1, r7, #12
 8007520:	300c      	adds	r0, #12
 8007522:	f000 f905 	bl	8007730 <memcpy>
 8007526:	2201      	movs	r2, #1
 8007528:	4629      	mov	r1, r5
 800752a:	4620      	mov	r0, r4
 800752c:	f000 fb20 	bl	8007b70 <__lshift>
 8007530:	9b00      	ldr	r3, [sp, #0]
 8007532:	3301      	adds	r3, #1
 8007534:	9301      	str	r3, [sp, #4]
 8007536:	9b00      	ldr	r3, [sp, #0]
 8007538:	444b      	add	r3, r9
 800753a:	9307      	str	r3, [sp, #28]
 800753c:	9b02      	ldr	r3, [sp, #8]
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	46b8      	mov	r8, r7
 8007544:	9306      	str	r3, [sp, #24]
 8007546:	4607      	mov	r7, r0
 8007548:	9b01      	ldr	r3, [sp, #4]
 800754a:	4631      	mov	r1, r6
 800754c:	3b01      	subs	r3, #1
 800754e:	4658      	mov	r0, fp
 8007550:	9302      	str	r3, [sp, #8]
 8007552:	f7ff fa69 	bl	8006a28 <quorem>
 8007556:	4603      	mov	r3, r0
 8007558:	3330      	adds	r3, #48	; 0x30
 800755a:	9004      	str	r0, [sp, #16]
 800755c:	4641      	mov	r1, r8
 800755e:	4658      	mov	r0, fp
 8007560:	9308      	str	r3, [sp, #32]
 8007562:	f000 fb71 	bl	8007c48 <__mcmp>
 8007566:	463a      	mov	r2, r7
 8007568:	4681      	mov	r9, r0
 800756a:	4631      	mov	r1, r6
 800756c:	4620      	mov	r0, r4
 800756e:	f000 fb87 	bl	8007c80 <__mdiff>
 8007572:	68c2      	ldr	r2, [r0, #12]
 8007574:	9b08      	ldr	r3, [sp, #32]
 8007576:	4605      	mov	r5, r0
 8007578:	bb02      	cbnz	r2, 80075bc <_dtoa_r+0xa7c>
 800757a:	4601      	mov	r1, r0
 800757c:	4658      	mov	r0, fp
 800757e:	f000 fb63 	bl	8007c48 <__mcmp>
 8007582:	9b08      	ldr	r3, [sp, #32]
 8007584:	4602      	mov	r2, r0
 8007586:	4629      	mov	r1, r5
 8007588:	4620      	mov	r0, r4
 800758a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800758e:	f000 f91d 	bl	80077cc <_Bfree>
 8007592:	9b05      	ldr	r3, [sp, #20]
 8007594:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007596:	9d01      	ldr	r5, [sp, #4]
 8007598:	ea43 0102 	orr.w	r1, r3, r2
 800759c:	9b06      	ldr	r3, [sp, #24]
 800759e:	430b      	orrs	r3, r1
 80075a0:	9b08      	ldr	r3, [sp, #32]
 80075a2:	d10d      	bne.n	80075c0 <_dtoa_r+0xa80>
 80075a4:	2b39      	cmp	r3, #57	; 0x39
 80075a6:	d029      	beq.n	80075fc <_dtoa_r+0xabc>
 80075a8:	f1b9 0f00 	cmp.w	r9, #0
 80075ac:	dd01      	ble.n	80075b2 <_dtoa_r+0xa72>
 80075ae:	9b04      	ldr	r3, [sp, #16]
 80075b0:	3331      	adds	r3, #49	; 0x31
 80075b2:	9a02      	ldr	r2, [sp, #8]
 80075b4:	7013      	strb	r3, [r2, #0]
 80075b6:	e774      	b.n	80074a2 <_dtoa_r+0x962>
 80075b8:	4638      	mov	r0, r7
 80075ba:	e7b9      	b.n	8007530 <_dtoa_r+0x9f0>
 80075bc:	2201      	movs	r2, #1
 80075be:	e7e2      	b.n	8007586 <_dtoa_r+0xa46>
 80075c0:	f1b9 0f00 	cmp.w	r9, #0
 80075c4:	db06      	blt.n	80075d4 <_dtoa_r+0xa94>
 80075c6:	9905      	ldr	r1, [sp, #20]
 80075c8:	ea41 0909 	orr.w	r9, r1, r9
 80075cc:	9906      	ldr	r1, [sp, #24]
 80075ce:	ea59 0101 	orrs.w	r1, r9, r1
 80075d2:	d120      	bne.n	8007616 <_dtoa_r+0xad6>
 80075d4:	2a00      	cmp	r2, #0
 80075d6:	ddec      	ble.n	80075b2 <_dtoa_r+0xa72>
 80075d8:	4659      	mov	r1, fp
 80075da:	2201      	movs	r2, #1
 80075dc:	4620      	mov	r0, r4
 80075de:	9301      	str	r3, [sp, #4]
 80075e0:	f000 fac6 	bl	8007b70 <__lshift>
 80075e4:	4631      	mov	r1, r6
 80075e6:	4683      	mov	fp, r0
 80075e8:	f000 fb2e 	bl	8007c48 <__mcmp>
 80075ec:	2800      	cmp	r0, #0
 80075ee:	9b01      	ldr	r3, [sp, #4]
 80075f0:	dc02      	bgt.n	80075f8 <_dtoa_r+0xab8>
 80075f2:	d1de      	bne.n	80075b2 <_dtoa_r+0xa72>
 80075f4:	07da      	lsls	r2, r3, #31
 80075f6:	d5dc      	bpl.n	80075b2 <_dtoa_r+0xa72>
 80075f8:	2b39      	cmp	r3, #57	; 0x39
 80075fa:	d1d8      	bne.n	80075ae <_dtoa_r+0xa6e>
 80075fc:	9a02      	ldr	r2, [sp, #8]
 80075fe:	2339      	movs	r3, #57	; 0x39
 8007600:	7013      	strb	r3, [r2, #0]
 8007602:	462b      	mov	r3, r5
 8007604:	461d      	mov	r5, r3
 8007606:	3b01      	subs	r3, #1
 8007608:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800760c:	2a39      	cmp	r2, #57	; 0x39
 800760e:	d050      	beq.n	80076b2 <_dtoa_r+0xb72>
 8007610:	3201      	adds	r2, #1
 8007612:	701a      	strb	r2, [r3, #0]
 8007614:	e745      	b.n	80074a2 <_dtoa_r+0x962>
 8007616:	2a00      	cmp	r2, #0
 8007618:	dd03      	ble.n	8007622 <_dtoa_r+0xae2>
 800761a:	2b39      	cmp	r3, #57	; 0x39
 800761c:	d0ee      	beq.n	80075fc <_dtoa_r+0xabc>
 800761e:	3301      	adds	r3, #1
 8007620:	e7c7      	b.n	80075b2 <_dtoa_r+0xa72>
 8007622:	9a01      	ldr	r2, [sp, #4]
 8007624:	9907      	ldr	r1, [sp, #28]
 8007626:	f802 3c01 	strb.w	r3, [r2, #-1]
 800762a:	428a      	cmp	r2, r1
 800762c:	d02a      	beq.n	8007684 <_dtoa_r+0xb44>
 800762e:	4659      	mov	r1, fp
 8007630:	2300      	movs	r3, #0
 8007632:	220a      	movs	r2, #10
 8007634:	4620      	mov	r0, r4
 8007636:	f000 f8eb 	bl	8007810 <__multadd>
 800763a:	45b8      	cmp	r8, r7
 800763c:	4683      	mov	fp, r0
 800763e:	f04f 0300 	mov.w	r3, #0
 8007642:	f04f 020a 	mov.w	r2, #10
 8007646:	4641      	mov	r1, r8
 8007648:	4620      	mov	r0, r4
 800764a:	d107      	bne.n	800765c <_dtoa_r+0xb1c>
 800764c:	f000 f8e0 	bl	8007810 <__multadd>
 8007650:	4680      	mov	r8, r0
 8007652:	4607      	mov	r7, r0
 8007654:	9b01      	ldr	r3, [sp, #4]
 8007656:	3301      	adds	r3, #1
 8007658:	9301      	str	r3, [sp, #4]
 800765a:	e775      	b.n	8007548 <_dtoa_r+0xa08>
 800765c:	f000 f8d8 	bl	8007810 <__multadd>
 8007660:	4639      	mov	r1, r7
 8007662:	4680      	mov	r8, r0
 8007664:	2300      	movs	r3, #0
 8007666:	220a      	movs	r2, #10
 8007668:	4620      	mov	r0, r4
 800766a:	f000 f8d1 	bl	8007810 <__multadd>
 800766e:	4607      	mov	r7, r0
 8007670:	e7f0      	b.n	8007654 <_dtoa_r+0xb14>
 8007672:	f1b9 0f00 	cmp.w	r9, #0
 8007676:	9a00      	ldr	r2, [sp, #0]
 8007678:	bfcc      	ite	gt
 800767a:	464d      	movgt	r5, r9
 800767c:	2501      	movle	r5, #1
 800767e:	4415      	add	r5, r2
 8007680:	f04f 0800 	mov.w	r8, #0
 8007684:	4659      	mov	r1, fp
 8007686:	2201      	movs	r2, #1
 8007688:	4620      	mov	r0, r4
 800768a:	9301      	str	r3, [sp, #4]
 800768c:	f000 fa70 	bl	8007b70 <__lshift>
 8007690:	4631      	mov	r1, r6
 8007692:	4683      	mov	fp, r0
 8007694:	f000 fad8 	bl	8007c48 <__mcmp>
 8007698:	2800      	cmp	r0, #0
 800769a:	dcb2      	bgt.n	8007602 <_dtoa_r+0xac2>
 800769c:	d102      	bne.n	80076a4 <_dtoa_r+0xb64>
 800769e:	9b01      	ldr	r3, [sp, #4]
 80076a0:	07db      	lsls	r3, r3, #31
 80076a2:	d4ae      	bmi.n	8007602 <_dtoa_r+0xac2>
 80076a4:	462b      	mov	r3, r5
 80076a6:	461d      	mov	r5, r3
 80076a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076ac:	2a30      	cmp	r2, #48	; 0x30
 80076ae:	d0fa      	beq.n	80076a6 <_dtoa_r+0xb66>
 80076b0:	e6f7      	b.n	80074a2 <_dtoa_r+0x962>
 80076b2:	9a00      	ldr	r2, [sp, #0]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d1a5      	bne.n	8007604 <_dtoa_r+0xac4>
 80076b8:	f10a 0a01 	add.w	sl, sl, #1
 80076bc:	2331      	movs	r3, #49	; 0x31
 80076be:	e779      	b.n	80075b4 <_dtoa_r+0xa74>
 80076c0:	4b13      	ldr	r3, [pc, #76]	; (8007710 <_dtoa_r+0xbd0>)
 80076c2:	f7ff baaf 	b.w	8006c24 <_dtoa_r+0xe4>
 80076c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f47f aa86 	bne.w	8006bda <_dtoa_r+0x9a>
 80076ce:	4b11      	ldr	r3, [pc, #68]	; (8007714 <_dtoa_r+0xbd4>)
 80076d0:	f7ff baa8 	b.w	8006c24 <_dtoa_r+0xe4>
 80076d4:	f1b9 0f00 	cmp.w	r9, #0
 80076d8:	dc03      	bgt.n	80076e2 <_dtoa_r+0xba2>
 80076da:	9b05      	ldr	r3, [sp, #20]
 80076dc:	2b02      	cmp	r3, #2
 80076de:	f73f aec9 	bgt.w	8007474 <_dtoa_r+0x934>
 80076e2:	9d00      	ldr	r5, [sp, #0]
 80076e4:	4631      	mov	r1, r6
 80076e6:	4658      	mov	r0, fp
 80076e8:	f7ff f99e 	bl	8006a28 <quorem>
 80076ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80076f0:	f805 3b01 	strb.w	r3, [r5], #1
 80076f4:	9a00      	ldr	r2, [sp, #0]
 80076f6:	1aaa      	subs	r2, r5, r2
 80076f8:	4591      	cmp	r9, r2
 80076fa:	ddba      	ble.n	8007672 <_dtoa_r+0xb32>
 80076fc:	4659      	mov	r1, fp
 80076fe:	2300      	movs	r3, #0
 8007700:	220a      	movs	r2, #10
 8007702:	4620      	mov	r0, r4
 8007704:	f000 f884 	bl	8007810 <__multadd>
 8007708:	4683      	mov	fp, r0
 800770a:	e7eb      	b.n	80076e4 <_dtoa_r+0xba4>
 800770c:	08008ff7 	.word	0x08008ff7
 8007710:	08008f50 	.word	0x08008f50
 8007714:	08008f74 	.word	0x08008f74

08007718 <_localeconv_r>:
 8007718:	4800      	ldr	r0, [pc, #0]	; (800771c <_localeconv_r+0x4>)
 800771a:	4770      	bx	lr
 800771c:	20000178 	.word	0x20000178

08007720 <malloc>:
 8007720:	4b02      	ldr	r3, [pc, #8]	; (800772c <malloc+0xc>)
 8007722:	4601      	mov	r1, r0
 8007724:	6818      	ldr	r0, [r3, #0]
 8007726:	f000 bbef 	b.w	8007f08 <_malloc_r>
 800772a:	bf00      	nop
 800772c:	20000024 	.word	0x20000024

08007730 <memcpy>:
 8007730:	440a      	add	r2, r1
 8007732:	4291      	cmp	r1, r2
 8007734:	f100 33ff 	add.w	r3, r0, #4294967295
 8007738:	d100      	bne.n	800773c <memcpy+0xc>
 800773a:	4770      	bx	lr
 800773c:	b510      	push	{r4, lr}
 800773e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007742:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007746:	4291      	cmp	r1, r2
 8007748:	d1f9      	bne.n	800773e <memcpy+0xe>
 800774a:	bd10      	pop	{r4, pc}

0800774c <_Balloc>:
 800774c:	b570      	push	{r4, r5, r6, lr}
 800774e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007750:	4604      	mov	r4, r0
 8007752:	460d      	mov	r5, r1
 8007754:	b976      	cbnz	r6, 8007774 <_Balloc+0x28>
 8007756:	2010      	movs	r0, #16
 8007758:	f7ff ffe2 	bl	8007720 <malloc>
 800775c:	4602      	mov	r2, r0
 800775e:	6260      	str	r0, [r4, #36]	; 0x24
 8007760:	b920      	cbnz	r0, 800776c <_Balloc+0x20>
 8007762:	4b18      	ldr	r3, [pc, #96]	; (80077c4 <_Balloc+0x78>)
 8007764:	4818      	ldr	r0, [pc, #96]	; (80077c8 <_Balloc+0x7c>)
 8007766:	2166      	movs	r1, #102	; 0x66
 8007768:	f000 fd94 	bl	8008294 <__assert_func>
 800776c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007770:	6006      	str	r6, [r0, #0]
 8007772:	60c6      	str	r6, [r0, #12]
 8007774:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007776:	68f3      	ldr	r3, [r6, #12]
 8007778:	b183      	cbz	r3, 800779c <_Balloc+0x50>
 800777a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007782:	b9b8      	cbnz	r0, 80077b4 <_Balloc+0x68>
 8007784:	2101      	movs	r1, #1
 8007786:	fa01 f605 	lsl.w	r6, r1, r5
 800778a:	1d72      	adds	r2, r6, #5
 800778c:	0092      	lsls	r2, r2, #2
 800778e:	4620      	mov	r0, r4
 8007790:	f000 fb5a 	bl	8007e48 <_calloc_r>
 8007794:	b160      	cbz	r0, 80077b0 <_Balloc+0x64>
 8007796:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800779a:	e00e      	b.n	80077ba <_Balloc+0x6e>
 800779c:	2221      	movs	r2, #33	; 0x21
 800779e:	2104      	movs	r1, #4
 80077a0:	4620      	mov	r0, r4
 80077a2:	f000 fb51 	bl	8007e48 <_calloc_r>
 80077a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077a8:	60f0      	str	r0, [r6, #12]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1e4      	bne.n	800777a <_Balloc+0x2e>
 80077b0:	2000      	movs	r0, #0
 80077b2:	bd70      	pop	{r4, r5, r6, pc}
 80077b4:	6802      	ldr	r2, [r0, #0]
 80077b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077ba:	2300      	movs	r3, #0
 80077bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077c0:	e7f7      	b.n	80077b2 <_Balloc+0x66>
 80077c2:	bf00      	nop
 80077c4:	08008f81 	.word	0x08008f81
 80077c8:	08009008 	.word	0x08009008

080077cc <_Bfree>:
 80077cc:	b570      	push	{r4, r5, r6, lr}
 80077ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80077d0:	4605      	mov	r5, r0
 80077d2:	460c      	mov	r4, r1
 80077d4:	b976      	cbnz	r6, 80077f4 <_Bfree+0x28>
 80077d6:	2010      	movs	r0, #16
 80077d8:	f7ff ffa2 	bl	8007720 <malloc>
 80077dc:	4602      	mov	r2, r0
 80077de:	6268      	str	r0, [r5, #36]	; 0x24
 80077e0:	b920      	cbnz	r0, 80077ec <_Bfree+0x20>
 80077e2:	4b09      	ldr	r3, [pc, #36]	; (8007808 <_Bfree+0x3c>)
 80077e4:	4809      	ldr	r0, [pc, #36]	; (800780c <_Bfree+0x40>)
 80077e6:	218a      	movs	r1, #138	; 0x8a
 80077e8:	f000 fd54 	bl	8008294 <__assert_func>
 80077ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077f0:	6006      	str	r6, [r0, #0]
 80077f2:	60c6      	str	r6, [r0, #12]
 80077f4:	b13c      	cbz	r4, 8007806 <_Bfree+0x3a>
 80077f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80077f8:	6862      	ldr	r2, [r4, #4]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007800:	6021      	str	r1, [r4, #0]
 8007802:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007806:	bd70      	pop	{r4, r5, r6, pc}
 8007808:	08008f81 	.word	0x08008f81
 800780c:	08009008 	.word	0x08009008

08007810 <__multadd>:
 8007810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007814:	690e      	ldr	r6, [r1, #16]
 8007816:	4607      	mov	r7, r0
 8007818:	4698      	mov	r8, r3
 800781a:	460c      	mov	r4, r1
 800781c:	f101 0014 	add.w	r0, r1, #20
 8007820:	2300      	movs	r3, #0
 8007822:	6805      	ldr	r5, [r0, #0]
 8007824:	b2a9      	uxth	r1, r5
 8007826:	fb02 8101 	mla	r1, r2, r1, r8
 800782a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800782e:	0c2d      	lsrs	r5, r5, #16
 8007830:	fb02 c505 	mla	r5, r2, r5, ip
 8007834:	b289      	uxth	r1, r1
 8007836:	3301      	adds	r3, #1
 8007838:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800783c:	429e      	cmp	r6, r3
 800783e:	f840 1b04 	str.w	r1, [r0], #4
 8007842:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007846:	dcec      	bgt.n	8007822 <__multadd+0x12>
 8007848:	f1b8 0f00 	cmp.w	r8, #0
 800784c:	d022      	beq.n	8007894 <__multadd+0x84>
 800784e:	68a3      	ldr	r3, [r4, #8]
 8007850:	42b3      	cmp	r3, r6
 8007852:	dc19      	bgt.n	8007888 <__multadd+0x78>
 8007854:	6861      	ldr	r1, [r4, #4]
 8007856:	4638      	mov	r0, r7
 8007858:	3101      	adds	r1, #1
 800785a:	f7ff ff77 	bl	800774c <_Balloc>
 800785e:	4605      	mov	r5, r0
 8007860:	b928      	cbnz	r0, 800786e <__multadd+0x5e>
 8007862:	4602      	mov	r2, r0
 8007864:	4b0d      	ldr	r3, [pc, #52]	; (800789c <__multadd+0x8c>)
 8007866:	480e      	ldr	r0, [pc, #56]	; (80078a0 <__multadd+0x90>)
 8007868:	21b5      	movs	r1, #181	; 0xb5
 800786a:	f000 fd13 	bl	8008294 <__assert_func>
 800786e:	6922      	ldr	r2, [r4, #16]
 8007870:	3202      	adds	r2, #2
 8007872:	f104 010c 	add.w	r1, r4, #12
 8007876:	0092      	lsls	r2, r2, #2
 8007878:	300c      	adds	r0, #12
 800787a:	f7ff ff59 	bl	8007730 <memcpy>
 800787e:	4621      	mov	r1, r4
 8007880:	4638      	mov	r0, r7
 8007882:	f7ff ffa3 	bl	80077cc <_Bfree>
 8007886:	462c      	mov	r4, r5
 8007888:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800788c:	3601      	adds	r6, #1
 800788e:	f8c3 8014 	str.w	r8, [r3, #20]
 8007892:	6126      	str	r6, [r4, #16]
 8007894:	4620      	mov	r0, r4
 8007896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800789a:	bf00      	nop
 800789c:	08008ff7 	.word	0x08008ff7
 80078a0:	08009008 	.word	0x08009008

080078a4 <__hi0bits>:
 80078a4:	0c03      	lsrs	r3, r0, #16
 80078a6:	041b      	lsls	r3, r3, #16
 80078a8:	b9d3      	cbnz	r3, 80078e0 <__hi0bits+0x3c>
 80078aa:	0400      	lsls	r0, r0, #16
 80078ac:	2310      	movs	r3, #16
 80078ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80078b2:	bf04      	itt	eq
 80078b4:	0200      	lsleq	r0, r0, #8
 80078b6:	3308      	addeq	r3, #8
 80078b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80078bc:	bf04      	itt	eq
 80078be:	0100      	lsleq	r0, r0, #4
 80078c0:	3304      	addeq	r3, #4
 80078c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80078c6:	bf04      	itt	eq
 80078c8:	0080      	lsleq	r0, r0, #2
 80078ca:	3302      	addeq	r3, #2
 80078cc:	2800      	cmp	r0, #0
 80078ce:	db05      	blt.n	80078dc <__hi0bits+0x38>
 80078d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80078d4:	f103 0301 	add.w	r3, r3, #1
 80078d8:	bf08      	it	eq
 80078da:	2320      	moveq	r3, #32
 80078dc:	4618      	mov	r0, r3
 80078de:	4770      	bx	lr
 80078e0:	2300      	movs	r3, #0
 80078e2:	e7e4      	b.n	80078ae <__hi0bits+0xa>

080078e4 <__lo0bits>:
 80078e4:	6803      	ldr	r3, [r0, #0]
 80078e6:	f013 0207 	ands.w	r2, r3, #7
 80078ea:	4601      	mov	r1, r0
 80078ec:	d00b      	beq.n	8007906 <__lo0bits+0x22>
 80078ee:	07da      	lsls	r2, r3, #31
 80078f0:	d424      	bmi.n	800793c <__lo0bits+0x58>
 80078f2:	0798      	lsls	r0, r3, #30
 80078f4:	bf49      	itett	mi
 80078f6:	085b      	lsrmi	r3, r3, #1
 80078f8:	089b      	lsrpl	r3, r3, #2
 80078fa:	2001      	movmi	r0, #1
 80078fc:	600b      	strmi	r3, [r1, #0]
 80078fe:	bf5c      	itt	pl
 8007900:	600b      	strpl	r3, [r1, #0]
 8007902:	2002      	movpl	r0, #2
 8007904:	4770      	bx	lr
 8007906:	b298      	uxth	r0, r3
 8007908:	b9b0      	cbnz	r0, 8007938 <__lo0bits+0x54>
 800790a:	0c1b      	lsrs	r3, r3, #16
 800790c:	2010      	movs	r0, #16
 800790e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007912:	bf04      	itt	eq
 8007914:	0a1b      	lsreq	r3, r3, #8
 8007916:	3008      	addeq	r0, #8
 8007918:	071a      	lsls	r2, r3, #28
 800791a:	bf04      	itt	eq
 800791c:	091b      	lsreq	r3, r3, #4
 800791e:	3004      	addeq	r0, #4
 8007920:	079a      	lsls	r2, r3, #30
 8007922:	bf04      	itt	eq
 8007924:	089b      	lsreq	r3, r3, #2
 8007926:	3002      	addeq	r0, #2
 8007928:	07da      	lsls	r2, r3, #31
 800792a:	d403      	bmi.n	8007934 <__lo0bits+0x50>
 800792c:	085b      	lsrs	r3, r3, #1
 800792e:	f100 0001 	add.w	r0, r0, #1
 8007932:	d005      	beq.n	8007940 <__lo0bits+0x5c>
 8007934:	600b      	str	r3, [r1, #0]
 8007936:	4770      	bx	lr
 8007938:	4610      	mov	r0, r2
 800793a:	e7e8      	b.n	800790e <__lo0bits+0x2a>
 800793c:	2000      	movs	r0, #0
 800793e:	4770      	bx	lr
 8007940:	2020      	movs	r0, #32
 8007942:	4770      	bx	lr

08007944 <__i2b>:
 8007944:	b510      	push	{r4, lr}
 8007946:	460c      	mov	r4, r1
 8007948:	2101      	movs	r1, #1
 800794a:	f7ff feff 	bl	800774c <_Balloc>
 800794e:	4602      	mov	r2, r0
 8007950:	b928      	cbnz	r0, 800795e <__i2b+0x1a>
 8007952:	4b05      	ldr	r3, [pc, #20]	; (8007968 <__i2b+0x24>)
 8007954:	4805      	ldr	r0, [pc, #20]	; (800796c <__i2b+0x28>)
 8007956:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800795a:	f000 fc9b 	bl	8008294 <__assert_func>
 800795e:	2301      	movs	r3, #1
 8007960:	6144      	str	r4, [r0, #20]
 8007962:	6103      	str	r3, [r0, #16]
 8007964:	bd10      	pop	{r4, pc}
 8007966:	bf00      	nop
 8007968:	08008ff7 	.word	0x08008ff7
 800796c:	08009008 	.word	0x08009008

08007970 <__multiply>:
 8007970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007974:	4614      	mov	r4, r2
 8007976:	690a      	ldr	r2, [r1, #16]
 8007978:	6923      	ldr	r3, [r4, #16]
 800797a:	429a      	cmp	r2, r3
 800797c:	bfb8      	it	lt
 800797e:	460b      	movlt	r3, r1
 8007980:	460d      	mov	r5, r1
 8007982:	bfbc      	itt	lt
 8007984:	4625      	movlt	r5, r4
 8007986:	461c      	movlt	r4, r3
 8007988:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800798c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007990:	68ab      	ldr	r3, [r5, #8]
 8007992:	6869      	ldr	r1, [r5, #4]
 8007994:	eb0a 0709 	add.w	r7, sl, r9
 8007998:	42bb      	cmp	r3, r7
 800799a:	b085      	sub	sp, #20
 800799c:	bfb8      	it	lt
 800799e:	3101      	addlt	r1, #1
 80079a0:	f7ff fed4 	bl	800774c <_Balloc>
 80079a4:	b930      	cbnz	r0, 80079b4 <__multiply+0x44>
 80079a6:	4602      	mov	r2, r0
 80079a8:	4b42      	ldr	r3, [pc, #264]	; (8007ab4 <__multiply+0x144>)
 80079aa:	4843      	ldr	r0, [pc, #268]	; (8007ab8 <__multiply+0x148>)
 80079ac:	f240 115d 	movw	r1, #349	; 0x15d
 80079b0:	f000 fc70 	bl	8008294 <__assert_func>
 80079b4:	f100 0614 	add.w	r6, r0, #20
 80079b8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80079bc:	4633      	mov	r3, r6
 80079be:	2200      	movs	r2, #0
 80079c0:	4543      	cmp	r3, r8
 80079c2:	d31e      	bcc.n	8007a02 <__multiply+0x92>
 80079c4:	f105 0c14 	add.w	ip, r5, #20
 80079c8:	f104 0314 	add.w	r3, r4, #20
 80079cc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80079d0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80079d4:	9202      	str	r2, [sp, #8]
 80079d6:	ebac 0205 	sub.w	r2, ip, r5
 80079da:	3a15      	subs	r2, #21
 80079dc:	f022 0203 	bic.w	r2, r2, #3
 80079e0:	3204      	adds	r2, #4
 80079e2:	f105 0115 	add.w	r1, r5, #21
 80079e6:	458c      	cmp	ip, r1
 80079e8:	bf38      	it	cc
 80079ea:	2204      	movcc	r2, #4
 80079ec:	9201      	str	r2, [sp, #4]
 80079ee:	9a02      	ldr	r2, [sp, #8]
 80079f0:	9303      	str	r3, [sp, #12]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d808      	bhi.n	8007a08 <__multiply+0x98>
 80079f6:	2f00      	cmp	r7, #0
 80079f8:	dc55      	bgt.n	8007aa6 <__multiply+0x136>
 80079fa:	6107      	str	r7, [r0, #16]
 80079fc:	b005      	add	sp, #20
 80079fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a02:	f843 2b04 	str.w	r2, [r3], #4
 8007a06:	e7db      	b.n	80079c0 <__multiply+0x50>
 8007a08:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a0c:	f1ba 0f00 	cmp.w	sl, #0
 8007a10:	d020      	beq.n	8007a54 <__multiply+0xe4>
 8007a12:	f105 0e14 	add.w	lr, r5, #20
 8007a16:	46b1      	mov	r9, r6
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007a1e:	f8d9 b000 	ldr.w	fp, [r9]
 8007a22:	b2a1      	uxth	r1, r4
 8007a24:	fa1f fb8b 	uxth.w	fp, fp
 8007a28:	fb0a b101 	mla	r1, sl, r1, fp
 8007a2c:	4411      	add	r1, r2
 8007a2e:	f8d9 2000 	ldr.w	r2, [r9]
 8007a32:	0c24      	lsrs	r4, r4, #16
 8007a34:	0c12      	lsrs	r2, r2, #16
 8007a36:	fb0a 2404 	mla	r4, sl, r4, r2
 8007a3a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007a3e:	b289      	uxth	r1, r1
 8007a40:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007a44:	45f4      	cmp	ip, lr
 8007a46:	f849 1b04 	str.w	r1, [r9], #4
 8007a4a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007a4e:	d8e4      	bhi.n	8007a1a <__multiply+0xaa>
 8007a50:	9901      	ldr	r1, [sp, #4]
 8007a52:	5072      	str	r2, [r6, r1]
 8007a54:	9a03      	ldr	r2, [sp, #12]
 8007a56:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a5a:	3304      	adds	r3, #4
 8007a5c:	f1b9 0f00 	cmp.w	r9, #0
 8007a60:	d01f      	beq.n	8007aa2 <__multiply+0x132>
 8007a62:	6834      	ldr	r4, [r6, #0]
 8007a64:	f105 0114 	add.w	r1, r5, #20
 8007a68:	46b6      	mov	lr, r6
 8007a6a:	f04f 0a00 	mov.w	sl, #0
 8007a6e:	880a      	ldrh	r2, [r1, #0]
 8007a70:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007a74:	fb09 b202 	mla	r2, r9, r2, fp
 8007a78:	4492      	add	sl, r2
 8007a7a:	b2a4      	uxth	r4, r4
 8007a7c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007a80:	f84e 4b04 	str.w	r4, [lr], #4
 8007a84:	f851 4b04 	ldr.w	r4, [r1], #4
 8007a88:	f8be 2000 	ldrh.w	r2, [lr]
 8007a8c:	0c24      	lsrs	r4, r4, #16
 8007a8e:	fb09 2404 	mla	r4, r9, r4, r2
 8007a92:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007a96:	458c      	cmp	ip, r1
 8007a98:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007a9c:	d8e7      	bhi.n	8007a6e <__multiply+0xfe>
 8007a9e:	9a01      	ldr	r2, [sp, #4]
 8007aa0:	50b4      	str	r4, [r6, r2]
 8007aa2:	3604      	adds	r6, #4
 8007aa4:	e7a3      	b.n	80079ee <__multiply+0x7e>
 8007aa6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1a5      	bne.n	80079fa <__multiply+0x8a>
 8007aae:	3f01      	subs	r7, #1
 8007ab0:	e7a1      	b.n	80079f6 <__multiply+0x86>
 8007ab2:	bf00      	nop
 8007ab4:	08008ff7 	.word	0x08008ff7
 8007ab8:	08009008 	.word	0x08009008

08007abc <__pow5mult>:
 8007abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ac0:	4615      	mov	r5, r2
 8007ac2:	f012 0203 	ands.w	r2, r2, #3
 8007ac6:	4606      	mov	r6, r0
 8007ac8:	460f      	mov	r7, r1
 8007aca:	d007      	beq.n	8007adc <__pow5mult+0x20>
 8007acc:	4c25      	ldr	r4, [pc, #148]	; (8007b64 <__pow5mult+0xa8>)
 8007ace:	3a01      	subs	r2, #1
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ad6:	f7ff fe9b 	bl	8007810 <__multadd>
 8007ada:	4607      	mov	r7, r0
 8007adc:	10ad      	asrs	r5, r5, #2
 8007ade:	d03d      	beq.n	8007b5c <__pow5mult+0xa0>
 8007ae0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007ae2:	b97c      	cbnz	r4, 8007b04 <__pow5mult+0x48>
 8007ae4:	2010      	movs	r0, #16
 8007ae6:	f7ff fe1b 	bl	8007720 <malloc>
 8007aea:	4602      	mov	r2, r0
 8007aec:	6270      	str	r0, [r6, #36]	; 0x24
 8007aee:	b928      	cbnz	r0, 8007afc <__pow5mult+0x40>
 8007af0:	4b1d      	ldr	r3, [pc, #116]	; (8007b68 <__pow5mult+0xac>)
 8007af2:	481e      	ldr	r0, [pc, #120]	; (8007b6c <__pow5mult+0xb0>)
 8007af4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007af8:	f000 fbcc 	bl	8008294 <__assert_func>
 8007afc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b00:	6004      	str	r4, [r0, #0]
 8007b02:	60c4      	str	r4, [r0, #12]
 8007b04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007b08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b0c:	b94c      	cbnz	r4, 8007b22 <__pow5mult+0x66>
 8007b0e:	f240 2171 	movw	r1, #625	; 0x271
 8007b12:	4630      	mov	r0, r6
 8007b14:	f7ff ff16 	bl	8007944 <__i2b>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b1e:	4604      	mov	r4, r0
 8007b20:	6003      	str	r3, [r0, #0]
 8007b22:	f04f 0900 	mov.w	r9, #0
 8007b26:	07eb      	lsls	r3, r5, #31
 8007b28:	d50a      	bpl.n	8007b40 <__pow5mult+0x84>
 8007b2a:	4639      	mov	r1, r7
 8007b2c:	4622      	mov	r2, r4
 8007b2e:	4630      	mov	r0, r6
 8007b30:	f7ff ff1e 	bl	8007970 <__multiply>
 8007b34:	4639      	mov	r1, r7
 8007b36:	4680      	mov	r8, r0
 8007b38:	4630      	mov	r0, r6
 8007b3a:	f7ff fe47 	bl	80077cc <_Bfree>
 8007b3e:	4647      	mov	r7, r8
 8007b40:	106d      	asrs	r5, r5, #1
 8007b42:	d00b      	beq.n	8007b5c <__pow5mult+0xa0>
 8007b44:	6820      	ldr	r0, [r4, #0]
 8007b46:	b938      	cbnz	r0, 8007b58 <__pow5mult+0x9c>
 8007b48:	4622      	mov	r2, r4
 8007b4a:	4621      	mov	r1, r4
 8007b4c:	4630      	mov	r0, r6
 8007b4e:	f7ff ff0f 	bl	8007970 <__multiply>
 8007b52:	6020      	str	r0, [r4, #0]
 8007b54:	f8c0 9000 	str.w	r9, [r0]
 8007b58:	4604      	mov	r4, r0
 8007b5a:	e7e4      	b.n	8007b26 <__pow5mult+0x6a>
 8007b5c:	4638      	mov	r0, r7
 8007b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b62:	bf00      	nop
 8007b64:	08009158 	.word	0x08009158
 8007b68:	08008f81 	.word	0x08008f81
 8007b6c:	08009008 	.word	0x08009008

08007b70 <__lshift>:
 8007b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b74:	460c      	mov	r4, r1
 8007b76:	6849      	ldr	r1, [r1, #4]
 8007b78:	6923      	ldr	r3, [r4, #16]
 8007b7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b7e:	68a3      	ldr	r3, [r4, #8]
 8007b80:	4607      	mov	r7, r0
 8007b82:	4691      	mov	r9, r2
 8007b84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b88:	f108 0601 	add.w	r6, r8, #1
 8007b8c:	42b3      	cmp	r3, r6
 8007b8e:	db0b      	blt.n	8007ba8 <__lshift+0x38>
 8007b90:	4638      	mov	r0, r7
 8007b92:	f7ff fddb 	bl	800774c <_Balloc>
 8007b96:	4605      	mov	r5, r0
 8007b98:	b948      	cbnz	r0, 8007bae <__lshift+0x3e>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	4b28      	ldr	r3, [pc, #160]	; (8007c40 <__lshift+0xd0>)
 8007b9e:	4829      	ldr	r0, [pc, #164]	; (8007c44 <__lshift+0xd4>)
 8007ba0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007ba4:	f000 fb76 	bl	8008294 <__assert_func>
 8007ba8:	3101      	adds	r1, #1
 8007baa:	005b      	lsls	r3, r3, #1
 8007bac:	e7ee      	b.n	8007b8c <__lshift+0x1c>
 8007bae:	2300      	movs	r3, #0
 8007bb0:	f100 0114 	add.w	r1, r0, #20
 8007bb4:	f100 0210 	add.w	r2, r0, #16
 8007bb8:	4618      	mov	r0, r3
 8007bba:	4553      	cmp	r3, sl
 8007bbc:	db33      	blt.n	8007c26 <__lshift+0xb6>
 8007bbe:	6920      	ldr	r0, [r4, #16]
 8007bc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007bc4:	f104 0314 	add.w	r3, r4, #20
 8007bc8:	f019 091f 	ands.w	r9, r9, #31
 8007bcc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bd0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007bd4:	d02b      	beq.n	8007c2e <__lshift+0xbe>
 8007bd6:	f1c9 0e20 	rsb	lr, r9, #32
 8007bda:	468a      	mov	sl, r1
 8007bdc:	2200      	movs	r2, #0
 8007bde:	6818      	ldr	r0, [r3, #0]
 8007be0:	fa00 f009 	lsl.w	r0, r0, r9
 8007be4:	4302      	orrs	r2, r0
 8007be6:	f84a 2b04 	str.w	r2, [sl], #4
 8007bea:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bee:	459c      	cmp	ip, r3
 8007bf0:	fa22 f20e 	lsr.w	r2, r2, lr
 8007bf4:	d8f3      	bhi.n	8007bde <__lshift+0x6e>
 8007bf6:	ebac 0304 	sub.w	r3, ip, r4
 8007bfa:	3b15      	subs	r3, #21
 8007bfc:	f023 0303 	bic.w	r3, r3, #3
 8007c00:	3304      	adds	r3, #4
 8007c02:	f104 0015 	add.w	r0, r4, #21
 8007c06:	4584      	cmp	ip, r0
 8007c08:	bf38      	it	cc
 8007c0a:	2304      	movcc	r3, #4
 8007c0c:	50ca      	str	r2, [r1, r3]
 8007c0e:	b10a      	cbz	r2, 8007c14 <__lshift+0xa4>
 8007c10:	f108 0602 	add.w	r6, r8, #2
 8007c14:	3e01      	subs	r6, #1
 8007c16:	4638      	mov	r0, r7
 8007c18:	612e      	str	r6, [r5, #16]
 8007c1a:	4621      	mov	r1, r4
 8007c1c:	f7ff fdd6 	bl	80077cc <_Bfree>
 8007c20:	4628      	mov	r0, r5
 8007c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c26:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	e7c5      	b.n	8007bba <__lshift+0x4a>
 8007c2e:	3904      	subs	r1, #4
 8007c30:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c34:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c38:	459c      	cmp	ip, r3
 8007c3a:	d8f9      	bhi.n	8007c30 <__lshift+0xc0>
 8007c3c:	e7ea      	b.n	8007c14 <__lshift+0xa4>
 8007c3e:	bf00      	nop
 8007c40:	08008ff7 	.word	0x08008ff7
 8007c44:	08009008 	.word	0x08009008

08007c48 <__mcmp>:
 8007c48:	b530      	push	{r4, r5, lr}
 8007c4a:	6902      	ldr	r2, [r0, #16]
 8007c4c:	690c      	ldr	r4, [r1, #16]
 8007c4e:	1b12      	subs	r2, r2, r4
 8007c50:	d10e      	bne.n	8007c70 <__mcmp+0x28>
 8007c52:	f100 0314 	add.w	r3, r0, #20
 8007c56:	3114      	adds	r1, #20
 8007c58:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007c5c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007c60:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007c64:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007c68:	42a5      	cmp	r5, r4
 8007c6a:	d003      	beq.n	8007c74 <__mcmp+0x2c>
 8007c6c:	d305      	bcc.n	8007c7a <__mcmp+0x32>
 8007c6e:	2201      	movs	r2, #1
 8007c70:	4610      	mov	r0, r2
 8007c72:	bd30      	pop	{r4, r5, pc}
 8007c74:	4283      	cmp	r3, r0
 8007c76:	d3f3      	bcc.n	8007c60 <__mcmp+0x18>
 8007c78:	e7fa      	b.n	8007c70 <__mcmp+0x28>
 8007c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c7e:	e7f7      	b.n	8007c70 <__mcmp+0x28>

08007c80 <__mdiff>:
 8007c80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c84:	460c      	mov	r4, r1
 8007c86:	4606      	mov	r6, r0
 8007c88:	4611      	mov	r1, r2
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	4617      	mov	r7, r2
 8007c8e:	f7ff ffdb 	bl	8007c48 <__mcmp>
 8007c92:	1e05      	subs	r5, r0, #0
 8007c94:	d110      	bne.n	8007cb8 <__mdiff+0x38>
 8007c96:	4629      	mov	r1, r5
 8007c98:	4630      	mov	r0, r6
 8007c9a:	f7ff fd57 	bl	800774c <_Balloc>
 8007c9e:	b930      	cbnz	r0, 8007cae <__mdiff+0x2e>
 8007ca0:	4b39      	ldr	r3, [pc, #228]	; (8007d88 <__mdiff+0x108>)
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	f240 2132 	movw	r1, #562	; 0x232
 8007ca8:	4838      	ldr	r0, [pc, #224]	; (8007d8c <__mdiff+0x10c>)
 8007caa:	f000 faf3 	bl	8008294 <__assert_func>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007cb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb8:	bfa4      	itt	ge
 8007cba:	463b      	movge	r3, r7
 8007cbc:	4627      	movge	r7, r4
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	6879      	ldr	r1, [r7, #4]
 8007cc2:	bfa6      	itte	ge
 8007cc4:	461c      	movge	r4, r3
 8007cc6:	2500      	movge	r5, #0
 8007cc8:	2501      	movlt	r5, #1
 8007cca:	f7ff fd3f 	bl	800774c <_Balloc>
 8007cce:	b920      	cbnz	r0, 8007cda <__mdiff+0x5a>
 8007cd0:	4b2d      	ldr	r3, [pc, #180]	; (8007d88 <__mdiff+0x108>)
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007cd8:	e7e6      	b.n	8007ca8 <__mdiff+0x28>
 8007cda:	693e      	ldr	r6, [r7, #16]
 8007cdc:	60c5      	str	r5, [r0, #12]
 8007cde:	6925      	ldr	r5, [r4, #16]
 8007ce0:	f107 0114 	add.w	r1, r7, #20
 8007ce4:	f104 0914 	add.w	r9, r4, #20
 8007ce8:	f100 0e14 	add.w	lr, r0, #20
 8007cec:	f107 0210 	add.w	r2, r7, #16
 8007cf0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007cf4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007cf8:	46f2      	mov	sl, lr
 8007cfa:	2700      	movs	r7, #0
 8007cfc:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007d04:	fa1f f883 	uxth.w	r8, r3
 8007d08:	fa17 f78b 	uxtah	r7, r7, fp
 8007d0c:	0c1b      	lsrs	r3, r3, #16
 8007d0e:	eba7 0808 	sub.w	r8, r7, r8
 8007d12:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d16:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007d1a:	fa1f f888 	uxth.w	r8, r8
 8007d1e:	141f      	asrs	r7, r3, #16
 8007d20:	454d      	cmp	r5, r9
 8007d22:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007d26:	f84a 3b04 	str.w	r3, [sl], #4
 8007d2a:	d8e7      	bhi.n	8007cfc <__mdiff+0x7c>
 8007d2c:	1b2b      	subs	r3, r5, r4
 8007d2e:	3b15      	subs	r3, #21
 8007d30:	f023 0303 	bic.w	r3, r3, #3
 8007d34:	3304      	adds	r3, #4
 8007d36:	3415      	adds	r4, #21
 8007d38:	42a5      	cmp	r5, r4
 8007d3a:	bf38      	it	cc
 8007d3c:	2304      	movcc	r3, #4
 8007d3e:	4419      	add	r1, r3
 8007d40:	4473      	add	r3, lr
 8007d42:	469e      	mov	lr, r3
 8007d44:	460d      	mov	r5, r1
 8007d46:	4565      	cmp	r5, ip
 8007d48:	d30e      	bcc.n	8007d68 <__mdiff+0xe8>
 8007d4a:	f10c 0203 	add.w	r2, ip, #3
 8007d4e:	1a52      	subs	r2, r2, r1
 8007d50:	f022 0203 	bic.w	r2, r2, #3
 8007d54:	3903      	subs	r1, #3
 8007d56:	458c      	cmp	ip, r1
 8007d58:	bf38      	it	cc
 8007d5a:	2200      	movcc	r2, #0
 8007d5c:	441a      	add	r2, r3
 8007d5e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007d62:	b17b      	cbz	r3, 8007d84 <__mdiff+0x104>
 8007d64:	6106      	str	r6, [r0, #16]
 8007d66:	e7a5      	b.n	8007cb4 <__mdiff+0x34>
 8007d68:	f855 8b04 	ldr.w	r8, [r5], #4
 8007d6c:	fa17 f488 	uxtah	r4, r7, r8
 8007d70:	1422      	asrs	r2, r4, #16
 8007d72:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007d76:	b2a4      	uxth	r4, r4
 8007d78:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007d7c:	f84e 4b04 	str.w	r4, [lr], #4
 8007d80:	1417      	asrs	r7, r2, #16
 8007d82:	e7e0      	b.n	8007d46 <__mdiff+0xc6>
 8007d84:	3e01      	subs	r6, #1
 8007d86:	e7ea      	b.n	8007d5e <__mdiff+0xde>
 8007d88:	08008ff7 	.word	0x08008ff7
 8007d8c:	08009008 	.word	0x08009008

08007d90 <__d2b>:
 8007d90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d94:	4689      	mov	r9, r1
 8007d96:	2101      	movs	r1, #1
 8007d98:	ec57 6b10 	vmov	r6, r7, d0
 8007d9c:	4690      	mov	r8, r2
 8007d9e:	f7ff fcd5 	bl	800774c <_Balloc>
 8007da2:	4604      	mov	r4, r0
 8007da4:	b930      	cbnz	r0, 8007db4 <__d2b+0x24>
 8007da6:	4602      	mov	r2, r0
 8007da8:	4b25      	ldr	r3, [pc, #148]	; (8007e40 <__d2b+0xb0>)
 8007daa:	4826      	ldr	r0, [pc, #152]	; (8007e44 <__d2b+0xb4>)
 8007dac:	f240 310a 	movw	r1, #778	; 0x30a
 8007db0:	f000 fa70 	bl	8008294 <__assert_func>
 8007db4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007db8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007dbc:	bb35      	cbnz	r5, 8007e0c <__d2b+0x7c>
 8007dbe:	2e00      	cmp	r6, #0
 8007dc0:	9301      	str	r3, [sp, #4]
 8007dc2:	d028      	beq.n	8007e16 <__d2b+0x86>
 8007dc4:	4668      	mov	r0, sp
 8007dc6:	9600      	str	r6, [sp, #0]
 8007dc8:	f7ff fd8c 	bl	80078e4 <__lo0bits>
 8007dcc:	9900      	ldr	r1, [sp, #0]
 8007dce:	b300      	cbz	r0, 8007e12 <__d2b+0x82>
 8007dd0:	9a01      	ldr	r2, [sp, #4]
 8007dd2:	f1c0 0320 	rsb	r3, r0, #32
 8007dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dda:	430b      	orrs	r3, r1
 8007ddc:	40c2      	lsrs	r2, r0
 8007dde:	6163      	str	r3, [r4, #20]
 8007de0:	9201      	str	r2, [sp, #4]
 8007de2:	9b01      	ldr	r3, [sp, #4]
 8007de4:	61a3      	str	r3, [r4, #24]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	bf14      	ite	ne
 8007dea:	2202      	movne	r2, #2
 8007dec:	2201      	moveq	r2, #1
 8007dee:	6122      	str	r2, [r4, #16]
 8007df0:	b1d5      	cbz	r5, 8007e28 <__d2b+0x98>
 8007df2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007df6:	4405      	add	r5, r0
 8007df8:	f8c9 5000 	str.w	r5, [r9]
 8007dfc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e00:	f8c8 0000 	str.w	r0, [r8]
 8007e04:	4620      	mov	r0, r4
 8007e06:	b003      	add	sp, #12
 8007e08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e10:	e7d5      	b.n	8007dbe <__d2b+0x2e>
 8007e12:	6161      	str	r1, [r4, #20]
 8007e14:	e7e5      	b.n	8007de2 <__d2b+0x52>
 8007e16:	a801      	add	r0, sp, #4
 8007e18:	f7ff fd64 	bl	80078e4 <__lo0bits>
 8007e1c:	9b01      	ldr	r3, [sp, #4]
 8007e1e:	6163      	str	r3, [r4, #20]
 8007e20:	2201      	movs	r2, #1
 8007e22:	6122      	str	r2, [r4, #16]
 8007e24:	3020      	adds	r0, #32
 8007e26:	e7e3      	b.n	8007df0 <__d2b+0x60>
 8007e28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e30:	f8c9 0000 	str.w	r0, [r9]
 8007e34:	6918      	ldr	r0, [r3, #16]
 8007e36:	f7ff fd35 	bl	80078a4 <__hi0bits>
 8007e3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e3e:	e7df      	b.n	8007e00 <__d2b+0x70>
 8007e40:	08008ff7 	.word	0x08008ff7
 8007e44:	08009008 	.word	0x08009008

08007e48 <_calloc_r>:
 8007e48:	b513      	push	{r0, r1, r4, lr}
 8007e4a:	434a      	muls	r2, r1
 8007e4c:	4611      	mov	r1, r2
 8007e4e:	9201      	str	r2, [sp, #4]
 8007e50:	f000 f85a 	bl	8007f08 <_malloc_r>
 8007e54:	4604      	mov	r4, r0
 8007e56:	b118      	cbz	r0, 8007e60 <_calloc_r+0x18>
 8007e58:	9a01      	ldr	r2, [sp, #4]
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	f7fe f952 	bl	8006104 <memset>
 8007e60:	4620      	mov	r0, r4
 8007e62:	b002      	add	sp, #8
 8007e64:	bd10      	pop	{r4, pc}
	...

08007e68 <_free_r>:
 8007e68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e6a:	2900      	cmp	r1, #0
 8007e6c:	d048      	beq.n	8007f00 <_free_r+0x98>
 8007e6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e72:	9001      	str	r0, [sp, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f1a1 0404 	sub.w	r4, r1, #4
 8007e7a:	bfb8      	it	lt
 8007e7c:	18e4      	addlt	r4, r4, r3
 8007e7e:	f000 fa65 	bl	800834c <__malloc_lock>
 8007e82:	4a20      	ldr	r2, [pc, #128]	; (8007f04 <_free_r+0x9c>)
 8007e84:	9801      	ldr	r0, [sp, #4]
 8007e86:	6813      	ldr	r3, [r2, #0]
 8007e88:	4615      	mov	r5, r2
 8007e8a:	b933      	cbnz	r3, 8007e9a <_free_r+0x32>
 8007e8c:	6063      	str	r3, [r4, #4]
 8007e8e:	6014      	str	r4, [r2, #0]
 8007e90:	b003      	add	sp, #12
 8007e92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e96:	f000 ba5f 	b.w	8008358 <__malloc_unlock>
 8007e9a:	42a3      	cmp	r3, r4
 8007e9c:	d90b      	bls.n	8007eb6 <_free_r+0x4e>
 8007e9e:	6821      	ldr	r1, [r4, #0]
 8007ea0:	1862      	adds	r2, r4, r1
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	bf04      	itt	eq
 8007ea6:	681a      	ldreq	r2, [r3, #0]
 8007ea8:	685b      	ldreq	r3, [r3, #4]
 8007eaa:	6063      	str	r3, [r4, #4]
 8007eac:	bf04      	itt	eq
 8007eae:	1852      	addeq	r2, r2, r1
 8007eb0:	6022      	streq	r2, [r4, #0]
 8007eb2:	602c      	str	r4, [r5, #0]
 8007eb4:	e7ec      	b.n	8007e90 <_free_r+0x28>
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	b10b      	cbz	r3, 8007ec0 <_free_r+0x58>
 8007ebc:	42a3      	cmp	r3, r4
 8007ebe:	d9fa      	bls.n	8007eb6 <_free_r+0x4e>
 8007ec0:	6811      	ldr	r1, [r2, #0]
 8007ec2:	1855      	adds	r5, r2, r1
 8007ec4:	42a5      	cmp	r5, r4
 8007ec6:	d10b      	bne.n	8007ee0 <_free_r+0x78>
 8007ec8:	6824      	ldr	r4, [r4, #0]
 8007eca:	4421      	add	r1, r4
 8007ecc:	1854      	adds	r4, r2, r1
 8007ece:	42a3      	cmp	r3, r4
 8007ed0:	6011      	str	r1, [r2, #0]
 8007ed2:	d1dd      	bne.n	8007e90 <_free_r+0x28>
 8007ed4:	681c      	ldr	r4, [r3, #0]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	6053      	str	r3, [r2, #4]
 8007eda:	4421      	add	r1, r4
 8007edc:	6011      	str	r1, [r2, #0]
 8007ede:	e7d7      	b.n	8007e90 <_free_r+0x28>
 8007ee0:	d902      	bls.n	8007ee8 <_free_r+0x80>
 8007ee2:	230c      	movs	r3, #12
 8007ee4:	6003      	str	r3, [r0, #0]
 8007ee6:	e7d3      	b.n	8007e90 <_free_r+0x28>
 8007ee8:	6825      	ldr	r5, [r4, #0]
 8007eea:	1961      	adds	r1, r4, r5
 8007eec:	428b      	cmp	r3, r1
 8007eee:	bf04      	itt	eq
 8007ef0:	6819      	ldreq	r1, [r3, #0]
 8007ef2:	685b      	ldreq	r3, [r3, #4]
 8007ef4:	6063      	str	r3, [r4, #4]
 8007ef6:	bf04      	itt	eq
 8007ef8:	1949      	addeq	r1, r1, r5
 8007efa:	6021      	streq	r1, [r4, #0]
 8007efc:	6054      	str	r4, [r2, #4]
 8007efe:	e7c7      	b.n	8007e90 <_free_r+0x28>
 8007f00:	b003      	add	sp, #12
 8007f02:	bd30      	pop	{r4, r5, pc}
 8007f04:	2000023c 	.word	0x2000023c

08007f08 <_malloc_r>:
 8007f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0a:	1ccd      	adds	r5, r1, #3
 8007f0c:	f025 0503 	bic.w	r5, r5, #3
 8007f10:	3508      	adds	r5, #8
 8007f12:	2d0c      	cmp	r5, #12
 8007f14:	bf38      	it	cc
 8007f16:	250c      	movcc	r5, #12
 8007f18:	2d00      	cmp	r5, #0
 8007f1a:	4606      	mov	r6, r0
 8007f1c:	db01      	blt.n	8007f22 <_malloc_r+0x1a>
 8007f1e:	42a9      	cmp	r1, r5
 8007f20:	d903      	bls.n	8007f2a <_malloc_r+0x22>
 8007f22:	230c      	movs	r3, #12
 8007f24:	6033      	str	r3, [r6, #0]
 8007f26:	2000      	movs	r0, #0
 8007f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f2a:	f000 fa0f 	bl	800834c <__malloc_lock>
 8007f2e:	4921      	ldr	r1, [pc, #132]	; (8007fb4 <_malloc_r+0xac>)
 8007f30:	680a      	ldr	r2, [r1, #0]
 8007f32:	4614      	mov	r4, r2
 8007f34:	b99c      	cbnz	r4, 8007f5e <_malloc_r+0x56>
 8007f36:	4f20      	ldr	r7, [pc, #128]	; (8007fb8 <_malloc_r+0xb0>)
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	b923      	cbnz	r3, 8007f46 <_malloc_r+0x3e>
 8007f3c:	4621      	mov	r1, r4
 8007f3e:	4630      	mov	r0, r6
 8007f40:	f000 f998 	bl	8008274 <_sbrk_r>
 8007f44:	6038      	str	r0, [r7, #0]
 8007f46:	4629      	mov	r1, r5
 8007f48:	4630      	mov	r0, r6
 8007f4a:	f000 f993 	bl	8008274 <_sbrk_r>
 8007f4e:	1c43      	adds	r3, r0, #1
 8007f50:	d123      	bne.n	8007f9a <_malloc_r+0x92>
 8007f52:	230c      	movs	r3, #12
 8007f54:	6033      	str	r3, [r6, #0]
 8007f56:	4630      	mov	r0, r6
 8007f58:	f000 f9fe 	bl	8008358 <__malloc_unlock>
 8007f5c:	e7e3      	b.n	8007f26 <_malloc_r+0x1e>
 8007f5e:	6823      	ldr	r3, [r4, #0]
 8007f60:	1b5b      	subs	r3, r3, r5
 8007f62:	d417      	bmi.n	8007f94 <_malloc_r+0x8c>
 8007f64:	2b0b      	cmp	r3, #11
 8007f66:	d903      	bls.n	8007f70 <_malloc_r+0x68>
 8007f68:	6023      	str	r3, [r4, #0]
 8007f6a:	441c      	add	r4, r3
 8007f6c:	6025      	str	r5, [r4, #0]
 8007f6e:	e004      	b.n	8007f7a <_malloc_r+0x72>
 8007f70:	6863      	ldr	r3, [r4, #4]
 8007f72:	42a2      	cmp	r2, r4
 8007f74:	bf0c      	ite	eq
 8007f76:	600b      	streq	r3, [r1, #0]
 8007f78:	6053      	strne	r3, [r2, #4]
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	f000 f9ec 	bl	8008358 <__malloc_unlock>
 8007f80:	f104 000b 	add.w	r0, r4, #11
 8007f84:	1d23      	adds	r3, r4, #4
 8007f86:	f020 0007 	bic.w	r0, r0, #7
 8007f8a:	1ac2      	subs	r2, r0, r3
 8007f8c:	d0cc      	beq.n	8007f28 <_malloc_r+0x20>
 8007f8e:	1a1b      	subs	r3, r3, r0
 8007f90:	50a3      	str	r3, [r4, r2]
 8007f92:	e7c9      	b.n	8007f28 <_malloc_r+0x20>
 8007f94:	4622      	mov	r2, r4
 8007f96:	6864      	ldr	r4, [r4, #4]
 8007f98:	e7cc      	b.n	8007f34 <_malloc_r+0x2c>
 8007f9a:	1cc4      	adds	r4, r0, #3
 8007f9c:	f024 0403 	bic.w	r4, r4, #3
 8007fa0:	42a0      	cmp	r0, r4
 8007fa2:	d0e3      	beq.n	8007f6c <_malloc_r+0x64>
 8007fa4:	1a21      	subs	r1, r4, r0
 8007fa6:	4630      	mov	r0, r6
 8007fa8:	f000 f964 	bl	8008274 <_sbrk_r>
 8007fac:	3001      	adds	r0, #1
 8007fae:	d1dd      	bne.n	8007f6c <_malloc_r+0x64>
 8007fb0:	e7cf      	b.n	8007f52 <_malloc_r+0x4a>
 8007fb2:	bf00      	nop
 8007fb4:	2000023c 	.word	0x2000023c
 8007fb8:	20000240 	.word	0x20000240

08007fbc <__ssputs_r>:
 8007fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fc0:	688e      	ldr	r6, [r1, #8]
 8007fc2:	429e      	cmp	r6, r3
 8007fc4:	4682      	mov	sl, r0
 8007fc6:	460c      	mov	r4, r1
 8007fc8:	4690      	mov	r8, r2
 8007fca:	461f      	mov	r7, r3
 8007fcc:	d838      	bhi.n	8008040 <__ssputs_r+0x84>
 8007fce:	898a      	ldrh	r2, [r1, #12]
 8007fd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fd4:	d032      	beq.n	800803c <__ssputs_r+0x80>
 8007fd6:	6825      	ldr	r5, [r4, #0]
 8007fd8:	6909      	ldr	r1, [r1, #16]
 8007fda:	eba5 0901 	sub.w	r9, r5, r1
 8007fde:	6965      	ldr	r5, [r4, #20]
 8007fe0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fe4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fe8:	3301      	adds	r3, #1
 8007fea:	444b      	add	r3, r9
 8007fec:	106d      	asrs	r5, r5, #1
 8007fee:	429d      	cmp	r5, r3
 8007ff0:	bf38      	it	cc
 8007ff2:	461d      	movcc	r5, r3
 8007ff4:	0553      	lsls	r3, r2, #21
 8007ff6:	d531      	bpl.n	800805c <__ssputs_r+0xa0>
 8007ff8:	4629      	mov	r1, r5
 8007ffa:	f7ff ff85 	bl	8007f08 <_malloc_r>
 8007ffe:	4606      	mov	r6, r0
 8008000:	b950      	cbnz	r0, 8008018 <__ssputs_r+0x5c>
 8008002:	230c      	movs	r3, #12
 8008004:	f8ca 3000 	str.w	r3, [sl]
 8008008:	89a3      	ldrh	r3, [r4, #12]
 800800a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800800e:	81a3      	strh	r3, [r4, #12]
 8008010:	f04f 30ff 	mov.w	r0, #4294967295
 8008014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008018:	6921      	ldr	r1, [r4, #16]
 800801a:	464a      	mov	r2, r9
 800801c:	f7ff fb88 	bl	8007730 <memcpy>
 8008020:	89a3      	ldrh	r3, [r4, #12]
 8008022:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800802a:	81a3      	strh	r3, [r4, #12]
 800802c:	6126      	str	r6, [r4, #16]
 800802e:	6165      	str	r5, [r4, #20]
 8008030:	444e      	add	r6, r9
 8008032:	eba5 0509 	sub.w	r5, r5, r9
 8008036:	6026      	str	r6, [r4, #0]
 8008038:	60a5      	str	r5, [r4, #8]
 800803a:	463e      	mov	r6, r7
 800803c:	42be      	cmp	r6, r7
 800803e:	d900      	bls.n	8008042 <__ssputs_r+0x86>
 8008040:	463e      	mov	r6, r7
 8008042:	4632      	mov	r2, r6
 8008044:	6820      	ldr	r0, [r4, #0]
 8008046:	4641      	mov	r1, r8
 8008048:	f000 f966 	bl	8008318 <memmove>
 800804c:	68a3      	ldr	r3, [r4, #8]
 800804e:	6822      	ldr	r2, [r4, #0]
 8008050:	1b9b      	subs	r3, r3, r6
 8008052:	4432      	add	r2, r6
 8008054:	60a3      	str	r3, [r4, #8]
 8008056:	6022      	str	r2, [r4, #0]
 8008058:	2000      	movs	r0, #0
 800805a:	e7db      	b.n	8008014 <__ssputs_r+0x58>
 800805c:	462a      	mov	r2, r5
 800805e:	f000 f981 	bl	8008364 <_realloc_r>
 8008062:	4606      	mov	r6, r0
 8008064:	2800      	cmp	r0, #0
 8008066:	d1e1      	bne.n	800802c <__ssputs_r+0x70>
 8008068:	6921      	ldr	r1, [r4, #16]
 800806a:	4650      	mov	r0, sl
 800806c:	f7ff fefc 	bl	8007e68 <_free_r>
 8008070:	e7c7      	b.n	8008002 <__ssputs_r+0x46>
	...

08008074 <_svfiprintf_r>:
 8008074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008078:	4698      	mov	r8, r3
 800807a:	898b      	ldrh	r3, [r1, #12]
 800807c:	061b      	lsls	r3, r3, #24
 800807e:	b09d      	sub	sp, #116	; 0x74
 8008080:	4607      	mov	r7, r0
 8008082:	460d      	mov	r5, r1
 8008084:	4614      	mov	r4, r2
 8008086:	d50e      	bpl.n	80080a6 <_svfiprintf_r+0x32>
 8008088:	690b      	ldr	r3, [r1, #16]
 800808a:	b963      	cbnz	r3, 80080a6 <_svfiprintf_r+0x32>
 800808c:	2140      	movs	r1, #64	; 0x40
 800808e:	f7ff ff3b 	bl	8007f08 <_malloc_r>
 8008092:	6028      	str	r0, [r5, #0]
 8008094:	6128      	str	r0, [r5, #16]
 8008096:	b920      	cbnz	r0, 80080a2 <_svfiprintf_r+0x2e>
 8008098:	230c      	movs	r3, #12
 800809a:	603b      	str	r3, [r7, #0]
 800809c:	f04f 30ff 	mov.w	r0, #4294967295
 80080a0:	e0d1      	b.n	8008246 <_svfiprintf_r+0x1d2>
 80080a2:	2340      	movs	r3, #64	; 0x40
 80080a4:	616b      	str	r3, [r5, #20]
 80080a6:	2300      	movs	r3, #0
 80080a8:	9309      	str	r3, [sp, #36]	; 0x24
 80080aa:	2320      	movs	r3, #32
 80080ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80080b4:	2330      	movs	r3, #48	; 0x30
 80080b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008260 <_svfiprintf_r+0x1ec>
 80080ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080be:	f04f 0901 	mov.w	r9, #1
 80080c2:	4623      	mov	r3, r4
 80080c4:	469a      	mov	sl, r3
 80080c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080ca:	b10a      	cbz	r2, 80080d0 <_svfiprintf_r+0x5c>
 80080cc:	2a25      	cmp	r2, #37	; 0x25
 80080ce:	d1f9      	bne.n	80080c4 <_svfiprintf_r+0x50>
 80080d0:	ebba 0b04 	subs.w	fp, sl, r4
 80080d4:	d00b      	beq.n	80080ee <_svfiprintf_r+0x7a>
 80080d6:	465b      	mov	r3, fp
 80080d8:	4622      	mov	r2, r4
 80080da:	4629      	mov	r1, r5
 80080dc:	4638      	mov	r0, r7
 80080de:	f7ff ff6d 	bl	8007fbc <__ssputs_r>
 80080e2:	3001      	adds	r0, #1
 80080e4:	f000 80aa 	beq.w	800823c <_svfiprintf_r+0x1c8>
 80080e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080ea:	445a      	add	r2, fp
 80080ec:	9209      	str	r2, [sp, #36]	; 0x24
 80080ee:	f89a 3000 	ldrb.w	r3, [sl]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f000 80a2 	beq.w	800823c <_svfiprintf_r+0x1c8>
 80080f8:	2300      	movs	r3, #0
 80080fa:	f04f 32ff 	mov.w	r2, #4294967295
 80080fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008102:	f10a 0a01 	add.w	sl, sl, #1
 8008106:	9304      	str	r3, [sp, #16]
 8008108:	9307      	str	r3, [sp, #28]
 800810a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800810e:	931a      	str	r3, [sp, #104]	; 0x68
 8008110:	4654      	mov	r4, sl
 8008112:	2205      	movs	r2, #5
 8008114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008118:	4851      	ldr	r0, [pc, #324]	; (8008260 <_svfiprintf_r+0x1ec>)
 800811a:	f7f8 f871 	bl	8000200 <memchr>
 800811e:	9a04      	ldr	r2, [sp, #16]
 8008120:	b9d8      	cbnz	r0, 800815a <_svfiprintf_r+0xe6>
 8008122:	06d0      	lsls	r0, r2, #27
 8008124:	bf44      	itt	mi
 8008126:	2320      	movmi	r3, #32
 8008128:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800812c:	0711      	lsls	r1, r2, #28
 800812e:	bf44      	itt	mi
 8008130:	232b      	movmi	r3, #43	; 0x2b
 8008132:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008136:	f89a 3000 	ldrb.w	r3, [sl]
 800813a:	2b2a      	cmp	r3, #42	; 0x2a
 800813c:	d015      	beq.n	800816a <_svfiprintf_r+0xf6>
 800813e:	9a07      	ldr	r2, [sp, #28]
 8008140:	4654      	mov	r4, sl
 8008142:	2000      	movs	r0, #0
 8008144:	f04f 0c0a 	mov.w	ip, #10
 8008148:	4621      	mov	r1, r4
 800814a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800814e:	3b30      	subs	r3, #48	; 0x30
 8008150:	2b09      	cmp	r3, #9
 8008152:	d94e      	bls.n	80081f2 <_svfiprintf_r+0x17e>
 8008154:	b1b0      	cbz	r0, 8008184 <_svfiprintf_r+0x110>
 8008156:	9207      	str	r2, [sp, #28]
 8008158:	e014      	b.n	8008184 <_svfiprintf_r+0x110>
 800815a:	eba0 0308 	sub.w	r3, r0, r8
 800815e:	fa09 f303 	lsl.w	r3, r9, r3
 8008162:	4313      	orrs	r3, r2
 8008164:	9304      	str	r3, [sp, #16]
 8008166:	46a2      	mov	sl, r4
 8008168:	e7d2      	b.n	8008110 <_svfiprintf_r+0x9c>
 800816a:	9b03      	ldr	r3, [sp, #12]
 800816c:	1d19      	adds	r1, r3, #4
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	9103      	str	r1, [sp, #12]
 8008172:	2b00      	cmp	r3, #0
 8008174:	bfbb      	ittet	lt
 8008176:	425b      	neglt	r3, r3
 8008178:	f042 0202 	orrlt.w	r2, r2, #2
 800817c:	9307      	strge	r3, [sp, #28]
 800817e:	9307      	strlt	r3, [sp, #28]
 8008180:	bfb8      	it	lt
 8008182:	9204      	strlt	r2, [sp, #16]
 8008184:	7823      	ldrb	r3, [r4, #0]
 8008186:	2b2e      	cmp	r3, #46	; 0x2e
 8008188:	d10c      	bne.n	80081a4 <_svfiprintf_r+0x130>
 800818a:	7863      	ldrb	r3, [r4, #1]
 800818c:	2b2a      	cmp	r3, #42	; 0x2a
 800818e:	d135      	bne.n	80081fc <_svfiprintf_r+0x188>
 8008190:	9b03      	ldr	r3, [sp, #12]
 8008192:	1d1a      	adds	r2, r3, #4
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	9203      	str	r2, [sp, #12]
 8008198:	2b00      	cmp	r3, #0
 800819a:	bfb8      	it	lt
 800819c:	f04f 33ff 	movlt.w	r3, #4294967295
 80081a0:	3402      	adds	r4, #2
 80081a2:	9305      	str	r3, [sp, #20]
 80081a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008270 <_svfiprintf_r+0x1fc>
 80081a8:	7821      	ldrb	r1, [r4, #0]
 80081aa:	2203      	movs	r2, #3
 80081ac:	4650      	mov	r0, sl
 80081ae:	f7f8 f827 	bl	8000200 <memchr>
 80081b2:	b140      	cbz	r0, 80081c6 <_svfiprintf_r+0x152>
 80081b4:	2340      	movs	r3, #64	; 0x40
 80081b6:	eba0 000a 	sub.w	r0, r0, sl
 80081ba:	fa03 f000 	lsl.w	r0, r3, r0
 80081be:	9b04      	ldr	r3, [sp, #16]
 80081c0:	4303      	orrs	r3, r0
 80081c2:	3401      	adds	r4, #1
 80081c4:	9304      	str	r3, [sp, #16]
 80081c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ca:	4826      	ldr	r0, [pc, #152]	; (8008264 <_svfiprintf_r+0x1f0>)
 80081cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081d0:	2206      	movs	r2, #6
 80081d2:	f7f8 f815 	bl	8000200 <memchr>
 80081d6:	2800      	cmp	r0, #0
 80081d8:	d038      	beq.n	800824c <_svfiprintf_r+0x1d8>
 80081da:	4b23      	ldr	r3, [pc, #140]	; (8008268 <_svfiprintf_r+0x1f4>)
 80081dc:	bb1b      	cbnz	r3, 8008226 <_svfiprintf_r+0x1b2>
 80081de:	9b03      	ldr	r3, [sp, #12]
 80081e0:	3307      	adds	r3, #7
 80081e2:	f023 0307 	bic.w	r3, r3, #7
 80081e6:	3308      	adds	r3, #8
 80081e8:	9303      	str	r3, [sp, #12]
 80081ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ec:	4433      	add	r3, r6
 80081ee:	9309      	str	r3, [sp, #36]	; 0x24
 80081f0:	e767      	b.n	80080c2 <_svfiprintf_r+0x4e>
 80081f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80081f6:	460c      	mov	r4, r1
 80081f8:	2001      	movs	r0, #1
 80081fa:	e7a5      	b.n	8008148 <_svfiprintf_r+0xd4>
 80081fc:	2300      	movs	r3, #0
 80081fe:	3401      	adds	r4, #1
 8008200:	9305      	str	r3, [sp, #20]
 8008202:	4619      	mov	r1, r3
 8008204:	f04f 0c0a 	mov.w	ip, #10
 8008208:	4620      	mov	r0, r4
 800820a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800820e:	3a30      	subs	r2, #48	; 0x30
 8008210:	2a09      	cmp	r2, #9
 8008212:	d903      	bls.n	800821c <_svfiprintf_r+0x1a8>
 8008214:	2b00      	cmp	r3, #0
 8008216:	d0c5      	beq.n	80081a4 <_svfiprintf_r+0x130>
 8008218:	9105      	str	r1, [sp, #20]
 800821a:	e7c3      	b.n	80081a4 <_svfiprintf_r+0x130>
 800821c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008220:	4604      	mov	r4, r0
 8008222:	2301      	movs	r3, #1
 8008224:	e7f0      	b.n	8008208 <_svfiprintf_r+0x194>
 8008226:	ab03      	add	r3, sp, #12
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	462a      	mov	r2, r5
 800822c:	4b0f      	ldr	r3, [pc, #60]	; (800826c <_svfiprintf_r+0x1f8>)
 800822e:	a904      	add	r1, sp, #16
 8008230:	4638      	mov	r0, r7
 8008232:	f7fe f80f 	bl	8006254 <_printf_float>
 8008236:	1c42      	adds	r2, r0, #1
 8008238:	4606      	mov	r6, r0
 800823a:	d1d6      	bne.n	80081ea <_svfiprintf_r+0x176>
 800823c:	89ab      	ldrh	r3, [r5, #12]
 800823e:	065b      	lsls	r3, r3, #25
 8008240:	f53f af2c 	bmi.w	800809c <_svfiprintf_r+0x28>
 8008244:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008246:	b01d      	add	sp, #116	; 0x74
 8008248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800824c:	ab03      	add	r3, sp, #12
 800824e:	9300      	str	r3, [sp, #0]
 8008250:	462a      	mov	r2, r5
 8008252:	4b06      	ldr	r3, [pc, #24]	; (800826c <_svfiprintf_r+0x1f8>)
 8008254:	a904      	add	r1, sp, #16
 8008256:	4638      	mov	r0, r7
 8008258:	f7fe faa0 	bl	800679c <_printf_i>
 800825c:	e7eb      	b.n	8008236 <_svfiprintf_r+0x1c2>
 800825e:	bf00      	nop
 8008260:	08009164 	.word	0x08009164
 8008264:	0800916e 	.word	0x0800916e
 8008268:	08006255 	.word	0x08006255
 800826c:	08007fbd 	.word	0x08007fbd
 8008270:	0800916a 	.word	0x0800916a

08008274 <_sbrk_r>:
 8008274:	b538      	push	{r3, r4, r5, lr}
 8008276:	4d06      	ldr	r5, [pc, #24]	; (8008290 <_sbrk_r+0x1c>)
 8008278:	2300      	movs	r3, #0
 800827a:	4604      	mov	r4, r0
 800827c:	4608      	mov	r0, r1
 800827e:	602b      	str	r3, [r5, #0]
 8008280:	f7f9 fe66 	bl	8001f50 <_sbrk>
 8008284:	1c43      	adds	r3, r0, #1
 8008286:	d102      	bne.n	800828e <_sbrk_r+0x1a>
 8008288:	682b      	ldr	r3, [r5, #0]
 800828a:	b103      	cbz	r3, 800828e <_sbrk_r+0x1a>
 800828c:	6023      	str	r3, [r4, #0]
 800828e:	bd38      	pop	{r3, r4, r5, pc}
 8008290:	200003f4 	.word	0x200003f4

08008294 <__assert_func>:
 8008294:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008296:	4614      	mov	r4, r2
 8008298:	461a      	mov	r2, r3
 800829a:	4b09      	ldr	r3, [pc, #36]	; (80082c0 <__assert_func+0x2c>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4605      	mov	r5, r0
 80082a0:	68d8      	ldr	r0, [r3, #12]
 80082a2:	b14c      	cbz	r4, 80082b8 <__assert_func+0x24>
 80082a4:	4b07      	ldr	r3, [pc, #28]	; (80082c4 <__assert_func+0x30>)
 80082a6:	9100      	str	r1, [sp, #0]
 80082a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80082ac:	4906      	ldr	r1, [pc, #24]	; (80082c8 <__assert_func+0x34>)
 80082ae:	462b      	mov	r3, r5
 80082b0:	f000 f80e 	bl	80082d0 <fiprintf>
 80082b4:	f000 faa4 	bl	8008800 <abort>
 80082b8:	4b04      	ldr	r3, [pc, #16]	; (80082cc <__assert_func+0x38>)
 80082ba:	461c      	mov	r4, r3
 80082bc:	e7f3      	b.n	80082a6 <__assert_func+0x12>
 80082be:	bf00      	nop
 80082c0:	20000024 	.word	0x20000024
 80082c4:	08009175 	.word	0x08009175
 80082c8:	08009182 	.word	0x08009182
 80082cc:	080091b0 	.word	0x080091b0

080082d0 <fiprintf>:
 80082d0:	b40e      	push	{r1, r2, r3}
 80082d2:	b503      	push	{r0, r1, lr}
 80082d4:	4601      	mov	r1, r0
 80082d6:	ab03      	add	r3, sp, #12
 80082d8:	4805      	ldr	r0, [pc, #20]	; (80082f0 <fiprintf+0x20>)
 80082da:	f853 2b04 	ldr.w	r2, [r3], #4
 80082de:	6800      	ldr	r0, [r0, #0]
 80082e0:	9301      	str	r3, [sp, #4]
 80082e2:	f000 f88f 	bl	8008404 <_vfiprintf_r>
 80082e6:	b002      	add	sp, #8
 80082e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80082ec:	b003      	add	sp, #12
 80082ee:	4770      	bx	lr
 80082f0:	20000024 	.word	0x20000024

080082f4 <__ascii_mbtowc>:
 80082f4:	b082      	sub	sp, #8
 80082f6:	b901      	cbnz	r1, 80082fa <__ascii_mbtowc+0x6>
 80082f8:	a901      	add	r1, sp, #4
 80082fa:	b142      	cbz	r2, 800830e <__ascii_mbtowc+0x1a>
 80082fc:	b14b      	cbz	r3, 8008312 <__ascii_mbtowc+0x1e>
 80082fe:	7813      	ldrb	r3, [r2, #0]
 8008300:	600b      	str	r3, [r1, #0]
 8008302:	7812      	ldrb	r2, [r2, #0]
 8008304:	1e10      	subs	r0, r2, #0
 8008306:	bf18      	it	ne
 8008308:	2001      	movne	r0, #1
 800830a:	b002      	add	sp, #8
 800830c:	4770      	bx	lr
 800830e:	4610      	mov	r0, r2
 8008310:	e7fb      	b.n	800830a <__ascii_mbtowc+0x16>
 8008312:	f06f 0001 	mvn.w	r0, #1
 8008316:	e7f8      	b.n	800830a <__ascii_mbtowc+0x16>

08008318 <memmove>:
 8008318:	4288      	cmp	r0, r1
 800831a:	b510      	push	{r4, lr}
 800831c:	eb01 0402 	add.w	r4, r1, r2
 8008320:	d902      	bls.n	8008328 <memmove+0x10>
 8008322:	4284      	cmp	r4, r0
 8008324:	4623      	mov	r3, r4
 8008326:	d807      	bhi.n	8008338 <memmove+0x20>
 8008328:	1e43      	subs	r3, r0, #1
 800832a:	42a1      	cmp	r1, r4
 800832c:	d008      	beq.n	8008340 <memmove+0x28>
 800832e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008332:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008336:	e7f8      	b.n	800832a <memmove+0x12>
 8008338:	4402      	add	r2, r0
 800833a:	4601      	mov	r1, r0
 800833c:	428a      	cmp	r2, r1
 800833e:	d100      	bne.n	8008342 <memmove+0x2a>
 8008340:	bd10      	pop	{r4, pc}
 8008342:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008346:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800834a:	e7f7      	b.n	800833c <memmove+0x24>

0800834c <__malloc_lock>:
 800834c:	4801      	ldr	r0, [pc, #4]	; (8008354 <__malloc_lock+0x8>)
 800834e:	f000 bc17 	b.w	8008b80 <__retarget_lock_acquire_recursive>
 8008352:	bf00      	nop
 8008354:	200003fc 	.word	0x200003fc

08008358 <__malloc_unlock>:
 8008358:	4801      	ldr	r0, [pc, #4]	; (8008360 <__malloc_unlock+0x8>)
 800835a:	f000 bc12 	b.w	8008b82 <__retarget_lock_release_recursive>
 800835e:	bf00      	nop
 8008360:	200003fc 	.word	0x200003fc

08008364 <_realloc_r>:
 8008364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008366:	4607      	mov	r7, r0
 8008368:	4614      	mov	r4, r2
 800836a:	460e      	mov	r6, r1
 800836c:	b921      	cbnz	r1, 8008378 <_realloc_r+0x14>
 800836e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008372:	4611      	mov	r1, r2
 8008374:	f7ff bdc8 	b.w	8007f08 <_malloc_r>
 8008378:	b922      	cbnz	r2, 8008384 <_realloc_r+0x20>
 800837a:	f7ff fd75 	bl	8007e68 <_free_r>
 800837e:	4625      	mov	r5, r4
 8008380:	4628      	mov	r0, r5
 8008382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008384:	f000 fc62 	bl	8008c4c <_malloc_usable_size_r>
 8008388:	42a0      	cmp	r0, r4
 800838a:	d20f      	bcs.n	80083ac <_realloc_r+0x48>
 800838c:	4621      	mov	r1, r4
 800838e:	4638      	mov	r0, r7
 8008390:	f7ff fdba 	bl	8007f08 <_malloc_r>
 8008394:	4605      	mov	r5, r0
 8008396:	2800      	cmp	r0, #0
 8008398:	d0f2      	beq.n	8008380 <_realloc_r+0x1c>
 800839a:	4631      	mov	r1, r6
 800839c:	4622      	mov	r2, r4
 800839e:	f7ff f9c7 	bl	8007730 <memcpy>
 80083a2:	4631      	mov	r1, r6
 80083a4:	4638      	mov	r0, r7
 80083a6:	f7ff fd5f 	bl	8007e68 <_free_r>
 80083aa:	e7e9      	b.n	8008380 <_realloc_r+0x1c>
 80083ac:	4635      	mov	r5, r6
 80083ae:	e7e7      	b.n	8008380 <_realloc_r+0x1c>

080083b0 <__sfputc_r>:
 80083b0:	6893      	ldr	r3, [r2, #8]
 80083b2:	3b01      	subs	r3, #1
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	b410      	push	{r4}
 80083b8:	6093      	str	r3, [r2, #8]
 80083ba:	da08      	bge.n	80083ce <__sfputc_r+0x1e>
 80083bc:	6994      	ldr	r4, [r2, #24]
 80083be:	42a3      	cmp	r3, r4
 80083c0:	db01      	blt.n	80083c6 <__sfputc_r+0x16>
 80083c2:	290a      	cmp	r1, #10
 80083c4:	d103      	bne.n	80083ce <__sfputc_r+0x1e>
 80083c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083ca:	f000 b94b 	b.w	8008664 <__swbuf_r>
 80083ce:	6813      	ldr	r3, [r2, #0]
 80083d0:	1c58      	adds	r0, r3, #1
 80083d2:	6010      	str	r0, [r2, #0]
 80083d4:	7019      	strb	r1, [r3, #0]
 80083d6:	4608      	mov	r0, r1
 80083d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083dc:	4770      	bx	lr

080083de <__sfputs_r>:
 80083de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e0:	4606      	mov	r6, r0
 80083e2:	460f      	mov	r7, r1
 80083e4:	4614      	mov	r4, r2
 80083e6:	18d5      	adds	r5, r2, r3
 80083e8:	42ac      	cmp	r4, r5
 80083ea:	d101      	bne.n	80083f0 <__sfputs_r+0x12>
 80083ec:	2000      	movs	r0, #0
 80083ee:	e007      	b.n	8008400 <__sfputs_r+0x22>
 80083f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083f4:	463a      	mov	r2, r7
 80083f6:	4630      	mov	r0, r6
 80083f8:	f7ff ffda 	bl	80083b0 <__sfputc_r>
 80083fc:	1c43      	adds	r3, r0, #1
 80083fe:	d1f3      	bne.n	80083e8 <__sfputs_r+0xa>
 8008400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008404 <_vfiprintf_r>:
 8008404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008408:	460d      	mov	r5, r1
 800840a:	b09d      	sub	sp, #116	; 0x74
 800840c:	4614      	mov	r4, r2
 800840e:	4698      	mov	r8, r3
 8008410:	4606      	mov	r6, r0
 8008412:	b118      	cbz	r0, 800841c <_vfiprintf_r+0x18>
 8008414:	6983      	ldr	r3, [r0, #24]
 8008416:	b90b      	cbnz	r3, 800841c <_vfiprintf_r+0x18>
 8008418:	f000 fb14 	bl	8008a44 <__sinit>
 800841c:	4b89      	ldr	r3, [pc, #548]	; (8008644 <_vfiprintf_r+0x240>)
 800841e:	429d      	cmp	r5, r3
 8008420:	d11b      	bne.n	800845a <_vfiprintf_r+0x56>
 8008422:	6875      	ldr	r5, [r6, #4]
 8008424:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008426:	07d9      	lsls	r1, r3, #31
 8008428:	d405      	bmi.n	8008436 <_vfiprintf_r+0x32>
 800842a:	89ab      	ldrh	r3, [r5, #12]
 800842c:	059a      	lsls	r2, r3, #22
 800842e:	d402      	bmi.n	8008436 <_vfiprintf_r+0x32>
 8008430:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008432:	f000 fba5 	bl	8008b80 <__retarget_lock_acquire_recursive>
 8008436:	89ab      	ldrh	r3, [r5, #12]
 8008438:	071b      	lsls	r3, r3, #28
 800843a:	d501      	bpl.n	8008440 <_vfiprintf_r+0x3c>
 800843c:	692b      	ldr	r3, [r5, #16]
 800843e:	b9eb      	cbnz	r3, 800847c <_vfiprintf_r+0x78>
 8008440:	4629      	mov	r1, r5
 8008442:	4630      	mov	r0, r6
 8008444:	f000 f96e 	bl	8008724 <__swsetup_r>
 8008448:	b1c0      	cbz	r0, 800847c <_vfiprintf_r+0x78>
 800844a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800844c:	07dc      	lsls	r4, r3, #31
 800844e:	d50e      	bpl.n	800846e <_vfiprintf_r+0x6a>
 8008450:	f04f 30ff 	mov.w	r0, #4294967295
 8008454:	b01d      	add	sp, #116	; 0x74
 8008456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800845a:	4b7b      	ldr	r3, [pc, #492]	; (8008648 <_vfiprintf_r+0x244>)
 800845c:	429d      	cmp	r5, r3
 800845e:	d101      	bne.n	8008464 <_vfiprintf_r+0x60>
 8008460:	68b5      	ldr	r5, [r6, #8]
 8008462:	e7df      	b.n	8008424 <_vfiprintf_r+0x20>
 8008464:	4b79      	ldr	r3, [pc, #484]	; (800864c <_vfiprintf_r+0x248>)
 8008466:	429d      	cmp	r5, r3
 8008468:	bf08      	it	eq
 800846a:	68f5      	ldreq	r5, [r6, #12]
 800846c:	e7da      	b.n	8008424 <_vfiprintf_r+0x20>
 800846e:	89ab      	ldrh	r3, [r5, #12]
 8008470:	0598      	lsls	r0, r3, #22
 8008472:	d4ed      	bmi.n	8008450 <_vfiprintf_r+0x4c>
 8008474:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008476:	f000 fb84 	bl	8008b82 <__retarget_lock_release_recursive>
 800847a:	e7e9      	b.n	8008450 <_vfiprintf_r+0x4c>
 800847c:	2300      	movs	r3, #0
 800847e:	9309      	str	r3, [sp, #36]	; 0x24
 8008480:	2320      	movs	r3, #32
 8008482:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008486:	f8cd 800c 	str.w	r8, [sp, #12]
 800848a:	2330      	movs	r3, #48	; 0x30
 800848c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008650 <_vfiprintf_r+0x24c>
 8008490:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008494:	f04f 0901 	mov.w	r9, #1
 8008498:	4623      	mov	r3, r4
 800849a:	469a      	mov	sl, r3
 800849c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084a0:	b10a      	cbz	r2, 80084a6 <_vfiprintf_r+0xa2>
 80084a2:	2a25      	cmp	r2, #37	; 0x25
 80084a4:	d1f9      	bne.n	800849a <_vfiprintf_r+0x96>
 80084a6:	ebba 0b04 	subs.w	fp, sl, r4
 80084aa:	d00b      	beq.n	80084c4 <_vfiprintf_r+0xc0>
 80084ac:	465b      	mov	r3, fp
 80084ae:	4622      	mov	r2, r4
 80084b0:	4629      	mov	r1, r5
 80084b2:	4630      	mov	r0, r6
 80084b4:	f7ff ff93 	bl	80083de <__sfputs_r>
 80084b8:	3001      	adds	r0, #1
 80084ba:	f000 80aa 	beq.w	8008612 <_vfiprintf_r+0x20e>
 80084be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084c0:	445a      	add	r2, fp
 80084c2:	9209      	str	r2, [sp, #36]	; 0x24
 80084c4:	f89a 3000 	ldrb.w	r3, [sl]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f000 80a2 	beq.w	8008612 <_vfiprintf_r+0x20e>
 80084ce:	2300      	movs	r3, #0
 80084d0:	f04f 32ff 	mov.w	r2, #4294967295
 80084d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084d8:	f10a 0a01 	add.w	sl, sl, #1
 80084dc:	9304      	str	r3, [sp, #16]
 80084de:	9307      	str	r3, [sp, #28]
 80084e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084e4:	931a      	str	r3, [sp, #104]	; 0x68
 80084e6:	4654      	mov	r4, sl
 80084e8:	2205      	movs	r2, #5
 80084ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084ee:	4858      	ldr	r0, [pc, #352]	; (8008650 <_vfiprintf_r+0x24c>)
 80084f0:	f7f7 fe86 	bl	8000200 <memchr>
 80084f4:	9a04      	ldr	r2, [sp, #16]
 80084f6:	b9d8      	cbnz	r0, 8008530 <_vfiprintf_r+0x12c>
 80084f8:	06d1      	lsls	r1, r2, #27
 80084fa:	bf44      	itt	mi
 80084fc:	2320      	movmi	r3, #32
 80084fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008502:	0713      	lsls	r3, r2, #28
 8008504:	bf44      	itt	mi
 8008506:	232b      	movmi	r3, #43	; 0x2b
 8008508:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800850c:	f89a 3000 	ldrb.w	r3, [sl]
 8008510:	2b2a      	cmp	r3, #42	; 0x2a
 8008512:	d015      	beq.n	8008540 <_vfiprintf_r+0x13c>
 8008514:	9a07      	ldr	r2, [sp, #28]
 8008516:	4654      	mov	r4, sl
 8008518:	2000      	movs	r0, #0
 800851a:	f04f 0c0a 	mov.w	ip, #10
 800851e:	4621      	mov	r1, r4
 8008520:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008524:	3b30      	subs	r3, #48	; 0x30
 8008526:	2b09      	cmp	r3, #9
 8008528:	d94e      	bls.n	80085c8 <_vfiprintf_r+0x1c4>
 800852a:	b1b0      	cbz	r0, 800855a <_vfiprintf_r+0x156>
 800852c:	9207      	str	r2, [sp, #28]
 800852e:	e014      	b.n	800855a <_vfiprintf_r+0x156>
 8008530:	eba0 0308 	sub.w	r3, r0, r8
 8008534:	fa09 f303 	lsl.w	r3, r9, r3
 8008538:	4313      	orrs	r3, r2
 800853a:	9304      	str	r3, [sp, #16]
 800853c:	46a2      	mov	sl, r4
 800853e:	e7d2      	b.n	80084e6 <_vfiprintf_r+0xe2>
 8008540:	9b03      	ldr	r3, [sp, #12]
 8008542:	1d19      	adds	r1, r3, #4
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	9103      	str	r1, [sp, #12]
 8008548:	2b00      	cmp	r3, #0
 800854a:	bfbb      	ittet	lt
 800854c:	425b      	neglt	r3, r3
 800854e:	f042 0202 	orrlt.w	r2, r2, #2
 8008552:	9307      	strge	r3, [sp, #28]
 8008554:	9307      	strlt	r3, [sp, #28]
 8008556:	bfb8      	it	lt
 8008558:	9204      	strlt	r2, [sp, #16]
 800855a:	7823      	ldrb	r3, [r4, #0]
 800855c:	2b2e      	cmp	r3, #46	; 0x2e
 800855e:	d10c      	bne.n	800857a <_vfiprintf_r+0x176>
 8008560:	7863      	ldrb	r3, [r4, #1]
 8008562:	2b2a      	cmp	r3, #42	; 0x2a
 8008564:	d135      	bne.n	80085d2 <_vfiprintf_r+0x1ce>
 8008566:	9b03      	ldr	r3, [sp, #12]
 8008568:	1d1a      	adds	r2, r3, #4
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	9203      	str	r2, [sp, #12]
 800856e:	2b00      	cmp	r3, #0
 8008570:	bfb8      	it	lt
 8008572:	f04f 33ff 	movlt.w	r3, #4294967295
 8008576:	3402      	adds	r4, #2
 8008578:	9305      	str	r3, [sp, #20]
 800857a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008660 <_vfiprintf_r+0x25c>
 800857e:	7821      	ldrb	r1, [r4, #0]
 8008580:	2203      	movs	r2, #3
 8008582:	4650      	mov	r0, sl
 8008584:	f7f7 fe3c 	bl	8000200 <memchr>
 8008588:	b140      	cbz	r0, 800859c <_vfiprintf_r+0x198>
 800858a:	2340      	movs	r3, #64	; 0x40
 800858c:	eba0 000a 	sub.w	r0, r0, sl
 8008590:	fa03 f000 	lsl.w	r0, r3, r0
 8008594:	9b04      	ldr	r3, [sp, #16]
 8008596:	4303      	orrs	r3, r0
 8008598:	3401      	adds	r4, #1
 800859a:	9304      	str	r3, [sp, #16]
 800859c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085a0:	482c      	ldr	r0, [pc, #176]	; (8008654 <_vfiprintf_r+0x250>)
 80085a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085a6:	2206      	movs	r2, #6
 80085a8:	f7f7 fe2a 	bl	8000200 <memchr>
 80085ac:	2800      	cmp	r0, #0
 80085ae:	d03f      	beq.n	8008630 <_vfiprintf_r+0x22c>
 80085b0:	4b29      	ldr	r3, [pc, #164]	; (8008658 <_vfiprintf_r+0x254>)
 80085b2:	bb1b      	cbnz	r3, 80085fc <_vfiprintf_r+0x1f8>
 80085b4:	9b03      	ldr	r3, [sp, #12]
 80085b6:	3307      	adds	r3, #7
 80085b8:	f023 0307 	bic.w	r3, r3, #7
 80085bc:	3308      	adds	r3, #8
 80085be:	9303      	str	r3, [sp, #12]
 80085c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085c2:	443b      	add	r3, r7
 80085c4:	9309      	str	r3, [sp, #36]	; 0x24
 80085c6:	e767      	b.n	8008498 <_vfiprintf_r+0x94>
 80085c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80085cc:	460c      	mov	r4, r1
 80085ce:	2001      	movs	r0, #1
 80085d0:	e7a5      	b.n	800851e <_vfiprintf_r+0x11a>
 80085d2:	2300      	movs	r3, #0
 80085d4:	3401      	adds	r4, #1
 80085d6:	9305      	str	r3, [sp, #20]
 80085d8:	4619      	mov	r1, r3
 80085da:	f04f 0c0a 	mov.w	ip, #10
 80085de:	4620      	mov	r0, r4
 80085e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085e4:	3a30      	subs	r2, #48	; 0x30
 80085e6:	2a09      	cmp	r2, #9
 80085e8:	d903      	bls.n	80085f2 <_vfiprintf_r+0x1ee>
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d0c5      	beq.n	800857a <_vfiprintf_r+0x176>
 80085ee:	9105      	str	r1, [sp, #20]
 80085f0:	e7c3      	b.n	800857a <_vfiprintf_r+0x176>
 80085f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80085f6:	4604      	mov	r4, r0
 80085f8:	2301      	movs	r3, #1
 80085fa:	e7f0      	b.n	80085de <_vfiprintf_r+0x1da>
 80085fc:	ab03      	add	r3, sp, #12
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	462a      	mov	r2, r5
 8008602:	4b16      	ldr	r3, [pc, #88]	; (800865c <_vfiprintf_r+0x258>)
 8008604:	a904      	add	r1, sp, #16
 8008606:	4630      	mov	r0, r6
 8008608:	f7fd fe24 	bl	8006254 <_printf_float>
 800860c:	4607      	mov	r7, r0
 800860e:	1c78      	adds	r0, r7, #1
 8008610:	d1d6      	bne.n	80085c0 <_vfiprintf_r+0x1bc>
 8008612:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008614:	07d9      	lsls	r1, r3, #31
 8008616:	d405      	bmi.n	8008624 <_vfiprintf_r+0x220>
 8008618:	89ab      	ldrh	r3, [r5, #12]
 800861a:	059a      	lsls	r2, r3, #22
 800861c:	d402      	bmi.n	8008624 <_vfiprintf_r+0x220>
 800861e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008620:	f000 faaf 	bl	8008b82 <__retarget_lock_release_recursive>
 8008624:	89ab      	ldrh	r3, [r5, #12]
 8008626:	065b      	lsls	r3, r3, #25
 8008628:	f53f af12 	bmi.w	8008450 <_vfiprintf_r+0x4c>
 800862c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800862e:	e711      	b.n	8008454 <_vfiprintf_r+0x50>
 8008630:	ab03      	add	r3, sp, #12
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	462a      	mov	r2, r5
 8008636:	4b09      	ldr	r3, [pc, #36]	; (800865c <_vfiprintf_r+0x258>)
 8008638:	a904      	add	r1, sp, #16
 800863a:	4630      	mov	r0, r6
 800863c:	f7fe f8ae 	bl	800679c <_printf_i>
 8008640:	e7e4      	b.n	800860c <_vfiprintf_r+0x208>
 8008642:	bf00      	nop
 8008644:	080092dc 	.word	0x080092dc
 8008648:	080092fc 	.word	0x080092fc
 800864c:	080092bc 	.word	0x080092bc
 8008650:	08009164 	.word	0x08009164
 8008654:	0800916e 	.word	0x0800916e
 8008658:	08006255 	.word	0x08006255
 800865c:	080083df 	.word	0x080083df
 8008660:	0800916a 	.word	0x0800916a

08008664 <__swbuf_r>:
 8008664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008666:	460e      	mov	r6, r1
 8008668:	4614      	mov	r4, r2
 800866a:	4605      	mov	r5, r0
 800866c:	b118      	cbz	r0, 8008676 <__swbuf_r+0x12>
 800866e:	6983      	ldr	r3, [r0, #24]
 8008670:	b90b      	cbnz	r3, 8008676 <__swbuf_r+0x12>
 8008672:	f000 f9e7 	bl	8008a44 <__sinit>
 8008676:	4b21      	ldr	r3, [pc, #132]	; (80086fc <__swbuf_r+0x98>)
 8008678:	429c      	cmp	r4, r3
 800867a:	d12b      	bne.n	80086d4 <__swbuf_r+0x70>
 800867c:	686c      	ldr	r4, [r5, #4]
 800867e:	69a3      	ldr	r3, [r4, #24]
 8008680:	60a3      	str	r3, [r4, #8]
 8008682:	89a3      	ldrh	r3, [r4, #12]
 8008684:	071a      	lsls	r2, r3, #28
 8008686:	d52f      	bpl.n	80086e8 <__swbuf_r+0x84>
 8008688:	6923      	ldr	r3, [r4, #16]
 800868a:	b36b      	cbz	r3, 80086e8 <__swbuf_r+0x84>
 800868c:	6923      	ldr	r3, [r4, #16]
 800868e:	6820      	ldr	r0, [r4, #0]
 8008690:	1ac0      	subs	r0, r0, r3
 8008692:	6963      	ldr	r3, [r4, #20]
 8008694:	b2f6      	uxtb	r6, r6
 8008696:	4283      	cmp	r3, r0
 8008698:	4637      	mov	r7, r6
 800869a:	dc04      	bgt.n	80086a6 <__swbuf_r+0x42>
 800869c:	4621      	mov	r1, r4
 800869e:	4628      	mov	r0, r5
 80086a0:	f000 f93c 	bl	800891c <_fflush_r>
 80086a4:	bb30      	cbnz	r0, 80086f4 <__swbuf_r+0x90>
 80086a6:	68a3      	ldr	r3, [r4, #8]
 80086a8:	3b01      	subs	r3, #1
 80086aa:	60a3      	str	r3, [r4, #8]
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	1c5a      	adds	r2, r3, #1
 80086b0:	6022      	str	r2, [r4, #0]
 80086b2:	701e      	strb	r6, [r3, #0]
 80086b4:	6963      	ldr	r3, [r4, #20]
 80086b6:	3001      	adds	r0, #1
 80086b8:	4283      	cmp	r3, r0
 80086ba:	d004      	beq.n	80086c6 <__swbuf_r+0x62>
 80086bc:	89a3      	ldrh	r3, [r4, #12]
 80086be:	07db      	lsls	r3, r3, #31
 80086c0:	d506      	bpl.n	80086d0 <__swbuf_r+0x6c>
 80086c2:	2e0a      	cmp	r6, #10
 80086c4:	d104      	bne.n	80086d0 <__swbuf_r+0x6c>
 80086c6:	4621      	mov	r1, r4
 80086c8:	4628      	mov	r0, r5
 80086ca:	f000 f927 	bl	800891c <_fflush_r>
 80086ce:	b988      	cbnz	r0, 80086f4 <__swbuf_r+0x90>
 80086d0:	4638      	mov	r0, r7
 80086d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086d4:	4b0a      	ldr	r3, [pc, #40]	; (8008700 <__swbuf_r+0x9c>)
 80086d6:	429c      	cmp	r4, r3
 80086d8:	d101      	bne.n	80086de <__swbuf_r+0x7a>
 80086da:	68ac      	ldr	r4, [r5, #8]
 80086dc:	e7cf      	b.n	800867e <__swbuf_r+0x1a>
 80086de:	4b09      	ldr	r3, [pc, #36]	; (8008704 <__swbuf_r+0xa0>)
 80086e0:	429c      	cmp	r4, r3
 80086e2:	bf08      	it	eq
 80086e4:	68ec      	ldreq	r4, [r5, #12]
 80086e6:	e7ca      	b.n	800867e <__swbuf_r+0x1a>
 80086e8:	4621      	mov	r1, r4
 80086ea:	4628      	mov	r0, r5
 80086ec:	f000 f81a 	bl	8008724 <__swsetup_r>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	d0cb      	beq.n	800868c <__swbuf_r+0x28>
 80086f4:	f04f 37ff 	mov.w	r7, #4294967295
 80086f8:	e7ea      	b.n	80086d0 <__swbuf_r+0x6c>
 80086fa:	bf00      	nop
 80086fc:	080092dc 	.word	0x080092dc
 8008700:	080092fc 	.word	0x080092fc
 8008704:	080092bc 	.word	0x080092bc

08008708 <__ascii_wctomb>:
 8008708:	b149      	cbz	r1, 800871e <__ascii_wctomb+0x16>
 800870a:	2aff      	cmp	r2, #255	; 0xff
 800870c:	bf85      	ittet	hi
 800870e:	238a      	movhi	r3, #138	; 0x8a
 8008710:	6003      	strhi	r3, [r0, #0]
 8008712:	700a      	strbls	r2, [r1, #0]
 8008714:	f04f 30ff 	movhi.w	r0, #4294967295
 8008718:	bf98      	it	ls
 800871a:	2001      	movls	r0, #1
 800871c:	4770      	bx	lr
 800871e:	4608      	mov	r0, r1
 8008720:	4770      	bx	lr
	...

08008724 <__swsetup_r>:
 8008724:	4b32      	ldr	r3, [pc, #200]	; (80087f0 <__swsetup_r+0xcc>)
 8008726:	b570      	push	{r4, r5, r6, lr}
 8008728:	681d      	ldr	r5, [r3, #0]
 800872a:	4606      	mov	r6, r0
 800872c:	460c      	mov	r4, r1
 800872e:	b125      	cbz	r5, 800873a <__swsetup_r+0x16>
 8008730:	69ab      	ldr	r3, [r5, #24]
 8008732:	b913      	cbnz	r3, 800873a <__swsetup_r+0x16>
 8008734:	4628      	mov	r0, r5
 8008736:	f000 f985 	bl	8008a44 <__sinit>
 800873a:	4b2e      	ldr	r3, [pc, #184]	; (80087f4 <__swsetup_r+0xd0>)
 800873c:	429c      	cmp	r4, r3
 800873e:	d10f      	bne.n	8008760 <__swsetup_r+0x3c>
 8008740:	686c      	ldr	r4, [r5, #4]
 8008742:	89a3      	ldrh	r3, [r4, #12]
 8008744:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008748:	0719      	lsls	r1, r3, #28
 800874a:	d42c      	bmi.n	80087a6 <__swsetup_r+0x82>
 800874c:	06dd      	lsls	r5, r3, #27
 800874e:	d411      	bmi.n	8008774 <__swsetup_r+0x50>
 8008750:	2309      	movs	r3, #9
 8008752:	6033      	str	r3, [r6, #0]
 8008754:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008758:	81a3      	strh	r3, [r4, #12]
 800875a:	f04f 30ff 	mov.w	r0, #4294967295
 800875e:	e03e      	b.n	80087de <__swsetup_r+0xba>
 8008760:	4b25      	ldr	r3, [pc, #148]	; (80087f8 <__swsetup_r+0xd4>)
 8008762:	429c      	cmp	r4, r3
 8008764:	d101      	bne.n	800876a <__swsetup_r+0x46>
 8008766:	68ac      	ldr	r4, [r5, #8]
 8008768:	e7eb      	b.n	8008742 <__swsetup_r+0x1e>
 800876a:	4b24      	ldr	r3, [pc, #144]	; (80087fc <__swsetup_r+0xd8>)
 800876c:	429c      	cmp	r4, r3
 800876e:	bf08      	it	eq
 8008770:	68ec      	ldreq	r4, [r5, #12]
 8008772:	e7e6      	b.n	8008742 <__swsetup_r+0x1e>
 8008774:	0758      	lsls	r0, r3, #29
 8008776:	d512      	bpl.n	800879e <__swsetup_r+0x7a>
 8008778:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800877a:	b141      	cbz	r1, 800878e <__swsetup_r+0x6a>
 800877c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008780:	4299      	cmp	r1, r3
 8008782:	d002      	beq.n	800878a <__swsetup_r+0x66>
 8008784:	4630      	mov	r0, r6
 8008786:	f7ff fb6f 	bl	8007e68 <_free_r>
 800878a:	2300      	movs	r3, #0
 800878c:	6363      	str	r3, [r4, #52]	; 0x34
 800878e:	89a3      	ldrh	r3, [r4, #12]
 8008790:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008794:	81a3      	strh	r3, [r4, #12]
 8008796:	2300      	movs	r3, #0
 8008798:	6063      	str	r3, [r4, #4]
 800879a:	6923      	ldr	r3, [r4, #16]
 800879c:	6023      	str	r3, [r4, #0]
 800879e:	89a3      	ldrh	r3, [r4, #12]
 80087a0:	f043 0308 	orr.w	r3, r3, #8
 80087a4:	81a3      	strh	r3, [r4, #12]
 80087a6:	6923      	ldr	r3, [r4, #16]
 80087a8:	b94b      	cbnz	r3, 80087be <__swsetup_r+0x9a>
 80087aa:	89a3      	ldrh	r3, [r4, #12]
 80087ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80087b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087b4:	d003      	beq.n	80087be <__swsetup_r+0x9a>
 80087b6:	4621      	mov	r1, r4
 80087b8:	4630      	mov	r0, r6
 80087ba:	f000 fa07 	bl	8008bcc <__smakebuf_r>
 80087be:	89a0      	ldrh	r0, [r4, #12]
 80087c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087c4:	f010 0301 	ands.w	r3, r0, #1
 80087c8:	d00a      	beq.n	80087e0 <__swsetup_r+0xbc>
 80087ca:	2300      	movs	r3, #0
 80087cc:	60a3      	str	r3, [r4, #8]
 80087ce:	6963      	ldr	r3, [r4, #20]
 80087d0:	425b      	negs	r3, r3
 80087d2:	61a3      	str	r3, [r4, #24]
 80087d4:	6923      	ldr	r3, [r4, #16]
 80087d6:	b943      	cbnz	r3, 80087ea <__swsetup_r+0xc6>
 80087d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80087dc:	d1ba      	bne.n	8008754 <__swsetup_r+0x30>
 80087de:	bd70      	pop	{r4, r5, r6, pc}
 80087e0:	0781      	lsls	r1, r0, #30
 80087e2:	bf58      	it	pl
 80087e4:	6963      	ldrpl	r3, [r4, #20]
 80087e6:	60a3      	str	r3, [r4, #8]
 80087e8:	e7f4      	b.n	80087d4 <__swsetup_r+0xb0>
 80087ea:	2000      	movs	r0, #0
 80087ec:	e7f7      	b.n	80087de <__swsetup_r+0xba>
 80087ee:	bf00      	nop
 80087f0:	20000024 	.word	0x20000024
 80087f4:	080092dc 	.word	0x080092dc
 80087f8:	080092fc 	.word	0x080092fc
 80087fc:	080092bc 	.word	0x080092bc

08008800 <abort>:
 8008800:	b508      	push	{r3, lr}
 8008802:	2006      	movs	r0, #6
 8008804:	f000 fa52 	bl	8008cac <raise>
 8008808:	2001      	movs	r0, #1
 800880a:	f7f9 fb29 	bl	8001e60 <_exit>
	...

08008810 <__sflush_r>:
 8008810:	898a      	ldrh	r2, [r1, #12]
 8008812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008816:	4605      	mov	r5, r0
 8008818:	0710      	lsls	r0, r2, #28
 800881a:	460c      	mov	r4, r1
 800881c:	d458      	bmi.n	80088d0 <__sflush_r+0xc0>
 800881e:	684b      	ldr	r3, [r1, #4]
 8008820:	2b00      	cmp	r3, #0
 8008822:	dc05      	bgt.n	8008830 <__sflush_r+0x20>
 8008824:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008826:	2b00      	cmp	r3, #0
 8008828:	dc02      	bgt.n	8008830 <__sflush_r+0x20>
 800882a:	2000      	movs	r0, #0
 800882c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008830:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008832:	2e00      	cmp	r6, #0
 8008834:	d0f9      	beq.n	800882a <__sflush_r+0x1a>
 8008836:	2300      	movs	r3, #0
 8008838:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800883c:	682f      	ldr	r7, [r5, #0]
 800883e:	602b      	str	r3, [r5, #0]
 8008840:	d032      	beq.n	80088a8 <__sflush_r+0x98>
 8008842:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008844:	89a3      	ldrh	r3, [r4, #12]
 8008846:	075a      	lsls	r2, r3, #29
 8008848:	d505      	bpl.n	8008856 <__sflush_r+0x46>
 800884a:	6863      	ldr	r3, [r4, #4]
 800884c:	1ac0      	subs	r0, r0, r3
 800884e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008850:	b10b      	cbz	r3, 8008856 <__sflush_r+0x46>
 8008852:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008854:	1ac0      	subs	r0, r0, r3
 8008856:	2300      	movs	r3, #0
 8008858:	4602      	mov	r2, r0
 800885a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800885c:	6a21      	ldr	r1, [r4, #32]
 800885e:	4628      	mov	r0, r5
 8008860:	47b0      	blx	r6
 8008862:	1c43      	adds	r3, r0, #1
 8008864:	89a3      	ldrh	r3, [r4, #12]
 8008866:	d106      	bne.n	8008876 <__sflush_r+0x66>
 8008868:	6829      	ldr	r1, [r5, #0]
 800886a:	291d      	cmp	r1, #29
 800886c:	d82c      	bhi.n	80088c8 <__sflush_r+0xb8>
 800886e:	4a2a      	ldr	r2, [pc, #168]	; (8008918 <__sflush_r+0x108>)
 8008870:	40ca      	lsrs	r2, r1
 8008872:	07d6      	lsls	r6, r2, #31
 8008874:	d528      	bpl.n	80088c8 <__sflush_r+0xb8>
 8008876:	2200      	movs	r2, #0
 8008878:	6062      	str	r2, [r4, #4]
 800887a:	04d9      	lsls	r1, r3, #19
 800887c:	6922      	ldr	r2, [r4, #16]
 800887e:	6022      	str	r2, [r4, #0]
 8008880:	d504      	bpl.n	800888c <__sflush_r+0x7c>
 8008882:	1c42      	adds	r2, r0, #1
 8008884:	d101      	bne.n	800888a <__sflush_r+0x7a>
 8008886:	682b      	ldr	r3, [r5, #0]
 8008888:	b903      	cbnz	r3, 800888c <__sflush_r+0x7c>
 800888a:	6560      	str	r0, [r4, #84]	; 0x54
 800888c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800888e:	602f      	str	r7, [r5, #0]
 8008890:	2900      	cmp	r1, #0
 8008892:	d0ca      	beq.n	800882a <__sflush_r+0x1a>
 8008894:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008898:	4299      	cmp	r1, r3
 800889a:	d002      	beq.n	80088a2 <__sflush_r+0x92>
 800889c:	4628      	mov	r0, r5
 800889e:	f7ff fae3 	bl	8007e68 <_free_r>
 80088a2:	2000      	movs	r0, #0
 80088a4:	6360      	str	r0, [r4, #52]	; 0x34
 80088a6:	e7c1      	b.n	800882c <__sflush_r+0x1c>
 80088a8:	6a21      	ldr	r1, [r4, #32]
 80088aa:	2301      	movs	r3, #1
 80088ac:	4628      	mov	r0, r5
 80088ae:	47b0      	blx	r6
 80088b0:	1c41      	adds	r1, r0, #1
 80088b2:	d1c7      	bne.n	8008844 <__sflush_r+0x34>
 80088b4:	682b      	ldr	r3, [r5, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d0c4      	beq.n	8008844 <__sflush_r+0x34>
 80088ba:	2b1d      	cmp	r3, #29
 80088bc:	d001      	beq.n	80088c2 <__sflush_r+0xb2>
 80088be:	2b16      	cmp	r3, #22
 80088c0:	d101      	bne.n	80088c6 <__sflush_r+0xb6>
 80088c2:	602f      	str	r7, [r5, #0]
 80088c4:	e7b1      	b.n	800882a <__sflush_r+0x1a>
 80088c6:	89a3      	ldrh	r3, [r4, #12]
 80088c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088cc:	81a3      	strh	r3, [r4, #12]
 80088ce:	e7ad      	b.n	800882c <__sflush_r+0x1c>
 80088d0:	690f      	ldr	r7, [r1, #16]
 80088d2:	2f00      	cmp	r7, #0
 80088d4:	d0a9      	beq.n	800882a <__sflush_r+0x1a>
 80088d6:	0793      	lsls	r3, r2, #30
 80088d8:	680e      	ldr	r6, [r1, #0]
 80088da:	bf08      	it	eq
 80088dc:	694b      	ldreq	r3, [r1, #20]
 80088de:	600f      	str	r7, [r1, #0]
 80088e0:	bf18      	it	ne
 80088e2:	2300      	movne	r3, #0
 80088e4:	eba6 0807 	sub.w	r8, r6, r7
 80088e8:	608b      	str	r3, [r1, #8]
 80088ea:	f1b8 0f00 	cmp.w	r8, #0
 80088ee:	dd9c      	ble.n	800882a <__sflush_r+0x1a>
 80088f0:	6a21      	ldr	r1, [r4, #32]
 80088f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80088f4:	4643      	mov	r3, r8
 80088f6:	463a      	mov	r2, r7
 80088f8:	4628      	mov	r0, r5
 80088fa:	47b0      	blx	r6
 80088fc:	2800      	cmp	r0, #0
 80088fe:	dc06      	bgt.n	800890e <__sflush_r+0xfe>
 8008900:	89a3      	ldrh	r3, [r4, #12]
 8008902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008906:	81a3      	strh	r3, [r4, #12]
 8008908:	f04f 30ff 	mov.w	r0, #4294967295
 800890c:	e78e      	b.n	800882c <__sflush_r+0x1c>
 800890e:	4407      	add	r7, r0
 8008910:	eba8 0800 	sub.w	r8, r8, r0
 8008914:	e7e9      	b.n	80088ea <__sflush_r+0xda>
 8008916:	bf00      	nop
 8008918:	20400001 	.word	0x20400001

0800891c <_fflush_r>:
 800891c:	b538      	push	{r3, r4, r5, lr}
 800891e:	690b      	ldr	r3, [r1, #16]
 8008920:	4605      	mov	r5, r0
 8008922:	460c      	mov	r4, r1
 8008924:	b913      	cbnz	r3, 800892c <_fflush_r+0x10>
 8008926:	2500      	movs	r5, #0
 8008928:	4628      	mov	r0, r5
 800892a:	bd38      	pop	{r3, r4, r5, pc}
 800892c:	b118      	cbz	r0, 8008936 <_fflush_r+0x1a>
 800892e:	6983      	ldr	r3, [r0, #24]
 8008930:	b90b      	cbnz	r3, 8008936 <_fflush_r+0x1a>
 8008932:	f000 f887 	bl	8008a44 <__sinit>
 8008936:	4b14      	ldr	r3, [pc, #80]	; (8008988 <_fflush_r+0x6c>)
 8008938:	429c      	cmp	r4, r3
 800893a:	d11b      	bne.n	8008974 <_fflush_r+0x58>
 800893c:	686c      	ldr	r4, [r5, #4]
 800893e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d0ef      	beq.n	8008926 <_fflush_r+0xa>
 8008946:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008948:	07d0      	lsls	r0, r2, #31
 800894a:	d404      	bmi.n	8008956 <_fflush_r+0x3a>
 800894c:	0599      	lsls	r1, r3, #22
 800894e:	d402      	bmi.n	8008956 <_fflush_r+0x3a>
 8008950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008952:	f000 f915 	bl	8008b80 <__retarget_lock_acquire_recursive>
 8008956:	4628      	mov	r0, r5
 8008958:	4621      	mov	r1, r4
 800895a:	f7ff ff59 	bl	8008810 <__sflush_r>
 800895e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008960:	07da      	lsls	r2, r3, #31
 8008962:	4605      	mov	r5, r0
 8008964:	d4e0      	bmi.n	8008928 <_fflush_r+0xc>
 8008966:	89a3      	ldrh	r3, [r4, #12]
 8008968:	059b      	lsls	r3, r3, #22
 800896a:	d4dd      	bmi.n	8008928 <_fflush_r+0xc>
 800896c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800896e:	f000 f908 	bl	8008b82 <__retarget_lock_release_recursive>
 8008972:	e7d9      	b.n	8008928 <_fflush_r+0xc>
 8008974:	4b05      	ldr	r3, [pc, #20]	; (800898c <_fflush_r+0x70>)
 8008976:	429c      	cmp	r4, r3
 8008978:	d101      	bne.n	800897e <_fflush_r+0x62>
 800897a:	68ac      	ldr	r4, [r5, #8]
 800897c:	e7df      	b.n	800893e <_fflush_r+0x22>
 800897e:	4b04      	ldr	r3, [pc, #16]	; (8008990 <_fflush_r+0x74>)
 8008980:	429c      	cmp	r4, r3
 8008982:	bf08      	it	eq
 8008984:	68ec      	ldreq	r4, [r5, #12]
 8008986:	e7da      	b.n	800893e <_fflush_r+0x22>
 8008988:	080092dc 	.word	0x080092dc
 800898c:	080092fc 	.word	0x080092fc
 8008990:	080092bc 	.word	0x080092bc

08008994 <std>:
 8008994:	2300      	movs	r3, #0
 8008996:	b510      	push	{r4, lr}
 8008998:	4604      	mov	r4, r0
 800899a:	e9c0 3300 	strd	r3, r3, [r0]
 800899e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089a2:	6083      	str	r3, [r0, #8]
 80089a4:	8181      	strh	r1, [r0, #12]
 80089a6:	6643      	str	r3, [r0, #100]	; 0x64
 80089a8:	81c2      	strh	r2, [r0, #14]
 80089aa:	6183      	str	r3, [r0, #24]
 80089ac:	4619      	mov	r1, r3
 80089ae:	2208      	movs	r2, #8
 80089b0:	305c      	adds	r0, #92	; 0x5c
 80089b2:	f7fd fba7 	bl	8006104 <memset>
 80089b6:	4b05      	ldr	r3, [pc, #20]	; (80089cc <std+0x38>)
 80089b8:	6263      	str	r3, [r4, #36]	; 0x24
 80089ba:	4b05      	ldr	r3, [pc, #20]	; (80089d0 <std+0x3c>)
 80089bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80089be:	4b05      	ldr	r3, [pc, #20]	; (80089d4 <std+0x40>)
 80089c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80089c2:	4b05      	ldr	r3, [pc, #20]	; (80089d8 <std+0x44>)
 80089c4:	6224      	str	r4, [r4, #32]
 80089c6:	6323      	str	r3, [r4, #48]	; 0x30
 80089c8:	bd10      	pop	{r4, pc}
 80089ca:	bf00      	nop
 80089cc:	08008ce5 	.word	0x08008ce5
 80089d0:	08008d07 	.word	0x08008d07
 80089d4:	08008d3f 	.word	0x08008d3f
 80089d8:	08008d63 	.word	0x08008d63

080089dc <_cleanup_r>:
 80089dc:	4901      	ldr	r1, [pc, #4]	; (80089e4 <_cleanup_r+0x8>)
 80089de:	f000 b8af 	b.w	8008b40 <_fwalk_reent>
 80089e2:	bf00      	nop
 80089e4:	0800891d 	.word	0x0800891d

080089e8 <__sfmoreglue>:
 80089e8:	b570      	push	{r4, r5, r6, lr}
 80089ea:	1e4a      	subs	r2, r1, #1
 80089ec:	2568      	movs	r5, #104	; 0x68
 80089ee:	4355      	muls	r5, r2
 80089f0:	460e      	mov	r6, r1
 80089f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80089f6:	f7ff fa87 	bl	8007f08 <_malloc_r>
 80089fa:	4604      	mov	r4, r0
 80089fc:	b140      	cbz	r0, 8008a10 <__sfmoreglue+0x28>
 80089fe:	2100      	movs	r1, #0
 8008a00:	e9c0 1600 	strd	r1, r6, [r0]
 8008a04:	300c      	adds	r0, #12
 8008a06:	60a0      	str	r0, [r4, #8]
 8008a08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a0c:	f7fd fb7a 	bl	8006104 <memset>
 8008a10:	4620      	mov	r0, r4
 8008a12:	bd70      	pop	{r4, r5, r6, pc}

08008a14 <__sfp_lock_acquire>:
 8008a14:	4801      	ldr	r0, [pc, #4]	; (8008a1c <__sfp_lock_acquire+0x8>)
 8008a16:	f000 b8b3 	b.w	8008b80 <__retarget_lock_acquire_recursive>
 8008a1a:	bf00      	nop
 8008a1c:	20000400 	.word	0x20000400

08008a20 <__sfp_lock_release>:
 8008a20:	4801      	ldr	r0, [pc, #4]	; (8008a28 <__sfp_lock_release+0x8>)
 8008a22:	f000 b8ae 	b.w	8008b82 <__retarget_lock_release_recursive>
 8008a26:	bf00      	nop
 8008a28:	20000400 	.word	0x20000400

08008a2c <__sinit_lock_acquire>:
 8008a2c:	4801      	ldr	r0, [pc, #4]	; (8008a34 <__sinit_lock_acquire+0x8>)
 8008a2e:	f000 b8a7 	b.w	8008b80 <__retarget_lock_acquire_recursive>
 8008a32:	bf00      	nop
 8008a34:	200003fb 	.word	0x200003fb

08008a38 <__sinit_lock_release>:
 8008a38:	4801      	ldr	r0, [pc, #4]	; (8008a40 <__sinit_lock_release+0x8>)
 8008a3a:	f000 b8a2 	b.w	8008b82 <__retarget_lock_release_recursive>
 8008a3e:	bf00      	nop
 8008a40:	200003fb 	.word	0x200003fb

08008a44 <__sinit>:
 8008a44:	b510      	push	{r4, lr}
 8008a46:	4604      	mov	r4, r0
 8008a48:	f7ff fff0 	bl	8008a2c <__sinit_lock_acquire>
 8008a4c:	69a3      	ldr	r3, [r4, #24]
 8008a4e:	b11b      	cbz	r3, 8008a58 <__sinit+0x14>
 8008a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a54:	f7ff bff0 	b.w	8008a38 <__sinit_lock_release>
 8008a58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008a5c:	6523      	str	r3, [r4, #80]	; 0x50
 8008a5e:	4b13      	ldr	r3, [pc, #76]	; (8008aac <__sinit+0x68>)
 8008a60:	4a13      	ldr	r2, [pc, #76]	; (8008ab0 <__sinit+0x6c>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	62a2      	str	r2, [r4, #40]	; 0x28
 8008a66:	42a3      	cmp	r3, r4
 8008a68:	bf04      	itt	eq
 8008a6a:	2301      	moveq	r3, #1
 8008a6c:	61a3      	streq	r3, [r4, #24]
 8008a6e:	4620      	mov	r0, r4
 8008a70:	f000 f820 	bl	8008ab4 <__sfp>
 8008a74:	6060      	str	r0, [r4, #4]
 8008a76:	4620      	mov	r0, r4
 8008a78:	f000 f81c 	bl	8008ab4 <__sfp>
 8008a7c:	60a0      	str	r0, [r4, #8]
 8008a7e:	4620      	mov	r0, r4
 8008a80:	f000 f818 	bl	8008ab4 <__sfp>
 8008a84:	2200      	movs	r2, #0
 8008a86:	60e0      	str	r0, [r4, #12]
 8008a88:	2104      	movs	r1, #4
 8008a8a:	6860      	ldr	r0, [r4, #4]
 8008a8c:	f7ff ff82 	bl	8008994 <std>
 8008a90:	68a0      	ldr	r0, [r4, #8]
 8008a92:	2201      	movs	r2, #1
 8008a94:	2109      	movs	r1, #9
 8008a96:	f7ff ff7d 	bl	8008994 <std>
 8008a9a:	68e0      	ldr	r0, [r4, #12]
 8008a9c:	2202      	movs	r2, #2
 8008a9e:	2112      	movs	r1, #18
 8008aa0:	f7ff ff78 	bl	8008994 <std>
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	61a3      	str	r3, [r4, #24]
 8008aa8:	e7d2      	b.n	8008a50 <__sinit+0xc>
 8008aaa:	bf00      	nop
 8008aac:	08008f3c 	.word	0x08008f3c
 8008ab0:	080089dd 	.word	0x080089dd

08008ab4 <__sfp>:
 8008ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab6:	4607      	mov	r7, r0
 8008ab8:	f7ff ffac 	bl	8008a14 <__sfp_lock_acquire>
 8008abc:	4b1e      	ldr	r3, [pc, #120]	; (8008b38 <__sfp+0x84>)
 8008abe:	681e      	ldr	r6, [r3, #0]
 8008ac0:	69b3      	ldr	r3, [r6, #24]
 8008ac2:	b913      	cbnz	r3, 8008aca <__sfp+0x16>
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	f7ff ffbd 	bl	8008a44 <__sinit>
 8008aca:	3648      	adds	r6, #72	; 0x48
 8008acc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	d503      	bpl.n	8008adc <__sfp+0x28>
 8008ad4:	6833      	ldr	r3, [r6, #0]
 8008ad6:	b30b      	cbz	r3, 8008b1c <__sfp+0x68>
 8008ad8:	6836      	ldr	r6, [r6, #0]
 8008ada:	e7f7      	b.n	8008acc <__sfp+0x18>
 8008adc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ae0:	b9d5      	cbnz	r5, 8008b18 <__sfp+0x64>
 8008ae2:	4b16      	ldr	r3, [pc, #88]	; (8008b3c <__sfp+0x88>)
 8008ae4:	60e3      	str	r3, [r4, #12]
 8008ae6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008aea:	6665      	str	r5, [r4, #100]	; 0x64
 8008aec:	f000 f847 	bl	8008b7e <__retarget_lock_init_recursive>
 8008af0:	f7ff ff96 	bl	8008a20 <__sfp_lock_release>
 8008af4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008af8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008afc:	6025      	str	r5, [r4, #0]
 8008afe:	61a5      	str	r5, [r4, #24]
 8008b00:	2208      	movs	r2, #8
 8008b02:	4629      	mov	r1, r5
 8008b04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b08:	f7fd fafc 	bl	8006104 <memset>
 8008b0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b14:	4620      	mov	r0, r4
 8008b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b18:	3468      	adds	r4, #104	; 0x68
 8008b1a:	e7d9      	b.n	8008ad0 <__sfp+0x1c>
 8008b1c:	2104      	movs	r1, #4
 8008b1e:	4638      	mov	r0, r7
 8008b20:	f7ff ff62 	bl	80089e8 <__sfmoreglue>
 8008b24:	4604      	mov	r4, r0
 8008b26:	6030      	str	r0, [r6, #0]
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	d1d5      	bne.n	8008ad8 <__sfp+0x24>
 8008b2c:	f7ff ff78 	bl	8008a20 <__sfp_lock_release>
 8008b30:	230c      	movs	r3, #12
 8008b32:	603b      	str	r3, [r7, #0]
 8008b34:	e7ee      	b.n	8008b14 <__sfp+0x60>
 8008b36:	bf00      	nop
 8008b38:	08008f3c 	.word	0x08008f3c
 8008b3c:	ffff0001 	.word	0xffff0001

08008b40 <_fwalk_reent>:
 8008b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b44:	4606      	mov	r6, r0
 8008b46:	4688      	mov	r8, r1
 8008b48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b4c:	2700      	movs	r7, #0
 8008b4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b52:	f1b9 0901 	subs.w	r9, r9, #1
 8008b56:	d505      	bpl.n	8008b64 <_fwalk_reent+0x24>
 8008b58:	6824      	ldr	r4, [r4, #0]
 8008b5a:	2c00      	cmp	r4, #0
 8008b5c:	d1f7      	bne.n	8008b4e <_fwalk_reent+0xe>
 8008b5e:	4638      	mov	r0, r7
 8008b60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b64:	89ab      	ldrh	r3, [r5, #12]
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d907      	bls.n	8008b7a <_fwalk_reent+0x3a>
 8008b6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	d003      	beq.n	8008b7a <_fwalk_reent+0x3a>
 8008b72:	4629      	mov	r1, r5
 8008b74:	4630      	mov	r0, r6
 8008b76:	47c0      	blx	r8
 8008b78:	4307      	orrs	r7, r0
 8008b7a:	3568      	adds	r5, #104	; 0x68
 8008b7c:	e7e9      	b.n	8008b52 <_fwalk_reent+0x12>

08008b7e <__retarget_lock_init_recursive>:
 8008b7e:	4770      	bx	lr

08008b80 <__retarget_lock_acquire_recursive>:
 8008b80:	4770      	bx	lr

08008b82 <__retarget_lock_release_recursive>:
 8008b82:	4770      	bx	lr

08008b84 <__swhatbuf_r>:
 8008b84:	b570      	push	{r4, r5, r6, lr}
 8008b86:	460e      	mov	r6, r1
 8008b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b8c:	2900      	cmp	r1, #0
 8008b8e:	b096      	sub	sp, #88	; 0x58
 8008b90:	4614      	mov	r4, r2
 8008b92:	461d      	mov	r5, r3
 8008b94:	da07      	bge.n	8008ba6 <__swhatbuf_r+0x22>
 8008b96:	2300      	movs	r3, #0
 8008b98:	602b      	str	r3, [r5, #0]
 8008b9a:	89b3      	ldrh	r3, [r6, #12]
 8008b9c:	061a      	lsls	r2, r3, #24
 8008b9e:	d410      	bmi.n	8008bc2 <__swhatbuf_r+0x3e>
 8008ba0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ba4:	e00e      	b.n	8008bc4 <__swhatbuf_r+0x40>
 8008ba6:	466a      	mov	r2, sp
 8008ba8:	f000 f902 	bl	8008db0 <_fstat_r>
 8008bac:	2800      	cmp	r0, #0
 8008bae:	dbf2      	blt.n	8008b96 <__swhatbuf_r+0x12>
 8008bb0:	9a01      	ldr	r2, [sp, #4]
 8008bb2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008bb6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008bba:	425a      	negs	r2, r3
 8008bbc:	415a      	adcs	r2, r3
 8008bbe:	602a      	str	r2, [r5, #0]
 8008bc0:	e7ee      	b.n	8008ba0 <__swhatbuf_r+0x1c>
 8008bc2:	2340      	movs	r3, #64	; 0x40
 8008bc4:	2000      	movs	r0, #0
 8008bc6:	6023      	str	r3, [r4, #0]
 8008bc8:	b016      	add	sp, #88	; 0x58
 8008bca:	bd70      	pop	{r4, r5, r6, pc}

08008bcc <__smakebuf_r>:
 8008bcc:	898b      	ldrh	r3, [r1, #12]
 8008bce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008bd0:	079d      	lsls	r5, r3, #30
 8008bd2:	4606      	mov	r6, r0
 8008bd4:	460c      	mov	r4, r1
 8008bd6:	d507      	bpl.n	8008be8 <__smakebuf_r+0x1c>
 8008bd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008bdc:	6023      	str	r3, [r4, #0]
 8008bde:	6123      	str	r3, [r4, #16]
 8008be0:	2301      	movs	r3, #1
 8008be2:	6163      	str	r3, [r4, #20]
 8008be4:	b002      	add	sp, #8
 8008be6:	bd70      	pop	{r4, r5, r6, pc}
 8008be8:	ab01      	add	r3, sp, #4
 8008bea:	466a      	mov	r2, sp
 8008bec:	f7ff ffca 	bl	8008b84 <__swhatbuf_r>
 8008bf0:	9900      	ldr	r1, [sp, #0]
 8008bf2:	4605      	mov	r5, r0
 8008bf4:	4630      	mov	r0, r6
 8008bf6:	f7ff f987 	bl	8007f08 <_malloc_r>
 8008bfa:	b948      	cbnz	r0, 8008c10 <__smakebuf_r+0x44>
 8008bfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c00:	059a      	lsls	r2, r3, #22
 8008c02:	d4ef      	bmi.n	8008be4 <__smakebuf_r+0x18>
 8008c04:	f023 0303 	bic.w	r3, r3, #3
 8008c08:	f043 0302 	orr.w	r3, r3, #2
 8008c0c:	81a3      	strh	r3, [r4, #12]
 8008c0e:	e7e3      	b.n	8008bd8 <__smakebuf_r+0xc>
 8008c10:	4b0d      	ldr	r3, [pc, #52]	; (8008c48 <__smakebuf_r+0x7c>)
 8008c12:	62b3      	str	r3, [r6, #40]	; 0x28
 8008c14:	89a3      	ldrh	r3, [r4, #12]
 8008c16:	6020      	str	r0, [r4, #0]
 8008c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c1c:	81a3      	strh	r3, [r4, #12]
 8008c1e:	9b00      	ldr	r3, [sp, #0]
 8008c20:	6163      	str	r3, [r4, #20]
 8008c22:	9b01      	ldr	r3, [sp, #4]
 8008c24:	6120      	str	r0, [r4, #16]
 8008c26:	b15b      	cbz	r3, 8008c40 <__smakebuf_r+0x74>
 8008c28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	f000 f8d1 	bl	8008dd4 <_isatty_r>
 8008c32:	b128      	cbz	r0, 8008c40 <__smakebuf_r+0x74>
 8008c34:	89a3      	ldrh	r3, [r4, #12]
 8008c36:	f023 0303 	bic.w	r3, r3, #3
 8008c3a:	f043 0301 	orr.w	r3, r3, #1
 8008c3e:	81a3      	strh	r3, [r4, #12]
 8008c40:	89a0      	ldrh	r0, [r4, #12]
 8008c42:	4305      	orrs	r5, r0
 8008c44:	81a5      	strh	r5, [r4, #12]
 8008c46:	e7cd      	b.n	8008be4 <__smakebuf_r+0x18>
 8008c48:	080089dd 	.word	0x080089dd

08008c4c <_malloc_usable_size_r>:
 8008c4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c50:	1f18      	subs	r0, r3, #4
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	bfbc      	itt	lt
 8008c56:	580b      	ldrlt	r3, [r1, r0]
 8008c58:	18c0      	addlt	r0, r0, r3
 8008c5a:	4770      	bx	lr

08008c5c <_raise_r>:
 8008c5c:	291f      	cmp	r1, #31
 8008c5e:	b538      	push	{r3, r4, r5, lr}
 8008c60:	4604      	mov	r4, r0
 8008c62:	460d      	mov	r5, r1
 8008c64:	d904      	bls.n	8008c70 <_raise_r+0x14>
 8008c66:	2316      	movs	r3, #22
 8008c68:	6003      	str	r3, [r0, #0]
 8008c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c6e:	bd38      	pop	{r3, r4, r5, pc}
 8008c70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008c72:	b112      	cbz	r2, 8008c7a <_raise_r+0x1e>
 8008c74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c78:	b94b      	cbnz	r3, 8008c8e <_raise_r+0x32>
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	f000 f830 	bl	8008ce0 <_getpid_r>
 8008c80:	462a      	mov	r2, r5
 8008c82:	4601      	mov	r1, r0
 8008c84:	4620      	mov	r0, r4
 8008c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c8a:	f000 b817 	b.w	8008cbc <_kill_r>
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d00a      	beq.n	8008ca8 <_raise_r+0x4c>
 8008c92:	1c59      	adds	r1, r3, #1
 8008c94:	d103      	bne.n	8008c9e <_raise_r+0x42>
 8008c96:	2316      	movs	r3, #22
 8008c98:	6003      	str	r3, [r0, #0]
 8008c9a:	2001      	movs	r0, #1
 8008c9c:	e7e7      	b.n	8008c6e <_raise_r+0x12>
 8008c9e:	2400      	movs	r4, #0
 8008ca0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	4798      	blx	r3
 8008ca8:	2000      	movs	r0, #0
 8008caa:	e7e0      	b.n	8008c6e <_raise_r+0x12>

08008cac <raise>:
 8008cac:	4b02      	ldr	r3, [pc, #8]	; (8008cb8 <raise+0xc>)
 8008cae:	4601      	mov	r1, r0
 8008cb0:	6818      	ldr	r0, [r3, #0]
 8008cb2:	f7ff bfd3 	b.w	8008c5c <_raise_r>
 8008cb6:	bf00      	nop
 8008cb8:	20000024 	.word	0x20000024

08008cbc <_kill_r>:
 8008cbc:	b538      	push	{r3, r4, r5, lr}
 8008cbe:	4d07      	ldr	r5, [pc, #28]	; (8008cdc <_kill_r+0x20>)
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	4604      	mov	r4, r0
 8008cc4:	4608      	mov	r0, r1
 8008cc6:	4611      	mov	r1, r2
 8008cc8:	602b      	str	r3, [r5, #0]
 8008cca:	f7f9 f8b9 	bl	8001e40 <_kill>
 8008cce:	1c43      	adds	r3, r0, #1
 8008cd0:	d102      	bne.n	8008cd8 <_kill_r+0x1c>
 8008cd2:	682b      	ldr	r3, [r5, #0]
 8008cd4:	b103      	cbz	r3, 8008cd8 <_kill_r+0x1c>
 8008cd6:	6023      	str	r3, [r4, #0]
 8008cd8:	bd38      	pop	{r3, r4, r5, pc}
 8008cda:	bf00      	nop
 8008cdc:	200003f4 	.word	0x200003f4

08008ce0 <_getpid_r>:
 8008ce0:	f7f9 b8a6 	b.w	8001e30 <_getpid>

08008ce4 <__sread>:
 8008ce4:	b510      	push	{r4, lr}
 8008ce6:	460c      	mov	r4, r1
 8008ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cec:	f000 f894 	bl	8008e18 <_read_r>
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	bfab      	itete	ge
 8008cf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008cf6:	89a3      	ldrhlt	r3, [r4, #12]
 8008cf8:	181b      	addge	r3, r3, r0
 8008cfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008cfe:	bfac      	ite	ge
 8008d00:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d02:	81a3      	strhlt	r3, [r4, #12]
 8008d04:	bd10      	pop	{r4, pc}

08008d06 <__swrite>:
 8008d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d0a:	461f      	mov	r7, r3
 8008d0c:	898b      	ldrh	r3, [r1, #12]
 8008d0e:	05db      	lsls	r3, r3, #23
 8008d10:	4605      	mov	r5, r0
 8008d12:	460c      	mov	r4, r1
 8008d14:	4616      	mov	r6, r2
 8008d16:	d505      	bpl.n	8008d24 <__swrite+0x1e>
 8008d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d1c:	2302      	movs	r3, #2
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f000 f868 	bl	8008df4 <_lseek_r>
 8008d24:	89a3      	ldrh	r3, [r4, #12]
 8008d26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d2e:	81a3      	strh	r3, [r4, #12]
 8008d30:	4632      	mov	r2, r6
 8008d32:	463b      	mov	r3, r7
 8008d34:	4628      	mov	r0, r5
 8008d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d3a:	f000 b817 	b.w	8008d6c <_write_r>

08008d3e <__sseek>:
 8008d3e:	b510      	push	{r4, lr}
 8008d40:	460c      	mov	r4, r1
 8008d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d46:	f000 f855 	bl	8008df4 <_lseek_r>
 8008d4a:	1c43      	adds	r3, r0, #1
 8008d4c:	89a3      	ldrh	r3, [r4, #12]
 8008d4e:	bf15      	itete	ne
 8008d50:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d5a:	81a3      	strheq	r3, [r4, #12]
 8008d5c:	bf18      	it	ne
 8008d5e:	81a3      	strhne	r3, [r4, #12]
 8008d60:	bd10      	pop	{r4, pc}

08008d62 <__sclose>:
 8008d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d66:	f000 b813 	b.w	8008d90 <_close_r>
	...

08008d6c <_write_r>:
 8008d6c:	b538      	push	{r3, r4, r5, lr}
 8008d6e:	4d07      	ldr	r5, [pc, #28]	; (8008d8c <_write_r+0x20>)
 8008d70:	4604      	mov	r4, r0
 8008d72:	4608      	mov	r0, r1
 8008d74:	4611      	mov	r1, r2
 8008d76:	2200      	movs	r2, #0
 8008d78:	602a      	str	r2, [r5, #0]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	f7f9 f897 	bl	8001eae <_write>
 8008d80:	1c43      	adds	r3, r0, #1
 8008d82:	d102      	bne.n	8008d8a <_write_r+0x1e>
 8008d84:	682b      	ldr	r3, [r5, #0]
 8008d86:	b103      	cbz	r3, 8008d8a <_write_r+0x1e>
 8008d88:	6023      	str	r3, [r4, #0]
 8008d8a:	bd38      	pop	{r3, r4, r5, pc}
 8008d8c:	200003f4 	.word	0x200003f4

08008d90 <_close_r>:
 8008d90:	b538      	push	{r3, r4, r5, lr}
 8008d92:	4d06      	ldr	r5, [pc, #24]	; (8008dac <_close_r+0x1c>)
 8008d94:	2300      	movs	r3, #0
 8008d96:	4604      	mov	r4, r0
 8008d98:	4608      	mov	r0, r1
 8008d9a:	602b      	str	r3, [r5, #0]
 8008d9c:	f7f9 f8a3 	bl	8001ee6 <_close>
 8008da0:	1c43      	adds	r3, r0, #1
 8008da2:	d102      	bne.n	8008daa <_close_r+0x1a>
 8008da4:	682b      	ldr	r3, [r5, #0]
 8008da6:	b103      	cbz	r3, 8008daa <_close_r+0x1a>
 8008da8:	6023      	str	r3, [r4, #0]
 8008daa:	bd38      	pop	{r3, r4, r5, pc}
 8008dac:	200003f4 	.word	0x200003f4

08008db0 <_fstat_r>:
 8008db0:	b538      	push	{r3, r4, r5, lr}
 8008db2:	4d07      	ldr	r5, [pc, #28]	; (8008dd0 <_fstat_r+0x20>)
 8008db4:	2300      	movs	r3, #0
 8008db6:	4604      	mov	r4, r0
 8008db8:	4608      	mov	r0, r1
 8008dba:	4611      	mov	r1, r2
 8008dbc:	602b      	str	r3, [r5, #0]
 8008dbe:	f7f9 f89e 	bl	8001efe <_fstat>
 8008dc2:	1c43      	adds	r3, r0, #1
 8008dc4:	d102      	bne.n	8008dcc <_fstat_r+0x1c>
 8008dc6:	682b      	ldr	r3, [r5, #0]
 8008dc8:	b103      	cbz	r3, 8008dcc <_fstat_r+0x1c>
 8008dca:	6023      	str	r3, [r4, #0]
 8008dcc:	bd38      	pop	{r3, r4, r5, pc}
 8008dce:	bf00      	nop
 8008dd0:	200003f4 	.word	0x200003f4

08008dd4 <_isatty_r>:
 8008dd4:	b538      	push	{r3, r4, r5, lr}
 8008dd6:	4d06      	ldr	r5, [pc, #24]	; (8008df0 <_isatty_r+0x1c>)
 8008dd8:	2300      	movs	r3, #0
 8008dda:	4604      	mov	r4, r0
 8008ddc:	4608      	mov	r0, r1
 8008dde:	602b      	str	r3, [r5, #0]
 8008de0:	f7f9 f89d 	bl	8001f1e <_isatty>
 8008de4:	1c43      	adds	r3, r0, #1
 8008de6:	d102      	bne.n	8008dee <_isatty_r+0x1a>
 8008de8:	682b      	ldr	r3, [r5, #0]
 8008dea:	b103      	cbz	r3, 8008dee <_isatty_r+0x1a>
 8008dec:	6023      	str	r3, [r4, #0]
 8008dee:	bd38      	pop	{r3, r4, r5, pc}
 8008df0:	200003f4 	.word	0x200003f4

08008df4 <_lseek_r>:
 8008df4:	b538      	push	{r3, r4, r5, lr}
 8008df6:	4d07      	ldr	r5, [pc, #28]	; (8008e14 <_lseek_r+0x20>)
 8008df8:	4604      	mov	r4, r0
 8008dfa:	4608      	mov	r0, r1
 8008dfc:	4611      	mov	r1, r2
 8008dfe:	2200      	movs	r2, #0
 8008e00:	602a      	str	r2, [r5, #0]
 8008e02:	461a      	mov	r2, r3
 8008e04:	f7f9 f896 	bl	8001f34 <_lseek>
 8008e08:	1c43      	adds	r3, r0, #1
 8008e0a:	d102      	bne.n	8008e12 <_lseek_r+0x1e>
 8008e0c:	682b      	ldr	r3, [r5, #0]
 8008e0e:	b103      	cbz	r3, 8008e12 <_lseek_r+0x1e>
 8008e10:	6023      	str	r3, [r4, #0]
 8008e12:	bd38      	pop	{r3, r4, r5, pc}
 8008e14:	200003f4 	.word	0x200003f4

08008e18 <_read_r>:
 8008e18:	b538      	push	{r3, r4, r5, lr}
 8008e1a:	4d07      	ldr	r5, [pc, #28]	; (8008e38 <_read_r+0x20>)
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	4608      	mov	r0, r1
 8008e20:	4611      	mov	r1, r2
 8008e22:	2200      	movs	r2, #0
 8008e24:	602a      	str	r2, [r5, #0]
 8008e26:	461a      	mov	r2, r3
 8008e28:	f7f9 f824 	bl	8001e74 <_read>
 8008e2c:	1c43      	adds	r3, r0, #1
 8008e2e:	d102      	bne.n	8008e36 <_read_r+0x1e>
 8008e30:	682b      	ldr	r3, [r5, #0]
 8008e32:	b103      	cbz	r3, 8008e36 <_read_r+0x1e>
 8008e34:	6023      	str	r3, [r4, #0]
 8008e36:	bd38      	pop	{r3, r4, r5, pc}
 8008e38:	200003f4 	.word	0x200003f4

08008e3c <_init>:
 8008e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e3e:	bf00      	nop
 8008e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e42:	bc08      	pop	{r3}
 8008e44:	469e      	mov	lr, r3
 8008e46:	4770      	bx	lr

08008e48 <_fini>:
 8008e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4a:	bf00      	nop
 8008e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e4e:	bc08      	pop	{r3}
 8008e50:	469e      	mov	lr, r3
 8008e52:	4770      	bx	lr
